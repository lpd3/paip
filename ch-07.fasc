(#Y(si::bytecodes nil nil (1 0 16 1 29) #1=#A(t (236) ("STUDENT" si::select-package student::rule "RULE-" list (student::pattern student::response) ((student::pattern nil t nil 0 nil) (student::response nil t nil 1 nil)) student::copy-rule (student::make-rule) si::define-structure #2=(student::rule (:type list)) ext::location (defstruct #2#) (#3=#P"/data/data/org.eql5.android.repl/files/quicklisp/local-projects/paip/ch-07.lisp" . 141) ext::annotate student::make-rule (defun student::make-rule) (#3# . 141) :lambda-list (&key #4=#:pattern #5=#:response) (nil :response :pattern) #4# #5# #Y(student::make-rule nil nil (28 20 22 40 2 77 46 21 22 40 2 77 46 22 13 1 10 0 6 2 73 29) #1# #3# 141) si::fset exp "EXP-" (student::op student::lhs student::rhs) ((student::op nil t nil 0 nil) (student::lhs nil t nil 1 nil) (student::rhs nil t nil 2 nil)) student::copy-exp (#6=(student::mkexp (student::lhs student::op student::rhs))) #7=(exp (:type list) (:constructor . #6#)) (defstruct #7#) (#3# . 525) student::mkexp (defun student::mkexp) (#3# . 525) (student::lhs student::op student::rhs) student::lhs student::op student::rhs #Y(student::mkexp nil nil (24 45 38 24 45 39 24 45 40 26 13 1 13 2 10 0 6 3 73 29) #1# #3# 525) student::expp (defun student::expp) (#3# . 652) (student::x) student::x consp #Y(student::expp nil nil (24 45 46 26 10 0 16 47 29) #1# #3# 652) student::exp-args (defun student::exp-args) (#3# . 682) (student::x) #Y(student::exp-args nil nil (24 45 46 26 10 0 5 73 29) #1# #3# 682) student::?x* (student::?* student::?x) tools::pat-match-abbrev student::?y* (student::?* student::?y) student::*student-rules* si::*make-special tools::expand-pat-match-abbrev (((student::?x* student::|.|) student::?x) ((student::?x* student::|.| student::?y*) (student::?x student::?y)) ((if student::?x* student::|,| student::then student::?y*) (student::?x student::?y)) ((if student::?x* student::then student::?y*) (student::?x student::?y)) ((if student::?x* student::|,| student::?y*) (student::?x student::?y)) ((student::?x* student::|,| and student::?y*) (student::?x student::?y)) ((find student::?x* and student::?y*) ((= student::to-find-1 student::?x) (= student::to-find-2 student::?y))) ((find student::?x*) (= student::to-find student::?x)) ((student::?x* student::equals student::?y*) (= student::?x student::?y)) ((student::?x* student::same student::as student::?y*) (= student::x? student::y?)) ((student::?x* = student::?y*) (= student::?x student::?y)) ((student::?x* student::is equal student::to student::?y*) (= student::?x student::?y)) ((student::?x* student::is student::?y*) (= student::?x student::?y)) ((student::?x* - student::?y*) (- student::?x student::?y)) ((student::?x* student::minus student::?y*) (- student::?x student::?y)) ((student::difference student::between student::?x* and student::?y*) (- student::?x student::?y)) ((student::difference student::?x* and student::?y*) (- student::?x student::?y)) ((student::?x* + student::?y*) (+ student::?x student::?y)) ((student::?x* student::plus student::?y*) (+ student::?x student::?y)) ((student::sum student::?x* and student::?y*) (+ student::?x student::?y)) ((student::product student::?x* and student::?y*) (* student::?x student::?y)) ((student::?x* * student::?y*) (* student::?x student::?y)) ((student::?x* student::times student::?y*) (* student::?x student::?y)) ((student::?x* / student::?y*) (/ student::?x student::?y)) ((student::?x* student::per student::?y*) (/ student::?x student::?y)) ((student::?x* student::divided student::by student::?y*) (/ student::?x student::?y)) ((student::half student::?x*) (/ student::?x 2)) ((student::one student::half student::?x*) (/ student::?x 2)) ((student::twice student::?x*) (* student::?x 2)) ((student::square student::?x*) (* student::?x student::?x)) ((student::?x* student::% student::less student::than student::?y*) (* student::?y (/ (- 100 student::?x) 100))) ((student::?x* student::% student::more student::than student::?y*) (* student::?y (/ (+ 100 student::?x) 100))) ((student::?x* student::% student::?y*) (* (/ student::?x 100) student::?y))) mapcar (defparameter student::*student-rules*) (#3# . 785) student::student (defun student::student) (#3# . 2085) (student::words) student::words student::noise-word-p remove-if student::translate-to-expression student::create-list-of-equations student::solve-equations #Y(student::student nil nil (24 45 70 26 33 71 12 13 0 19 2 72 12 19 1 73 12 19 1 74 12 19 1 75 29) #1# #3# 2085) function "Solve certain algebra word problems." si::set-documentation (defun student::translate-to-expression) (#3# . 2275) (student::words) :rule-if student::rule-pattern :rule-then student::rule-response :action student::bindings student::response student::translate-pair sublis #Y(nil nil nil (24 45 88 24 45 89 26 33 90 12 13 1 19 2 63 12 13 0 19 2 91 29) #1# #3# 2275) tools::rule-based-translator student::make-variable #Y(student::translate-to-expression nil nil (24 45 70 26 13 0 14 59 14 83 33 84 12 14 85 33 86 12 14 87 1 92 12 19 8 93 73 40 6 13 0 19 1 94 29) #1# #3# 2275) "Translate an English phrase into an
  equation or expresssion." (defun student::translate-pair) (#3# . 2716) (student::pair) student::pair tools::binding-var tools::binding-val #Y(student::translate-pair nil nil (24 45 100 26 13 0 19 1 101 12 13 0 19 1 102 12 19 1 73 3 73 29) #1# #3# 2716) "Translate the value part of the pair
  into an equation or expression." (defun student::create-list-of-equations) (#3# . 2912) (exp) atom append #Y(student::create-list-of-equations nil nil (24 45 25 26 10 0 76 39 5 75 73 38 34 10 0 4 16 108 39 8 10 0 6 1 73 38 20 10 0 4 12 19 1 74 12 10 0 5 12 19 1 74 12 19 2 109 29) #1# #3# 2912) "Separate out equations embedded in
  nested parentheses." (defun student::make-variable) (#3# . 3192) (student::words) #Y(student::make-variable nil nil (24 45 70 26 10 0 4 73 29) #1# #3# 3192) "Create a variable name based on the given
  list of words." (defun student::noise-word-p) (#3# . 3380) (student::word) student::word (student::a student::an the student::this number student::of student::$) member #Y(student::noise-word-p nil nil (24 45 120 26 13 0 15 121 19 2 122 29) #1# #3# 3380) "Is this a low-content word that can 
   be safely ignored?" (defun student::solve-equations) (#3# . 3525) (student::equations) student::equations "The equations to be solved are:" student::print-equations "The solution is:" student::solve #Y(student::solve-equations nil nil (24 45 128 26 15 129 13 0 19 2 130 15 131 13 0 77 19 2 132 12 19 2 130 29) #1# #3# 3525) "Print the equations and their solution." (defun student::solve) (#3# . 3747) (student::equations student::known) student::known student::equation student::one-unknown student::isolate student::solve-arithmetic student::answer student::exp-rhs student::exp-lhs remove subst #Y(nil nil nil (24 45 139 26 13 0 19 1 140 45 46 10 0 73 39 49 13 1 13 0 19 2 141 12 19 1 142 45 143 13 0 19 1 144 12 13 0 19 1 145 12 13 2 13 4 19 2 146 12 19 3 147 12 13 0 10 3 3 12 19 2 132 43 1 43 1 29) #1# #3# 3747) some #Y(student::solve nil nil (24 45 128 24 45 138 26 34 148 12 13 1 19 2 149 73 40 4 10 0 73 29) #1# #3# 3747) "Solve a system of equations by 
  constraint propagation." (defun student::isolate) (#3# . 4409) (student::e student::x) student::e eq student::in-exp = student::exp-op student::inverse-op student::commutativep #Y(student::isolate nil nil (24 45 155 24 45 46 26 13 1 19 1 145 12 10 0 17 156 39 6 10 1 73 38 236 13 0 13 1 19 1 144 12 19 2 157 39 26 13 1 19 1 144 12 15 158 13 1 19 1 145 12 19 3 34 12 13 0 19 2 141 38 198 13 0 13 1 19 1 145 12 19 1 145 12 19 2 157 39 58 13 1 19 1 145 12 19 1 145 12 15 158 13 1 19 1 144 12 13 1 19 1 145 12 19 1 159 12 19 1 160 12 13 1 19 1 145 12 19 1 144 12 19 3 34 12 19 3 34 12 13 0 19 2 141 38 124 13 1 19 1 145 12 19 1 159 12 19 1 161 39 58 13 1 19 1 145 12 19 1 144 12 15 158 13 1 19 1 144 12 13 1 19 1 145 12 19 1 159 12 19 1 160 12 13 1 19 1 145 12 19 1 145 12 19 3 34 12 19 3 34 12 13 0 19 2 141 38 52 13 1 19 1 145 12 19 1 144 12 15 158 13 1 19 1 145 12 19 1 145 12 13 1 19 1 145 12 19 1 159 12 13 1 19 1 144 12 19 3 34 12 19 3 34 12 13 0 19 2 141 29) #1# #3# 4409) "Isolate the lone x in e on the left-hand
  side of e." (defun student::print-equations) (#3# . 5580) (student::header student::equations) student::header t "~%~A~{~% ~{ ~A~}~}~%" student::prefix->infix format #Y(student::print-equations nil nil (24 45 167 24 45 128 26 14 168 15 169 13 1 33 170 12 13 0 19 2 63 12 19 4 171 29) #1# #3# 5580) "Print a list of equations." student::+operators-and-inverses+ ((+ -) (- +) (* /) (/ *) (= =)) si::*make-constant (defconstant student::+operators-and-inverses+) (#3# . 5751) (defun student::inverse-op) (#3# . 5826) (student::op) assoc second #Y(student::inverse-op nil nil (24 45 39 26 13 0 14 174 19 2 182 16 183 29) #1# #3# 5826) student::unknownp (defun student::unknownp) (#3# . 5903) (exp) symbolp #Y(student::unknownp nil nil (24 45 25 26 10 0 16 189 29) #1# #3# 5903) (defun student::in-exp) (#3# . 5947) (student::x exp) #Y(student::in-exp nil nil (24 45 46 24 45 25 26 13 1 10 0 17 156 73 40 34 13 0 19 1 42 73 39 26 13 1 13 0 19 1 145 12 19 2 157 73 40 12 13 1 13 0 19 1 144 12 19 2 157 29) #1# #3# 5947) "True if x appears anywhere in expression." student::no-unknown (defun student::no-unknown) (#3# . 6139) (exp) #Y(student::no-unknown nil nil (24 45 25 26 13 0 19 1 185 39 5 75 73 38 36 10 0 16 108 39 6 11 168 73 38 25 13 0 19 1 145 12 19 1 196 39 12 13 0 19 1 144 12 19 1 196 38 3 75 73 29) #1# #3# 6139) "Returns true if there are no unknowns
  in exp." (defun student::one-unknown) (#3# . 6350) (exp) #Y(student::one-unknown nil nil (24 45 25 26 13 0 19 1 185 39 6 10 0 73 38 57 10 0 16 108 39 5 75 73 38 47 13 0 19 1 145 12 19 1 196 39 12 13 0 19 1 144 12 19 1 140 38 25 13 0 19 1 144 12 19 1 196 39 12 13 0 19 1 145 12 19 1 140 38 3 75 73 29) #1# #3# 6350) "Returns the single unknown in an 
  expression, if there is only one." (defun student::commutativep) (#3# . 6651) (student::op) (+ * =) #Y(student::commutativep nil nil (24 45 39 26 13 0 15 210 19 2 122 29) #1# #3# 6651) "Is operator commutative?" (defun student::solve-arithmetic) (#3# . 6730) (student::equation) eval #Y(student::solve-arithmetic nil nil (24 45 139 26 13 0 19 1 145 12 15 158 13 0 19 1 144 16 216 12 19 3 34 29) #1# #3# 6730) "Do the arithmetic for the right-hand
  side." student::binary-exp-p (defun student::binary-exp-p) (#3# . 6963) (student::x) length #Y(student::binary-exp-p nil nil (24 45 46 26 13 0 19 1 42 73 39 14 13 0 19 1 49 16 223 12 9 2 19 2 158 29) #1# #3# 6963) (defun student::prefix->infix) (#3# . 7041) (exp) #Y(student::prefix->infix nil nil (24 45 25 26 10 0 16 108 39 6 10 0 73 38 40 33 170 12 13 0 19 1 219 39 23 13 0 19 1 145 12 13 0 19 1 159 12 13 0 19 1 144 6 3 73 38 4 10 0 73 12 19 2 63 29) #1# #3# 7041) "Translate prefix to infix expressions" student::trace-student (defun student::trace-student) (#3# . 7327) (student::rule-pattern student::rule-response student::exp-op student::exp-lhs student::exp-rhs student::expp student::exp-args student::student student::translate-to-expression tools::rule-based-translator student::translate-pair student::create-list-of-equations student::make-variable student::noise-word-p student::solve-equations student::solve student::isolate student::print-equations student::inverse-op student::unknownp student::in-exp student::no-unknown student::one-unknown student::commutativep student::solve-arithmetic student::binary-exp-p student::prefix->infix student::mkexp tools::binding-var tools::binding-val tools::pat-match tools::variablep tools::match-variable tools::get-binding tools::make-binding tools::extend-bindings) si::trace* #Y(student::trace-student nil nil (26 15 233 19 1 234 29) #1# #3# 7327))) #3# 0) #Y(si::bytecodes nil nil (15 2 15 3 15 4 77 15 5 15 6 15 7 77 77 77 15 8 9 2 77 77 77 19 15 9 15 10 15 11 15 12 15 13 19 4 14 15 15 15 11 15 16 15 17 19 4 14 15 15 14 18 77 15 19 19 4 14 15 15 1 23 12 19 2 24 1 2 73 29) #1# #3# 141) #Y(si::bytecodes nil nil (15 25 15 26 15 4 77 15 27 15 28 15 29 77 77 77 15 30 9 3 77 77 77 19 15 9 15 31 15 11 15 32 15 33 19 4 14 15 34 15 11 15 35 15 36 19 4 14 15 34 14 18 77 15 37 19 4 14 15 34 1 41 12 19 2 24 1 25 73 29) #1# #3# 525) #Y(si::bytecodes nil nil (15 42 15 11 15 43 15 44 19 4 14 15 42 14 18 77 15 45 19 4 14 15 42 1 48 12 19 2 24 1 42 73 29) #1# #3# 652) #Y(si::bytecodes nil nil (15 49 15 11 15 50 15 51 19 4 14 15 49 14 18 77 15 52 19 4 14 15 49 1 53 12 19 2 24 1 49 73 29) #1# #3# 682) #Y(si::bytecodes nil nil (15 54 15 55 19 2 56 29) #1# #3# 717) #Y(si::bytecodes nil nil (15 57 15 58 19 2 56 29) #1# #3# 751) #Y(si::bytecodes nil nil (1 59 16 60 33 61 12 15 62 19 2 63 52 59 15 59 15 11 15 64 15 65 19 4 14 1 59 73 29) #1# #3# 785) #Y(si::bytecodes nil nil (15 66 15 11 15 67 15 68 19 4 14 15 66 14 18 77 15 69 19 4 14 15 66 1 76 12 19 2 24 15 66 15 77 15 78 19 3 79 1 66 73 29) #1# #3# 2085) #Y(si::bytecodes nil nil (15 73 15 11 15 80 15 81 19 4 14 15 73 14 18 77 15 82 19 4 14 15 73 1 95 12 19 2 24 15 73 15 77 15 96 19 3 79 1 73 73 29) #1# #3# 2275) #Y(si::bytecodes nil nil (15 90 15 11 15 97 15 98 19 4 14 15 90 14 18 77 15 99 19 4 14 15 90 1 103 12 19 2 24 15 90 15 77 15 104 19 3 79 1 90 73 29) #1# #3# 2716) #Y(si::bytecodes nil nil (15 74 15 11 15 105 15 106 19 4 14 15 74 14 18 77 15 107 19 4 14 15 74 1 110 12 19 2 24 15 74 15 77 15 111 19 3 79 1 74 73 29) #1# #3# 2912) #Y(si::bytecodes nil nil (15 94 15 11 15 112 15 113 19 4 14 15 94 14 18 77 15 114 19 4 14 15 94 1 115 12 19 2 24 15 94 15 77 15 116 19 3 79 1 94 73 29) #1# #3# 3192) #Y(si::bytecodes nil nil (15 71 15 11 15 117 15 118 19 4 14 15 71 14 18 77 15 119 19 4 14 15 71 1 123 12 19 2 24 15 71 15 77 15 124 19 3 79 1 71 73 29) #1# #3# 3380) #Y(si::bytecodes nil nil (15 75 15 11 15 125 15 126 19 4 14 15 75 14 18 77 15 127 19 4 14 15 75 1 133 12 19 2 24 15 75 15 77 15 134 19 3 79 1 75 73 29) #1# #3# 3525) #Y(si::bytecodes nil nil (15 132 15 11 15 135 15 136 19 4 14 15 132 14 18 77 15 137 19 4 14 15 132 34 150 12 19 2 24 15 132 15 77 15 151 19 3 79 1 132 73 29) #1# #3# 3747) #Y(si::bytecodes nil nil (15 141 15 11 15 152 15 153 19 4 14 15 141 14 18 77 15 154 19 4 14 15 141 1 162 12 19 2 24 15 141 15 77 15 163 19 3 79 1 141 73 29) #1# #3# 4409) #Y(si::bytecodes nil nil (15 130 15 11 15 164 15 165 19 4 14 15 130 14 18 77 15 166 19 4 14 15 130 1 172 12 19 2 24 15 130 15 77 15 173 19 3 79 1 130 73 29) #1# #3# 5580) #Y(si::bytecodes nil nil (15 174 1 175 17 176 15 174 15 11 15 177 15 178 19 4 14 1 174 73 29) #1# #3# 5751) #Y(si::bytecodes nil nil (15 160 15 11 15 179 15 180 19 4 14 15 160 14 18 77 15 181 19 4 14 15 160 1 184 12 19 2 24 1 160 73 29) #1# #3# 5826) #Y(si::bytecodes nil nil (15 185 15 11 15 186 15 187 19 4 14 15 185 14 18 77 15 188 19 4 14 15 185 1 190 12 19 2 24 1 185 73 29) #1# #3# 5903) #Y(si::bytecodes nil nil (15 157 15 11 15 191 15 192 19 4 14 15 157 14 18 77 15 193 19 4 14 15 157 1 194 12 19 2 24 15 157 15 77 15 195 19 3 79 1 157 73 29) #1# #3# 5947) #Y(si::bytecodes nil nil (15 196 15 11 15 197 15 198 19 4 14 15 196 14 18 77 15 199 19 4 14 15 196 1 200 12 19 2 24 15 196 15 77 15 201 19 3 79 1 196 73 29) #1# #3# 6139) #Y(si::bytecodes nil nil (15 140 15 11 15 202 15 203 19 4 14 15 140 14 18 77 15 204 19 4 14 15 140 1 205 12 19 2 24 15 140 15 77 15 206 19 3 79 1 140 73 29) #1# #3# 6350) #Y(si::bytecodes nil nil (15 161 15 11 15 207 15 208 19 4 14 15 161 14 18 77 15 209 19 4 14 15 161 1 211 12 19 2 24 15 161 15 77 15 212 19 3 79 1 161 73 29) #1# #3# 6651) #Y(si::bytecodes nil nil (15 142 15 11 15 213 15 214 19 4 14 15 142 14 18 77 15 215 19 4 14 15 142 1 217 12 19 2 24 15 142 15 77 15 218 19 3 79 1 142 73 29) #1# #3# 6730) #Y(si::bytecodes nil nil (15 219 15 11 15 220 15 221 19 4 14 15 219 14 18 77 15 222 19 4 14 15 219 1 224 12 19 2 24 1 219 73 29) #1# #3# 6963) #Y(si::bytecodes nil nil (15 170 15 11 15 225 15 226 19 4 14 15 170 14 18 77 15 227 19 4 14 15 170 1 228 12 19 2 24 15 170 15 77 15 229 19 3 79 1 170 73 29) #1# #3# 7041) #Y(si::bytecodes nil nil (15 230 15 11 15 231 15 232 19 4 14 15 230 14 18 77 77 19 4 14 15 230 1 235 12 19 2 24 1 230 73 29) #1# #3# 7327))
