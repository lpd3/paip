(#Y(si::bytecodes nil nil (1 0 16 1 29) #1=#A(t (273) ("REASONING-POSSIBLE-WORLDS" si::select-package reasoning-possible-worlds::*world*% si::*make-special boundp reasoning-possible-worlds::wo variable "The current world used by index and 
  fetch." si::set-documentation ext::location (defvar reasoning-possible-worlds::*world*%) (#2=#P"/data/data/org.eql5.android.repl/files/quicklisp/local-projects/paip/ch-14c.lisp" . 73) ext::annotate reasoning-possible-worlds::index (defun reasoning-possible-worlds::index) (#2# . 146) :lambda-list (reasoning-possible-worlds::key &optional (reasoning-possible-worlds::world reasoning-possible-worlds::*world*)) reasoning-possible-worlds::key reasoning-possible-worlds::*world* reasoning-possible-worlds::world reasoning-completeness::predicate reasoning-completeness::get-dtree reasoning-possible-worlds::dtree-index #Y(reasoning-possible-worlds::index nil nil (24 45 18 25 40 3 14 19 46 20 26 13 1 13 1 13 0 13 1 19 1 21 12 19 1 22 12 19 4 23 29) #1# #2# 146) si::fset function "Store key in a dtree node. Key must be
  (predicate. args); it is stored in the 
  dtree, indexed by the world." (defun reasoning-possible-worlds::dtree-index) (#2# . 408) (reasoning-possible-worlds::key reasoning-possible-worlds::value reasoning-possible-worlds::world reasoning-completeness::dtree) reasoning-possible-worlds::value reasoning-completeness::dtree consp reasoning-completeness::dtree-first #:g1515 reasoning-completeness::make-dtree #:g1516 si::elt-set reasoning-completeness::dtree-rest #:g1517 #:g1518 reasoning-completeness::variablep reasoning-completeness::dtree-var reasoning-possible-worlds::nalist-push reasoning-completeness::lookup-atom #Y(reasoning-possible-worlds::dtree-index nil nil (24 45 18 24 45 31 24 45 20 24 45 32 26 10 3 16 33 39 87 10 3 4 12 13 2 13 1 13 0 19 1 34 73 40 23 10 0 45 35 19 0 36 45 37 13 1 9 0 13 0 19 3 38 43 1 43 1 12 19 4 23 10 3 5 12 13 2 13 1 13 0 19 1 39 73 40 23 10 0 45 40 19 0 36 45 41 13 1 9 1 13 0 19 3 38 43 1 43 1 12 19 4 23 38 44 10 3 76 73 40 38 13 3 19 1 42 39 16 13 1 13 2 13 0 19 1 43 12 19 3 44 38 16 13 1 13 2 13 3 13 0 19 2 45 12 19 3 44 29) #1# #2# 408) "Index value under all atoms of key in 
  dtree." (defun reasoning-possible-worlds::nalist-push) (#2# . 1255) (reasoning-possible-worlds::key reasoning-expressiveness::val reasoning-possible-worlds::nalist) reasoning-expressiveness::val reasoning-possible-worlds::nalist #:g1528 #:g1530 + #:g1529 rplaca assoc reasoning-possible-worlds::pair #:g1533 #:g1531 #:g1532 rplacd #:g1536 #:g1534 #:g1535 #Y(reasoning-possible-worlds::nalist-push nil nil (24 45 18 24 45 51 24 45 52 26 10 0 45 53 8 1 45 54 10 1 4 12 13 0 19 2 55 45 56 13 2 10 0 17 57 10 0 43 3 13 2 10 0 5 12 19 2 58 45 59 10 0 39 30 10 2 45 60 10 1 45 61 13 1 10 0 5 3 45 62 13 1 10 0 17 63 10 0 73 43 3 38 32 13 3 10 2 6 2 45 64 10 2 45 65 13 1 10 0 5 3 45 66 13 1 10 0 17 63 10 0 73 43 3 43 1 29) #1# #2# 1255) "Index val under key in a numbered alist." "WORLD-" (reasoning-possible-worlds::name reasoning-possible-worlds::parents reasoning-possible-worlds::current) ((reasoning-possible-worlds::name nil t nil 0 nil) (reasoning-possible-worlds::parents nil t nil 1 nil) (reasoning-possible-worlds::current nil t nil 2 nil)) reasoning-possible-worlds::copy-world reasoning-possible-worlds::print-world (reasoning-possible-worlds::make-world) reasoning-possible-worlds::world-p si::define-structure #3=(reasoning-possible-worlds::world (:print-function reasoning-possible-worlds::print-world)) (defstruct #3#) (#2# . 1559) reasoning-possible-worlds::make-world (defun reasoning-possible-worlds::make-world) (#2# . 1559) (&key #4=#:name #5=#:parents #6=#:current) (nil :current :parents :name) #4# #5# #6# 0 si::make-structure #Y(reasoning-possible-worlds::make-world nil nil (28 84 22 40 2 77 46 85 22 40 2 77 46 86 22 40 2 77 46 87 15 88 13 2 13 1 13 0 19 4 89 29) #1# #2# 1559) find-class reasoning-possible-worlds::world-current symbol-package package ext::package-locked-p si::*ignore-package-locks* package-error "Ignore lock and proceed." "Attempt to define CAS accessor ~S in locked package." (reasoning-possible-worlds::world-current) :package si::signal-simple-error mp::cas-expander #:g1540 si::x gensym si::new si::old mp::compare-and-swap-structure quote si::structure-ref #Y(nil nil nil (24 45 104 24 45 105 26 19 0 106 12 19 0 106 12 46 107 46 108 77 77 13 0 13 1 15 109 13 2 15 110 1 20 6 2 12 9 2 13 0 10 1 6 6 12 15 111 13 2 15 110 1 20 6 2 12 8 2 6 4 12 72 6 43 2 29) #1# #2# 1559) si::put-sysprop reasoning-possible-worlds::world-parents (reasoning-possible-worlds::world-parents) #:g1541 #Y(nil nil nil (24 45 116 24 45 105 26 19 0 106 12 19 0 106 12 46 107 46 108 77 77 13 0 13 1 15 109 13 2 15 110 1 20 6 2 12 9 1 13 0 10 1 6 6 12 15 111 13 2 15 110 1 20 6 2 12 8 1 6 4 12 72 6 43 2 29) #1# #2# 1559) reasoning-possible-worlds::world-name (reasoning-possible-worlds::world-name) #:g1542 #Y(nil nil nil (24 45 120 24 45 105 26 19 0 106 12 19 0 106 12 46 107 46 108 77 77 13 0 13 1 15 109 13 2 15 110 1 20 6 2 12 9 0 13 0 10 1 6 6 12 15 111 13 2 15 110 1 20 6 2 12 8 0 6 4 12 72 6 43 2 29) #1# #2# 1559) reasoning-possible-worlds::get-world (defun reasoning-possible-worlds::get-world) (#2# . 1652) (reasoning-possible-worlds::name &optional reasoning-possible-worlds::current (reasoning-possible-worlds::parents (list reasoning-possible-worlds::*world*))) reasoning-possible-worlds::name reasoning-possible-worlds::current reasoning-possible-worlds::parents get #:g1546 #:g1547 :name :parents :current #:g1548 si::putprop #Y(reasoning-possible-worlds::get-world nil nil (24 45 126 25 40 2 77 46 127 25 40 6 11 19 6 1 12 46 128 26 13 2 19 1 75 39 6 10 2 73 38 49 13 2 15 20 19 2 129 73 40 39 10 2 45 130 1 20 45 131 14 132 13 4 14 133 13 2 14 134 13 3 19 6 80 45 135 13 2 13 0 13 1 19 3 136 43 1 43 2 29) #1# #2# 1652) "Look up or create the world with this 
  name. If the world is new, give it the
  list of parents." "The current world used by index and 
  fetch." (defvar reasoning-possible-worlds::*world*) (#2# . 2080) reasoning-possible-worlds::use-world (defun reasoning-possible-worlds::use-world) (#2# . 2188) (reasoning-possible-worlds::world) eq reasoning-possible-worlds::set-world-current t #Y(reasoning-possible-worlds::use-world nil nil (24 45 20 26 13 0 19 1 122 51 0 13 0 11 19 17 146 76 73 39 19 14 19 77 19 2 147 13 0 14 148 19 2 147 10 0 52 19 73 29) #1# #2# 2188) "Make this world current." reasoning-possible-worlds::use-new-world (defun reasoning-possible-worlds::use-new-world) (#2# . 2578) "W" #:g1557 #:g1558 si::structure-set #Y(reasoning-possible-worlds::use-new-world nil nil (26 15 154 19 1 106 12 19 1 122 52 19 11 19 45 155 11 148 45 156 13 1 15 20 9 2 13 0 19 4 157 43 1 43 1 11 19 73 29) #1# #2# 2578) "Make up a new world and use it. The
  new world inherits from the current
  world." (defun reasoning-possible-worlds::set-world-current) (#2# . 2778) (reasoning-possible-worlds::world reasoning-possible-worlds::on/off) reasoning-possible-worlds::on/off #:g1561 #:g1562 si::%dolist-var reasoning-possible-worlds::parent #Y(reasoning-possible-worlds::set-world-current nil nil (24 45 20 24 45 163 26 10 1 45 164 10 1 45 165 13 1 15 20 9 2 13 0 19 4 157 43 1 43 1 13 1 19 1 114 45 166 38 20 10 0 4 45 167 13 0 13 2 19 2 147 10 1 5 51 1 43 1 10 0 40 -22 75 73 43 1 29) #1# #2# 2778) "Set the 'current' field of world and
  its parents on or off." (defun reasoning-possible-worlds::print-world) (#2# . 3042) (reasoning-possible-worlds::world &optional (stream t) reasoning-possible-worlds::depth) stream reasoning-possible-worlds::depth prin1 #Y(reasoning-possible-worlds::print-world nil nil (24 45 20 25 40 3 14 148 46 173 25 40 2 77 46 174 26 13 2 19 1 118 12 13 1 19 2 175 29) #1# #2# 3042) reasoning-possible-worlds::mapc-retrieve-in-world (defun reasoning-possible-worlds::mapc-retrieve-in-world) (#2# . 3222) (reasoning-possible-worlds::fn reasoning-possible-worlds::query) reasoning-possible-worlds::fn reasoning-possible-worlds::query reasoning-completeness::fetch reasoning-possible-worlds::bucket reasoning-possible-worlds::world/entries reasoning-possible-worlds::answer reasoning-completeness::unify reasoning-possible-worlds::bindings reasoning-completeness::+fail+ #Y(reasoning-possible-worlds::mapc-retrieve-in-world nil nil (24 45 181 24 45 182 26 13 0 19 1 183 45 166 38 98 10 0 4 45 184 10 0 45 166 38 74 10 0 4 45 185 10 0 4 12 19 1 92 39 53 10 0 5 45 166 38 40 10 0 4 45 186 13 6 13 0 19 2 187 45 188 13 0 11 189 17 146 76 39 8 13 8 13 0 20 1 23 43 1 10 1 5 51 1 43 1 10 0 40 -42 43 1 10 1 5 51 1 43 1 10 0 40 -76 43 1 10 1 5 51 1 43 1 10 0 40 -100 75 73 43 1 29) #1# #2# 3222) "For every fact in the current world
  that matches the query, apply the fn
  to the binding list." reasoning-possible-worlds::retrieve-in-world (defun reasoning-possible-worlds::retrieve-in-world) (#2# . 3706) (reasoning-possible-worlds::query) reasoning-possible-worlds::answers #Y(nil nil nil (24 45 188 26 13 0 10 1 3 51 1 73 29) #1# #2# 3706) #Y(reasoning-possible-worlds::retrieve-in-world nil nil (24 45 182 26 75 45 196 34 197 12 13 1 19 2 177 10 0 73 43 1 29) #1# #2# 3706) "Find all facts that match query. 
  Return a list of bindings." reasoning-possible-worlds::retrieve-bagof-in-world (defun reasoning-possible-worlds::retrieve-bagof-in-world) (#2# . 3946) (reasoning-possible-worlds::query) reasoning-completeness::subst-bindings #Y(nil nil nil (24 45 188 26 13 0 13 1 19 2 204 29) #1# #2# 3946) mapcar #Y(reasoning-possible-worlds::retrieve-bagof-in-world nil nil (24 45 182 26 34 205 12 13 0 19 1 192 12 19 2 206 29) #1# #2# 3946) "Find all facts in current world that 
  match query. Return a list of queries
  with bindings filled in." reasoning-possible-worlds::add-fact (defun reasoning-possible-worlds::add-fact) (#2# . 4206) (reasoning-possible-worlds::fact) reasoning-possible-worlds::fact and reasoning-expressiveness::args mapc atom every some reasoning-possible-worlds::*primitives* member "Ill-formed fact: ~A" error reasoning-expressiveness::fact-present-p reasoning-expressiveness::run-attached-fn #Y(reasoning-possible-worlds::add-fact nil nil (24 45 213 26 13 0 19 1 21 12 1 214 17 146 39 15 33 209 12 13 0 19 1 215 12 19 2 216 38 67 33 217 12 13 0 19 2 218 76 40 27 33 42 12 13 0 19 1 215 12 19 2 219 40 13 13 0 19 1 21 12 14 220 19 2 221 76 39 10 15 222 13 0 19 2 223 38 19 13 0 19 1 224 76 39 11 13 0 19 1 13 13 0 19 1 225 11 148 73 29) #1# #2# 4206) "Add the fact to the data base." reasoning-possible-worlds::index-new-fact (defun reasoning-possible-worlds::index-new-fact) (#2# . 4739) (reasoning-possible-worlds::fact) #Y(reasoning-possible-worlds::index-new-fact nil nil (24 45 213 26 13 0 19 1 224 76 73 39 6 13 0 19 1 13 29) #1# #2# 4739) "Index the fact in the data base unless
  it's already there." reasoning-possible-worlds::test-bears (defun reasoning-possible-worlds::test-bears) (#2# . 4885) reasoning-completeness::clear-dtrees ((reasoning-possible-worlds::sub reasoning-possible-worlds::animal reasoning-possible-worlds::living-thing) (reasoning-possible-worlds::sub reasoning-possible-worlds::living-thing reasoning-possible-worlds::thing) (reasoning-possible-worlds::sub reasoning-possible-worlds::polar-bear reasoning-possible-worlds::bear) (reasoning-possible-worlds::sub reasoning-possible-worlds::grizzly reasoning-possible-worlds::bear) (reasoning-expressiveness::ind reasoning-possible-worlds::yogi reasoning-possible-worlds::bear) (reasoning-expressiveness::ind reasoning-possible-worlds::lars reasoning-possible-worlds::polar-bear) (reasoning-expressiveness::ind reasoning-possible-worlds::helga reasoning-possible-worlds::grizzly)) (reasoning-possible-worlds::index) si::trace* (reasoning-possible-worlds::sub reasoning-possible-worlds::bear reasoning-possible-worlds::animal) (reasoning-possible-worlds::index) si::untrace* #Y(reasoning-possible-worlds::test-bears nil nil (26 19 0 237 33 209 12 15 238 19 2 216 15 239 19 1 240 15 241 19 1 209 15 242 19 1 243 29) #1# #2# 4885) reasoning-possible-worlds::sub #:g1565 reasoning-expressiveness::attached-fn #:g1566 reasoning-possible-worlds::subcat reasoning-possible-worlds::supercat #:bindings1568 reasoning-possible-worlds::?super-super #:bindings1569 reasoning-possible-worlds::?sub-sub #Y(nil nil nil (24 45 253 26 13 0 15 254 19 2 204 45 254 15 245 13 0 10 2 6 3 12 19 1 228 43 1 29) #1# #2# 5232) reasoning-expressiveness::mapc-retrieve #Y(nil nil nil (24 45 251 26 13 0 15 252 19 2 204 45 252 15 245 13 3 10 0 6 3 12 19 1 228 34 255 12 15 245 15 254 10 3 6 3 12 19 2 256 43 1 29) #1# #2# 5232) #:bindings1570 #Y(nil nil nil (24 45 258 26 13 0 15 254 19 2 204 45 254 15 245 13 0 10 2 6 3 12 19 1 228 43 1 29) #1# #2# 5232) #:bindings1571 #:bindings1572 #:bindings1573 reasoning-possible-worlds::?ind reasoning-expressiveness::ind #Y(nil nil nil (24 45 262 26 13 0 15 263 19 2 204 45 263 15 264 13 0 10 4 6 3 12 19 1 228 43 1 29) #1# #2# 5232) #Y(nil nil nil (24 45 261 26 13 0 15 254 19 2 204 45 254 34 265 12 15 264 15 263 10 0 6 3 12 19 2 256 43 1 29) #1# #2# 5232) #Y(nil nil nil (24 45 260 26 13 0 15 252 19 2 204 45 252 34 266 12 15 245 15 254 10 2 6 3 12 19 2 256 43 1 29) #1# #2# 5232) #Y(nil nil nil (24 45 249 24 45 250 26 34 257 12 15 245 13 0 1 252 6 3 12 19 2 256 34 259 12 15 245 15 254 10 1 6 3 12 19 2 256 34 267 12 15 245 13 1 1 252 6 3 12 19 2 256 29) #1# #2# 5232) #:g1567 (and reasoning-possible-worlds::sub reasoning-expressiveness::ind reasoning-expressiveness::rel reasoning-expressiveness::val) (defparameter reasoning-possible-worlds::*primitives*) (#2# . 6001))) #2# 0) #Y(si::bytecodes nil nil (1 2 16 3 1 2 16 4 76 39 5 1 5 52 2 15 2 15 6 15 7 19 3 8 15 2 15 9 15 10 15 11 19 4 12 1 2 73 29) #1# #2# 73) #Y(si::bytecodes nil nil (15 13 15 9 15 14 15 15 19 4 12 15 13 14 16 77 15 17 19 4 12 15 13 1 24 12 19 2 25 15 13 15 26 15 27 19 3 8 1 13 73 29) #1# #2# 146) #Y(si::bytecodes nil nil (15 23 15 9 15 28 15 29 19 4 12 15 23 14 16 77 15 30 19 4 12 15 23 1 46 12 19 2 25 15 23 15 26 15 47 19 3 8 1 23 73 29) #1# #2# 408) #Y(si::bytecodes nil nil (15 44 15 9 15 48 15 49 19 4 12 15 44 14 16 77 15 50 19 4 12 15 44 1 67 12 19 2 25 15 44 15 26 15 68 19 3 8 1 44 73 29) #1# #2# 1255) #Y(si::bytecodes nil nil (15 20 15 69 77 77 15 70 15 71 15 72 77 15 73 77 15 74 9 3 77 77 15 75 19 15 76 15 77 15 9 15 78 15 79 19 4 12 15 80 15 9 15 81 15 82 19 4 12 15 80 14 16 77 15 83 19 4 12 15 20 19 1 91 78 88 15 80 1 90 12 19 2 25 1 92 16 93 45 94 10 0 39 10 10 0 16 95 39 4 11 96 76 39 16 15 97 15 98 15 99 15 100 14 101 13 0 19 6 102 43 1 15 92 15 103 1 112 12 19 3 113 1 114 16 93 45 94 10 0 39 10 10 0 16 95 39 4 11 96 76 39 16 15 97 15 98 15 99 15 115 14 101 13 0 19 6 102 43 1 15 114 15 103 1 117 12 19 3 113 1 118 16 93 45 94 10 0 39 10 10 0 16 95 39 4 11 96 76 39 16 15 97 15 98 15 99 15 119 14 101 13 0 19 6 102 43 1 15 118 15 103 1 121 12 19 3 113 1 20 73 29) #1# #2# 1559) #Y(si::bytecodes nil nil (15 122 15 9 15 123 15 124 19 4 12 15 122 14 16 77 15 125 19 4 12 15 122 1 137 12 19 2 25 15 122 15 26 15 138 19 3 8 1 122 73 29) #1# #2# 1652) #Y(si::bytecodes nil nil (1 19 16 3 1 19 16 4 76 39 10 15 5 77 77 19 3 122 52 19 15 19 15 6 15 139 19 3 8 15 19 15 9 15 140 15 141 19 4 12 1 19 73 29) #1# #2# 2080) #Y(si::bytecodes nil nil (15 142 15 9 15 143 15 144 19 4 12 15 142 14 16 77 15 145 19 4 12 15 142 1 149 12 19 2 25 15 142 15 26 15 150 19 3 8 1 142 73 29) #1# #2# 2188) #Y(si::bytecodes nil nil (15 151 15 9 15 152 15 153 19 4 12 15 151 14 16 77 77 19 4 12 15 151 1 158 12 19 2 25 15 151 15 26 15 159 19 3 8 1 151 73 29) #1# #2# 2578) #Y(si::bytecodes nil nil (15 147 15 9 15 160 15 161 19 4 12 15 147 14 16 77 15 162 19 4 12 15 147 1 168 12 19 2 25 15 147 15 26 15 169 19 3 8 1 147 73 29) #1# #2# 2778) #Y(si::bytecodes nil nil (15 73 15 9 15 170 15 171 19 4 12 15 73 14 16 77 15 172 19 4 12 15 73 1 176 12 19 2 25 1 73 73 29) #1# #2# 3042) #Y(si::bytecodes nil nil (15 177 15 9 15 178 15 179 19 4 12 15 177 14 16 77 15 180 19 4 12 15 177 1 190 12 19 2 25 15 177 15 26 15 191 19 3 8 1 177 73 29) #1# #2# 3222) #Y(si::bytecodes nil nil (15 192 15 9 15 193 15 194 19 4 12 15 192 14 16 77 15 195 19 4 12 15 192 34 198 12 19 2 25 15 192 15 26 15 199 19 3 8 1 192 73 29) #1# #2# 3706) #Y(si::bytecodes nil nil (15 200 15 9 15 201 15 202 19 4 12 15 200 14 16 77 15 203 19 4 12 15 200 34 207 12 19 2 25 15 200 15 26 15 208 19 3 8 1 200 73 29) #1# #2# 3946) #Y(si::bytecodes nil nil (15 209 15 9 15 210 15 211 19 4 12 15 209 14 16 77 15 212 19 4 12 15 209 1 226 12 19 2 25 15 209 15 26 15 227 19 3 8 1 209 73 29) #1# #2# 4206) #Y(si::bytecodes nil nil (15 228 15 9 15 229 15 230 19 4 12 15 228 14 16 77 15 231 19 4 12 15 228 1 232 12 19 2 25 15 228 15 26 15 233 19 3 8 1 228 73 29) #1# #2# 4739) #Y(si::bytecodes nil nil (15 234 15 9 15 235 15 236 19 4 12 15 234 14 16 77 77 19 4 12 15 234 1 244 12 19 2 25 1 234 73 29) #1# #2# 4885) #Y(si::bytecodes nil nil (1 245 45 246 1 247 45 248 34 268 45 269 13 2 13 0 13 1 19 3 136 43 1 43 2 29) #1# #2# 5232) #Y(si::bytecodes nil nil (1 220 16 3 1 270 52 220 15 220 15 9 15 271 15 272 19 4 12 1 220 73 29) #1# #2# 6001))
