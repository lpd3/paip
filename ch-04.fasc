(#Y(si::bytecodes nil nil (1 0 16 1 29) #1=#A(t (539) ("GENERAL-PROBLEM-SOLVER" si::select-package general-problem-solver::find-all ext::location (defun general-problem-solver::find-all) (#2=#P"/data/data/org.eql5.android.repl/files/quicklisp/local-projects/paip/ch-04.lisp" . 120) ext::annotate :lambda-list (general-problem-solver::item sequence &rest general-problem-solver::keyword-args &key (general-problem-solver::test (function eql)) general-problem-solver::test-not &allow-other-keys) general-problem-solver::item sequence general-problem-solver::keyword-args (t :test-not :test) eql general-problem-solver::test general-problem-solver::test-not remove :test-not complement apply :test #Y(general-problem-solver::find-all nil nil (24 45 9 24 45 10 27 45 11 28 12 22 40 4 33 13 12 46 14 22 40 2 77 46 15 10 0 39 22 33 16 12 13 4 13 3 14 17 10 0 16 18 12 13 2 19 6 19 38 20 33 16 12 13 4 13 3 14 20 10 1 16 18 12 13 2 19 6 19 29) #1# #2# 120) si::fset function "Find all elements in the sequence that 
  match item, according to the kwargs." si::set-documentation general-problem-solver::*state* si::*make-special boundp variable "The current state: a list of conditions" (defvar general-problem-solver::*state*) (#2# . 585) general-problem-solver::*ops* "A list of available operators." (defvar general-problem-solver::*ops*) (#2# . 651) general-problem-solver::op "OP-" (#3="an operation" (general-problem-solver::action nil) (general-problem-solver::preconds nil) (general-problem-solver::add-list nil) (general-problem-solver::del-list nil)) ((general-problem-solver::action nil t nil 0 nil) (general-problem-solver::preconds nil t nil 1 nil) (general-problem-solver::add-list nil t nil 2 nil) (general-problem-solver::del-list nil t nil 3 nil)) general-problem-solver::copy-op (general-problem-solver::make-op) #3# general-problem-solver::op-p si::define-structure (defstruct general-problem-solver::op) (#2# . 706) general-problem-solver::make-op (defun general-problem-solver::make-op) (#2# . 706) (&key #4=#:action #5=#:preconds #6=#:add-list #7=#:del-list) (nil :del-list :add-list :preconds :action) #4# #5# #6# #7# 0 si::make-structure #Y(general-problem-solver::make-op nil nil (28 52 22 40 2 77 46 53 22 40 2 77 46 54 22 40 2 77 46 55 22 40 2 77 46 56 15 57 13 3 13 2 13 1 13 0 19 5 58 29) #1# #2# 706) find-class general-problem-solver::op-del-list symbol-package package ext::package-locked-p si::*ignore-package-locks* package-error "Ignore lock and proceed." "Attempt to define CAS accessor ~S in locked package." (general-problem-solver::op-del-list) :package si::signal-simple-error mp::cas-expander #:g93 si::x gensym si::new si::old mp::compare-and-swap-structure quote si::structure-ref #Y(nil nil nil (24 45 73 24 45 74 26 19 0 75 12 19 0 75 12 46 76 46 77 77 77 13 0 13 1 15 78 13 2 15 79 1 37 6 2 12 9 3 13 0 10 1 6 6 12 15 80 13 2 15 79 1 37 6 2 12 8 3 6 4 12 72 6 43 2 29) #1# #2# 706) si::put-sysprop general-problem-solver::op-add-list (general-problem-solver::op-add-list) #:g94 #Y(nil nil nil (24 45 85 24 45 74 26 19 0 75 12 19 0 75 12 46 76 46 77 77 77 13 0 13 1 15 78 13 2 15 79 1 37 6 2 12 9 2 13 0 10 1 6 6 12 15 80 13 2 15 79 1 37 6 2 12 8 2 6 4 12 72 6 43 2 29) #1# #2# 706) general-problem-solver::op-preconds (general-problem-solver::op-preconds) #:g95 #Y(nil nil nil (24 45 89 24 45 74 26 19 0 75 12 19 0 75 12 46 76 46 77 77 77 13 0 13 1 15 78 13 2 15 79 1 37 6 2 12 9 1 13 0 10 1 6 6 12 15 80 13 2 15 79 1 37 6 2 12 8 1 6 4 12 72 6 43 2 29) #1# #2# 706) general-problem-solver::op-action (general-problem-solver::op-action) #:g96 #Y(nil nil nil (24 45 93 24 45 74 26 19 0 75 12 19 0 75 12 46 76 46 77 77 77 13 0 13 1 15 78 13 2 15 79 1 37 6 2 12 9 0 13 0 10 1 6 6 12 15 80 13 2 15 79 1 37 6 2 12 8 0 6 4 12 72 6 43 2 29) #1# #2# 706) general-problem-solver::appropriatep% (defun general-problem-solver::appropriatep%) (#2# . 806) (general-problem-solver::goal general-problem-solver::op) general-problem-solver::goal member #Y(general-problem-solver::appropriatep% nil nil (24 45 99 24 45 37 26 13 1 13 0 19 1 83 12 19 2 100 29) #1# #2# 806) "An op is appropriate to a goal if the
  goal is in the op's add-list" general-problem-solver::apply-op% (defun general-problem-solver::apply-op%) (#2# . 951) (general-problem-solver::op) general-problem-solver::achieve every general-problem-solver::executing print set-difference union #Y(general-problem-solver::apply-op% nil nil (24 45 37 26 33 107 12 13 0 19 1 87 12 19 2 108 73 39 41 15 109 13 0 19 1 91 6 2 12 19 1 110 14 26 13 0 19 1 61 12 19 2 111 52 26 14 26 13 0 19 1 83 12 19 2 112 52 26 73 29) #1# #2# 951) "Print a message and update *state* if op
  is applicable." general-problem-solver::achieve% (defun general-problem-solver::achieve%) (#2# . 1302) (general-problem-solver::goal) general-problem-solver::apply-op general-problem-solver::appropriatep some #Y(general-problem-solver::achieve% nil nil (24 45 99 26 13 0 14 26 19 2 100 73 40 20 33 119 12 13 0 14 33 14 20 33 120 12 19 4 2 12 19 2 121 29) #1# #2# 1302) "A goal is achieved if it already holds,
  or if there is an appropriate op for it
  that is applicable." general-problem-solver::gps% (defun general-problem-solver::gps%) (#2# . 1569) (general-problem-solver::*state* general-problem-solver::goals general-problem-solver::*ops*) general-problem-solver::goals general-problem-solver::solved #Y(general-problem-solver::gps% nil nil (24 48 26 24 45 128 24 48 33 26 33 107 12 13 0 19 2 108 73 39 4 1 129 73 44 2 29) #1# #2# 1569) "General Problem Solver: achieve all
  goals using *ops*" general-problem-solver::*school-ops* :action general-problem-solver::drive-son-to-school :preconds (general-problem-solver::son-at-home general-problem-solver::car-works) :add-list (general-problem-solver::son-at-school) :del-list (general-problem-solver::son-at-home) general-problem-solver::shop-installs-battery (general-problem-solver::car-needs-battery general-problem-solver::shop-knows-problem general-problem-solver::shop-has-money) (general-problem-solver::car-works) general-problem-solver::tell-shop-problem (general-problem-solver::in-communication-with-shop) (general-problem-solver::shop-knows-problem) general-problem-solver::telephone-shop (general-problem-solver::know-phone-number) (general-problem-solver::in-communication-with-shop) general-problem-solver::look-up-number (general-problem-solver::have-phone-book) (general-problem-solver::know-phone-number) general-problem-solver::give-shop-money (general-problem-solver::have-money) (general-problem-solver::shop-has-money) (general-problem-solver::have-money) (defparameter general-problem-solver::*school-ops*) (#2# . 1718) general-problem-solver::gps%% (defun general-problem-solver::gps%%) (#2# . 2734) (general-problem-solver::*state* general-problem-solver::goals general-problem-solver::*ops*) subsetp #Y(general-problem-solver::gps%% nil nil (24 48 26 24 45 128 24 48 33 26 33 107 12 13 0 19 2 108 73 39 8 13 0 14 26 19 2 163 44 2 29) #1# #2# 2734) "General Problem Solver: achieve all
  goals using *ops*. Fixed the ``clobbered
  sibling goal'' problem." general-problem-solver::*dbg-ids* "Identifiers used by dbg." (defvar general-problem-solver::*dbg-ids*) (#2# . 4019) general-problem-solver::dbg% (defun general-problem-solver::dbg%) (#2# . 4861) (general-problem-solver::id general-problem-solver::format-string &rest general-problem-solver::args) general-problem-solver::id general-problem-solver::format-string general-problem-solver::args *debug-io* fresh-line format #Y(general-problem-solver::dbg% nil nil (24 45 174 24 45 175 27 45 176 13 2 14 166 19 2 100 73 39 18 14 177 19 1 178 33 179 12 14 177 13 1 13 0 19 4 19 29) #1# #2# 4861) "Print debugging info if (debug* <id>)
  has been specified." general-problem-solver::debug* (defun general-problem-solver::debug*) (#2# . 5103) (&rest general-problem-solver::ids) general-problem-solver::ids #Y(general-problem-solver::debug* nil nil (27 45 186 13 0 14 166 19 2 112 52 166 73 29) #1# #2# 5103) "Start dbg output on the given ids." general-problem-solver::undebug* (defun general-problem-solver::undebug*) (#2# . 5219) (&rest general-problem-solver::ids) #Y(general-problem-solver::undebug* nil nil (27 45 186 10 0 76 39 4 75 38 8 14 166 13 0 19 2 111 52 166 73 29) #1# #2# 5219) "Stop dbg on the ids. When no ids, 
  stop debugging altogether." general-problem-solver::dbg-indent% (defun general-problem-solver::dbg-indent%) (#2# . 5433) (general-problem-solver::id general-problem-solver::indent general-problem-solver::format-string &rest general-problem-solver::args) general-problem-solver::indent si::%dotimes-var general-problem-solver::i " " princ 1+ < #Y(general-problem-solver::dbg-indent% nil nil (24 45 174 24 45 199 24 45 175 27 45 176 13 3 14 166 19 2 100 73 39 52 14 177 19 1 178 10 2 45 200 8 0 45 201 38 14 15 202 14 177 19 2 203 10 0 16 204 51 0 13 0 13 1 19 2 205 40 -21 43 2 33 179 12 14 177 13 1 13 0 19 4 19 29) #1# #2# 5433) "Print indented debugging info if 
  (debug* <id>) has been specified." general-problem-solver::find-all-if remove-if-not general-problem-solver::starts-with (defun general-problem-solver::starts-with) (#2# . 5810) (general-problem-solver::lst general-problem-solver::x) general-problem-solver::lst general-problem-solver::x consp #Y(general-problem-solver::starts-with nil nil (24 45 214 24 45 215 26 10 1 16 216 73 39 9 10 1 4 12 10 0 17 13 29) #1# #2# 5810) "Is this a list whose first element is x?" general-problem-solver::executingp (defun general-problem-solver::executingp) (#2# . 6161) (general-problem-solver::x) #Y(general-problem-solver::executingp nil nil (24 45 215 26 13 0 15 109 19 2 210 29) #1# #2# 6161) "Is x of the form (executing...) ?" general-problem-solver::convert-op (defun general-problem-solver::convert-op) (#2# . 6260) (general-problem-solver::op) #:g112 #:g110 #:g111 si::structure-set #Y(general-problem-solver::convert-op nil nil (24 45 37 26 33 219 12 13 0 19 1 83 12 19 2 121 76 39 39 15 109 13 0 19 1 91 6 2 45 229 10 1 45 230 13 1 13 0 19 1 83 3 45 231 13 1 15 37 9 2 13 0 19 4 232 43 3 10 0 73 29) #1# #2# 6260) "Make op conform to the (executing op)
  convention." (defun general-problem-solver::op) (#2# . 6479) (general-problem-solver::action &key general-problem-solver::preconds general-problem-solver::add-list general-problem-solver::del-list) general-problem-solver::action (nil :del-list :add-list :preconds) general-problem-solver::preconds general-problem-solver::add-list general-problem-solver::del-list #Y(general-problem-solver::op nil nil (24 45 238 28 239 22 40 2 77 46 240 22 40 2 77 46 241 22 40 2 77 46 242 14 133 13 3 14 135 13 2 14 137 13 1 14 139 13 0 19 8 48 12 19 1 225 29) #1# #2# 6479) "Make a new operator that obeys the 
  (executing op) convention." mapc general-problem-solver::member-equal (defun general-problem-solver::member-equal) (#2# . 6885) (general-problem-solver::item general-problem-solver::lst) equal #Y(general-problem-solver::member-equal nil nil (24 45 9 24 45 214 26 13 1 13 0 14 20 33 250 12 19 4 100 29) #1# #2# 6885) (defun general-problem-solver::appropriatep) (#2# . 7058) (general-problem-solver::goal general-problem-solver::op) #Y(general-problem-solver::appropriatep nil nil (24 45 99 24 45 37 26 13 1 13 0 19 1 83 12 19 2 246 29) #1# #2# 7058) "An op is appropriate to a goal if it is 
  in its add-list. 2nd implementation." (defun general-problem-solver::apply-op) (#2# . 7217) (general-problem-solver::state general-problem-solver::goal general-problem-solver::op general-problem-solver::goal-stack) general-problem-solver::state general-problem-solver::goal-stack :gps length "Consider: ~A" general-problem-solver::dbg-indent general-problem-solver::achieve-all general-problem-solver::state2 "Action: ~A" #Y(nil nil nil (24 45 215 26 13 0 13 3 19 1 61 12 19 2 246 29) #1# #2# 7217) remove-if append #Y(general-problem-solver::apply-op nil nil (24 45 260 24 45 99 24 45 37 24 45 261 26 14 262 10 0 16 263 12 15 264 13 1 19 1 91 12 19 4 265 13 3 13 1 19 1 87 12 13 2 10 0 3 12 19 3 266 45 267 10 0 76 76 73 39 37 14 262 10 1 16 263 12 15 268 13 2 19 1 91 12 19 4 265 34 269 12 13 0 19 2 270 12 13 2 19 1 83 12 19 2 271 43 1 29) #1# #2# 7217) "Return a new, transformed state if op
  is applicable." general-problem-solver::achieve%% (defun general-problem-solver::achieve%%) (#2# . 7839) (general-problem-solver::state general-problem-solver::goal general-problem-solver::goal-stack) "Goal: ~A" #Y(nil nil nil (24 45 37 26 13 3 13 2 13 0 13 1 19 4 119 29) #1# #2# 7839) #Y(general-problem-solver::achieve%% nil nil (24 45 260 24 45 99 24 45 261 26 14 262 10 0 16 263 12 15 278 13 1 19 4 265 13 1 13 2 19 2 246 39 6 10 2 73 38 33 13 1 13 0 19 2 246 39 5 75 73 38 20 34 279 12 13 1 14 33 14 20 33 120 12 19 4 2 12 19 2 121 29) #1# #2# 7839) "A goal is achieved if it already holds,
   or if there is an appropriate op for it
   that is applicable. Second implementation." general-problem-solver::achieve-all% (defun general-problem-solver::achieve-all%) (#2# . 8377) (general-problem-solver::state general-problem-solver::goals general-problem-solver::goal-stack) general-problem-solver::current-state general-problem-solver::g #Y(nil nil nil (24 45 287 26 13 1 13 0 13 2 19 3 107 51 1 73 29) #1# #2# 8377) #Y(general-problem-solver::achieve-all% nil nil (24 45 260 24 45 128 24 45 261 26 10 2 45 286 34 288 12 13 2 19 2 108 39 13 13 2 13 0 14 20 33 250 12 19 4 163 73 39 4 10 0 73 43 1 29) #1# #2# 8377) "Achieve each goal, and make sure they
  still hold at the end." general-problem-solver::gps%%% (defun general-problem-solver::gps%%%) (#2# . 8858) (general-problem-solver::state general-problem-solver::goals &optional (general-problem-solver::*ops* general-problem-solver::*ops*)) atom (general-problem-solver::start) #Y(general-problem-solver::gps%%% nil nil (24 45 260 24 45 128 25 40 3 14 33 49 33 26 33 295 12 15 296 10 1 3 12 13 0 77 19 3 266 12 19 2 270 44 1 29) #1# #2# 8858) "General Problem Solver: achieve all
  goals using *ops*. New implementation." general-problem-solver::use (defun general-problem-solver::use) (#2# . 9095) (general-problem-solver::oplist) general-problem-solver::oplist #Y(general-problem-solver::use nil nil (24 45 303 26 10 0 52 33 16 263 29) #1# #2# 9095) "Use oplist as the default set of 
  operators." general-problem-solver::ask-phone-number (general-problem-solver::in-communication-with-shop) (general-problem-solver::know-phone-number) general-problem-solver::*banana-ops* general-problem-solver::climb-on-chair (general-problem-solver::chair-at-middle-room general-problem-solver::at-middle-room general-problem-solver::on-floor) (general-problem-solver::at-bananas general-problem-solver::on-chair) (general-problem-solver::at-middle-room general-problem-solver::on-floor) general-problem-solver::push-chair-from-door-to-middle-room (general-problem-solver::chair-at-door general-problem-solver::at-door) (general-problem-solver::chair-at-middle-room general-problem-solver::at-middle-room) (general-problem-solver::chair-at-door general-problem-solver::at-door) general-problem-solver::walk-from-door-to-middle-room (general-problem-solver::at-door general-problem-solver::on-floor) (general-problem-solver::at-middle-room) (general-problem-solver::at-door) general-problem-solver::grasp-bananas (general-problem-solver::at-bananas general-problem-solver::empty-handed) (general-problem-solver::has-bananas) (general-problem-solver::empty-handed) general-problem-solver::drop-ball (general-problem-solver::has-ball) (general-problem-solver::empty-handed) (general-problem-solver::has-ball) general-problem-solver::eat-bananas (general-problem-solver::has-bananas) (general-problem-solver::empty-handed general-problem-solver::not-hungry) (general-problem-solver::has-bananas (quote general-problem-solver::hungry)) (defparameter general-problem-solver::*banana-ops*) (#2# . 9396) general-problem-solver::make-maze-op (defun general-problem-solver::make-maze-op) (#2# . 12195) (general-problem-solver::here general-problem-solver::there) general-problem-solver::here general-problem-solver::there general-problem-solver::move general-problem-solver::from general-problem-solver::to general-problem-solver::at #Y(general-problem-solver::make-maze-op nil nil (24 45 340 24 45 341 26 15 342 15 343 13 1 15 344 10 0 6 5 12 14 135 15 345 10 1 6 2 6 1 12 14 137 15 345 10 0 6 2 6 1 12 14 139 15 345 10 1 6 2 6 1 12 19 7 37 29) #1# #2# 12195) "Make an operator to move between two
   places." general-problem-solver::make-maze-ops (defun general-problem-solver::make-maze-ops) (#2# . 12821) (general-problem-solver::pair) general-problem-solver::pair second #Y(general-problem-solver::make-maze-ops nil nil (24 45 352 26 10 0 4 12 10 0 16 353 12 19 2 336 12 10 0 16 353 12 10 0 4 12 19 2 336 6 2 73 29) #1# #2# 12821) "Make maze ops in both directions." general-problem-solver::*maze-ops* ((1 2) (2 3) (3 4) (4 9) (9 14) (9 8) (8 7) (7 12) (12 13) (12 11) (11 6) (11 16) (16 17) (17 22) (21 22) (22 23) (23 18) (23 24) (24 19) (19 20) (20 15) (15 10) (10 5) (20 25)) alexandria::mappend (defparameter general-problem-solver::*maze-ops*) (#2# . 12990) general-problem-solver::gps (defun general-problem-solver::gps) (#2# . 13258) (general-problem-solver::state general-problem-solver::goals &optional (general-problem-solver::*ops* general-problem-solver::*ops*)) general-problem-solver::actionp (general-problem-solver::start) #Y(general-problem-solver::gps nil nil (24 45 260 24 45 128 25 40 3 14 33 49 33 26 33 365 12 15 366 10 1 3 12 13 0 77 19 3 266 12 19 2 208 44 1 29) #1# #2# 13258) "General Problem Solver: from state, 
  achieve goals using *ops*. 4th version.
  Does not use a pun." (defun general-problem-solver::actionp) (#2# . 13915) (general-problem-solver::x) (general-problem-solver::start) #Y(general-problem-solver::actionp nil nil (24 45 215 26 13 0 1 372 17 250 73 40 6 13 0 19 1 219 29) #1# #2# 13915) "Is x something that is (start) or
  (executing ...)?" general-problem-solver::find-path (defun general-problem-solver::find-path) (#2# . 14040) (general-problem-solver::start general-problem-solver::end) general-problem-solver::start general-problem-solver::end general-problem-solver::results general-problem-solver::destination (general-problem-solver::start) mapcar #Y(general-problem-solver::find-path nil nil (24 45 379 24 45 380 26 15 345 10 1 6 2 6 1 12 15 345 10 0 6 2 6 1 12 19 2 361 45 381 10 0 73 39 24 13 2 33 382 12 15 383 13 0 14 20 33 250 12 19 4 16 12 19 2 384 3 73 43 1 29) #1# #2# 14040) "Search a maze for a path from start
  to end." (defun general-problem-solver::destination) (#2# . 14484) (general-problem-solver::action) fifth #Y(general-problem-solver::destination nil nil (24 45 238 26 10 0 16 353 16 390 29) #1# #2# 14484) "Find the y in 
  (executing (move from x to y))" general-problem-solver::make-block-ops (defun general-problem-solver::make-block-ops) (#2# . 14592) (general-problem-solver::blocks) general-problem-solver::blocks general-problem-solver::ops si::%dolist-var general-problem-solver::a general-problem-solver::b general-problem-solver::c general-problem-solver::move-op general-problem-solver::table #Y(general-problem-solver::make-block-ops nil nil (24 45 397 26 75 45 398 10 1 45 399 38 132 10 0 4 45 400 10 3 45 399 38 108 10 0 4 45 401 13 2 10 0 17 250 76 39 87 10 5 45 399 38 45 10 0 4 45 402 13 4 10 0 17 250 40 7 13 2 10 0 17 250 76 39 16 13 4 13 2 13 0 19 3 403 12 10 6 3 51 6 10 1 5 51 1 43 1 10 0 40 -47 43 1 13 2 15 404 13 0 19 3 403 12 10 4 3 51 4 13 2 13 0 15 404 19 3 403 12 10 4 3 51 4 10 1 5 51 1 43 1 10 0 40 -110 43 1 10 1 5 51 1 43 1 10 0 40 -134 43 1 10 0 73 43 1 29) #1# #2# 14592) (defun general-problem-solver::move-op) (#2# . 15094) (general-problem-solver::a general-problem-solver::b general-problem-solver::c) space general-problem-solver::on general-problem-solver::move-ons #Y(general-problem-solver::move-op nil nil (24 45 400 24 45 401 24 45 402 26 15 342 13 2 15 343 13 1 15 344 10 0 6 6 12 14 135 15 409 15 410 10 2 6 3 12 15 409 15 410 10 0 6 3 12 13 2 15 410 10 1 6 3 6 3 12 14 137 13 2 13 1 13 0 19 3 411 12 14 139 13 2 13 0 13 1 19 3 411 12 19 7 37 29) #1# #2# 15094) "Make an operator to move a from b to c." (defun general-problem-solver::move-ons) (#2# . 15355) (general-problem-solver::a general-problem-solver::b general-problem-solver::c) eq #Y(general-problem-solver::move-ons nil nil (24 45 400 24 45 401 24 45 402 26 13 1 1 404 17 417 39 14 13 2 15 410 10 0 6 3 6 1 73 38 21 13 2 15 410 10 0 6 3 12 15 409 15 410 10 1 6 3 6 2 73 29) #1# #2# 15355) general-problem-solver::debug-show (defmacro general-problem-solver::debug-show) (#2# . 15456) ((&optional general-problem-solver::program (stream *standard-output*)) general-problem-solver::expr) #:g151 #:g150 #:g152 si::dm-too-few-arguments #:g153 #:g154 general-problem-solver::program *standard-output* stream general-problem-solver::expr si::dm-too-many-arguments let #Y(general-problem-solver::debug-show nil nil (24 45 423 24 45 424 26 10 1 5 45 425 10 0 76 39 6 13 2 19 1 426 10 0 4 12 10 0 5 51 0 22 45 427 10 0 45 428 10 0 39 13 10 0 4 12 10 0 5 51 0 22 38 2 75 45 429 10 1 39 13 10 1 4 12 10 1 5 51 1 22 38 3 11 430 45 431 10 4 76 39 6 13 6 19 1 426 10 4 4 12 10 4 5 51 4 22 45 432 10 5 39 6 13 7 19 1 433 10 3 39 6 13 7 19 1 433 10 2 39 6 13 2 19 1 182 15 434 15 177 10 1 6 2 6 1 12 10 0 6 3 73 29) #1# #2# 15456) t (defun general-problem-solver::achieve-all) (#2# . 15659) (general-problem-solver::state general-problem-solver::goals general-problem-solver::goal-stack) general-problem-solver::achieve-each #Y(nil nil nil (24 45 128 26 13 3 13 0 13 1 19 3 440 29) #1# #2# 15659) general-problem-solver::orderings #Y(general-problem-solver::achieve-all nil nil (24 45 260 24 45 128 24 45 261 26 34 441 12 13 1 19 1 442 12 19 2 121 29) #1# #2# 15659) (defun general-problem-solver::achieve-each) (#2# . 16604) (general-problem-solver::state general-problem-solver::goals general-problem-solver::goal-stack) #Y(nil nil nil (24 45 287 26 13 1 13 0 13 2 19 3 107 51 1 73 29) #1# #2# 16604) #Y(general-problem-solver::achieve-each nil nil (24 45 260 24 45 128 24 45 261 26 10 2 45 286 34 447 12 13 2 19 2 108 39 13 13 2 13 0 14 20 33 250 12 19 4 163 73 39 4 10 0 73 43 1 29) #1# #2# 16604) (defun general-problem-solver::orderings) (#2# . 17029) (general-problem-solver::lst) > reverse #Y(general-problem-solver::orderings nil nil (24 45 214 26 10 0 16 263 12 9 1 19 2 452 39 12 13 0 10 0 16 453 6 2 73 38 6 10 0 6 1 73 29) #1# #2# 17029) (defun general-problem-solver::achieve) (#2# . 17128) (general-problem-solver::state general-problem-solver::goal general-problem-solver::goal-stack) "Goal: ~A" #Y(nil nil nil (24 45 37 26 13 3 13 2 13 0 13 1 19 4 119 29) #1# #2# 17128) general-problem-solver::appropriate-ops #Y(general-problem-solver::achieve nil nil (24 45 260 24 45 99 24 45 261 26 14 262 10 0 16 263 12 15 458 13 1 19 4 265 13 1 13 2 19 2 246 39 6 10 2 73 38 28 13 1 13 0 19 2 246 39 5 75 73 38 15 34 459 12 13 1 13 2 19 2 460 12 19 2 121 29) #1# #2# 17128) "A goal is achieved if it already holds,
   or if there is an appropriate op for it 
   that is applicable. Version 3: juggles
   the order of goals ops so that the
   applicable ones with the fewest number 
   of as yet unmet prerequisites are first.
   Yields more efficient solutions." (defun general-problem-solver::appropriate-ops) (#2# . 18455) (general-problem-solver::goal general-problem-solver::state) copy-list :key general-problem-solver::precond #Y(nil nil nil (24 45 468 26 13 0 13 2 19 2 246 76 73 29) #1# #2# 18455) count-if #Y(nil nil nil (24 45 37 26 34 469 12 13 0 19 1 87 12 19 2 470 29) #1# #2# 18455) sort #Y(general-problem-solver::appropriate-ops nil nil (24 45 99 24 45 260 26 13 1 14 33 14 20 33 120 12 19 4 2 16 466 12 33 205 12 14 467 34 471 12 19 4 472 29) #1# #2# 18455) "Return a list of appropriate operators,
  sorted by the number of unfilled 
  preconditions." general-problem-solver::dbg (defun general-problem-solver::dbg) (#2# . 18910) (general-problem-solver::id general-problem-solver::format-control &rest general-problem-solver::format-args) general-problem-solver::format-control general-problem-solver::format-args "~@[~&~?~]" #Y(general-problem-solver::dbg nil nil (24 45 174 24 45 479 27 45 480 14 436 15 481 13 2 14 166 19 2 100 73 39 4 10 1 73 12 13 0 19 4 179 29) #1# #2# 18910) (defun general-problem-solver::dbg-indent) (#2# . 22572) (general-problem-solver::id general-problem-solver::indent general-problem-solver::format-control &rest general-problem-solver::format-args) "~&~V@T~?" #Y(general-problem-solver::dbg-indent nil nil (24 45 174 24 45 199 24 45 479 27 45 480 13 3 14 166 19 2 100 73 39 14 14 436 15 486 13 2 13 1 13 0 19 5 179 29) #1# #2# 22572) general-problem-solver::heap-perms (defun general-problem-solver::heap-perms) (#2# . 22786) (&rest general-problem-solver::items) general-problem-solver::items general-problem-solver::item-count vector coerce general-problem-solver::perm :element-type fixnum :initial-element make-array general-problem-solver::stack-state general-problem-solver::perms aref copy-seq general-problem-solver::next evenp #:g226 #:g223 #:g224 #:g227 #:g225 si::aset #:g231 #:g232 #:g228 #:g229 #:g233 #:g230 #:g236 #:g237 #:g239 + #:g238 = nreverse #Y(general-problem-solver::heap-perms nil nil (27 45 492 10 0 16 263 45 493 13 1 1 494 17 495 45 496 13 1 14 497 15 498 14 499 9 0 19 5 500 45 501 10 1 6 1 45 502 8 1 45 201 38 219 13 2 13 0 19 2 503 12 13 0 19 2 205 39 189 10 3 16 504 45 505 10 1 16 506 39 57 10 0 45 507 10 1 45 508 10 3 45 509 13 1 13 0 19 2 503 45 510 13 3 9 0 19 2 503 45 511 13 4 9 0 13 1 19 3 512 13 3 13 2 13 0 19 3 512 43 1 43 1 43 3 38 64 10 0 45 513 13 4 13 2 19 2 503 45 514 10 2 45 515 10 4 45 516 13 1 13 0 19 2 503 45 517 13 4 13 3 19 2 503 45 518 13 5 13 4 13 1 19 3 512 13 3 13 2 13 0 19 3 512 43 1 43 1 43 4 13 0 10 2 3 51 2 10 0 51 4 10 3 45 519 10 2 45 520 8 1 45 521 13 2 13 1 19 2 503 12 13 0 19 2 522 45 523 13 3 13 2 13 0 19 3 512 43 4 8 1 51 1 43 1 38 16 13 2 13 0 9 0 19 3 512 10 0 16 204 51 0 13 0 13 4 19 2 524 39 -226 10 1 16 525 43 1 43 4 29) #1# #2# 22786) "Non-recursive variant of heap's 
  algorithm. Accepts an arbitrary
  number of items. Puts them in an 
  array for efficiency. Returns a list
  of all the permutations of the items,
  each permutation in an array." general-problem-solver::*cake-ops* general-problem-solver::eat-ice-cream (general-problem-solver::hungry-for-dessert general-problem-solver::have-ice-cream) (general-problem-solver::not-hungry-for-dessert) (general-problem-solver::hungry-for-dessert general-problem-solver::have-ice-cream) general-problem-solver::eat-cake (general-problem-solver::hungry-for-dessert general-problem-solver::have-cake) (general-problem-solver::not-hungry-for-dessert general-problem-solver::have-ice-cream) (general-problem-solver::hungry-for-dessert general-problem-solver::have-cake) (defparameter general-problem-solver::*cake-ops*) (#2# . 23959))) #2# 0) #Y(si::bytecodes nil nil (15 2 15 3 15 4 15 5 19 4 6 15 2 14 7 77 15 8 19 4 6 15 2 1 21 12 19 2 22 15 2 15 23 15 24 19 3 25 1 2 73 29) #1# #2# 120) #Y(si::bytecodes nil nil (1 26 16 27 1 26 16 28 76 39 4 75 52 26 15 26 15 29 15 30 19 3 25 15 26 15 3 15 31 15 32 19 4 6 1 26 73 29) #1# #2# 585) #Y(si::bytecodes nil nil (1 33 16 27 1 33 16 28 76 39 4 75 52 33 15 33 15 29 15 34 19 3 25 15 33 15 3 15 35 15 36 19 4 6 1 33 73 29) #1# #2# 651) #Y(si::bytecodes nil nil (15 37 15 38 77 77 15 39 15 40 15 41 77 77 77 15 42 9 4 77 15 43 15 44 19 15 45 15 37 15 3 15 46 15 47 19 4 6 15 48 15 3 15 49 15 50 19 4 6 15 48 14 7 77 15 51 19 4 6 15 37 19 1 60 78 57 15 48 1 59 12 19 2 22 1 61 16 62 45 63 10 0 39 10 10 0 16 64 39 4 11 65 76 39 16 15 66 15 67 15 68 15 69 14 70 13 0 19 6 71 43 1 15 61 15 72 1 81 12 19 3 82 1 83 16 62 45 63 10 0 39 10 10 0 16 64 39 4 11 65 76 39 16 15 66 15 67 15 68 15 84 14 70 13 0 19 6 71 43 1 15 83 15 72 1 86 12 19 3 82 1 87 16 62 45 63 10 0 39 10 10 0 16 64 39 4 11 65 76 39 16 15 66 15 67 15 68 15 88 14 70 13 0 19 6 71 43 1 15 87 15 72 1 90 12 19 3 82 1 91 16 62 45 63 10 0 39 10 10 0 16 64 39 4 11 65 76 39 16 15 66 15 67 15 68 15 92 14 70 13 0 19 6 71 43 1 15 91 15 72 1 94 12 19 3 82 1 37 73 29) #1# #2# 706) #Y(si::bytecodes nil nil (15 95 15 3 15 96 15 97 19 4 6 15 95 14 7 77 15 98 19 4 6 15 95 1 101 12 19 2 22 15 95 15 23 15 102 19 3 25 1 95 73 29) #1# #2# 806) #Y(si::bytecodes nil nil (15 103 15 3 15 104 15 105 19 4 6 15 103 14 7 77 15 106 19 4 6 15 103 1 113 12 19 2 22 15 103 15 23 15 114 19 3 25 1 103 73 29) #1# #2# 951) #Y(si::bytecodes nil nil (15 115 15 3 15 116 15 117 19 4 6 15 115 14 7 77 15 118 19 4 6 15 115 1 122 12 19 2 22 15 115 15 23 15 123 19 3 25 1 115 73 29) #1# #2# 1302) #Y(si::bytecodes nil nil (15 124 15 3 15 125 15 126 19 4 6 15 124 14 7 77 15 127 19 4 6 15 124 1 130 12 19 2 22 15 124 15 23 15 131 19 3 25 1 124 73 29) #1# #2# 1569) #Y(si::bytecodes nil nil (1 132 16 27 14 133 15 134 14 135 15 136 14 137 15 138 14 139 15 140 19 8 48 12 14 133 15 141 14 135 15 142 14 137 15 143 19 6 48 12 14 133 15 144 14 135 15 145 14 137 15 146 19 6 48 12 14 133 15 147 14 135 15 148 14 137 15 149 19 6 48 12 14 133 15 150 14 135 15 151 14 137 15 152 19 6 48 12 14 133 15 153 14 135 15 154 14 137 15 155 14 139 15 156 19 8 48 6 6 52 132 15 132 15 3 15 157 15 158 19 4 6 1 132 73 29) #1# #2# 1718) #Y(si::bytecodes nil nil (15 159 15 3 15 160 15 161 19 4 6 15 159 14 7 77 15 162 19 4 6 15 159 1 164 12 19 2 22 15 159 15 23 15 165 19 3 25 1 159 73 29) #1# #2# 2734) #Y(si::bytecodes nil nil (1 166 16 27 1 166 16 28 76 39 4 75 52 166 15 166 15 29 15 167 19 3 25 15 166 15 3 15 168 15 169 19 4 6 1 166 73 29) #1# #2# 4019) #Y(si::bytecodes nil nil (15 170 15 3 15 171 15 172 19 4 6 15 170 14 7 77 15 173 19 4 6 15 170 1 180 12 19 2 22 15 170 15 23 15 181 19 3 25 1 170 73 29) #1# #2# 4861) #Y(si::bytecodes nil nil (15 182 15 3 15 183 15 184 19 4 6 15 182 14 7 77 15 185 19 4 6 15 182 1 187 12 19 2 22 15 182 15 23 15 188 19 3 25 1 182 73 29) #1# #2# 5103) #Y(si::bytecodes nil nil (15 189 15 3 15 190 15 191 19 4 6 15 189 14 7 77 15 192 19 4 6 15 189 1 193 12 19 2 22 15 189 15 23 15 194 19 3 25 1 189 73 29) #1# #2# 5219) #Y(si::bytecodes nil nil (15 195 15 3 15 196 15 197 19 4 6 15 195 14 7 77 15 198 19 4 6 15 195 1 206 12 19 2 22 15 195 15 23 15 207 19 3 25 1 195 73 29) #1# #2# 5433) #Y(si::bytecodes nil nil (15 208 33 209 12 19 2 22 29) #1# #2# 5749) #Y(si::bytecodes nil nil (15 210 15 3 15 211 15 212 19 4 6 15 210 14 7 77 15 213 19 4 6 15 210 1 217 12 19 2 22 15 210 15 23 15 218 19 3 25 1 210 73 29) #1# #2# 5810) #Y(si::bytecodes nil nil (15 219 15 3 15 220 15 221 19 4 6 15 219 14 7 77 15 222 19 4 6 15 219 1 223 12 19 2 22 15 219 15 23 15 224 19 3 25 1 219 73 29) #1# #2# 6161) #Y(si::bytecodes nil nil (15 225 15 3 15 226 15 227 19 4 6 15 225 14 7 77 15 228 19 4 6 15 225 1 233 12 19 2 22 15 225 15 23 15 234 19 3 25 1 225 73 29) #1# #2# 6260) #Y(si::bytecodes nil nil (15 37 15 3 15 235 15 236 19 4 6 15 37 14 7 77 15 237 19 4 6 15 37 1 243 12 19 2 22 15 37 15 23 15 244 19 3 25 1 37 73 29) #1# #2# 6479) #Y(si::bytecodes nil nil (33 225 12 14 132 19 2 245 29) #1# #2# 6727) #Y(si::bytecodes nil nil (15 246 15 3 15 247 15 248 19 4 6 15 246 14 7 77 15 249 19 4 6 15 246 1 251 12 19 2 22 1 246 73 29) #1# #2# 6885) #Y(si::bytecodes nil nil (15 120 15 3 15 252 15 253 19 4 6 15 120 14 7 77 15 254 19 4 6 15 120 1 255 12 19 2 22 15 120 15 23 15 256 19 3 25 1 120 73 29) #1# #2# 7058) #Y(si::bytecodes nil nil (15 119 15 3 15 257 15 258 19 4 6 15 119 14 7 77 15 259 19 4 6 15 119 34 272 12 19 2 22 15 119 15 23 15 273 19 3 25 1 119 73 29) #1# #2# 7217) #Y(si::bytecodes nil nil (15 274 15 3 15 275 15 276 19 4 6 15 274 14 7 77 15 277 19 4 6 15 274 34 280 12 19 2 22 15 274 15 23 15 281 19 3 25 1 274 73 29) #1# #2# 7839) #Y(si::bytecodes nil nil (15 282 15 3 15 283 15 284 19 4 6 15 282 14 7 77 15 285 19 4 6 15 282 34 289 12 19 2 22 15 282 15 23 15 290 19 3 25 1 282 73 29) #1# #2# 8377) #Y(si::bytecodes nil nil (15 291 15 3 15 292 15 293 19 4 6 15 291 14 7 77 15 294 19 4 6 15 291 1 297 12 19 2 22 15 291 15 23 15 298 19 3 25 1 291 73 29) #1# #2# 8858) #Y(si::bytecodes nil nil (15 299 15 3 15 300 15 301 19 4 6 15 299 14 7 77 15 302 19 4 6 15 299 1 304 12 19 2 22 15 299 15 23 15 305 19 3 25 1 299 73 29) #1# #2# 9095) #Y(si::bytecodes nil nil (15 306 14 135 15 307 14 137 15 308 19 5 37 12 11 132 3 52 132 73 29) #1# #2# 9255) #Y(si::bytecodes nil nil (1 309 16 27 15 310 14 135 15 311 14 137 15 312 14 139 15 313 19 7 37 12 15 314 14 135 15 315 14 137 15 316 14 139 15 317 19 7 37 12 15 318 14 135 15 319 14 137 15 320 14 139 15 321 19 7 37 12 15 322 14 135 15 323 14 137 15 324 14 139 15 325 19 7 37 12 15 326 14 135 15 327 14 137 15 328 14 139 15 329 19 7 37 12 15 330 14 135 15 331 14 137 15 332 14 139 15 333 19 7 37 6 6 52 309 15 309 15 3 15 334 15 335 19 4 6 1 309 73 29) #1# #2# 9396) #Y(si::bytecodes nil nil (15 336 15 3 15 337 15 338 19 4 6 15 336 14 7 77 15 339 19 4 6 15 336 1 346 12 19 2 22 15 336 15 23 15 347 19 3 25 1 336 73 29) #1# #2# 12195) #Y(si::bytecodes nil nil (15 348 15 3 15 349 15 350 19 4 6 15 348 14 7 77 15 351 19 4 6 15 348 1 354 12 19 2 22 15 348 15 23 15 355 19 3 25 1 348 73 29) #1# #2# 12821) #Y(si::bytecodes nil nil (1 356 16 27 33 348 12 15 357 19 2 358 52 356 15 356 15 3 15 359 15 360 19 4 6 1 356 73 29) #1# #2# 12990) #Y(si::bytecodes nil nil (15 361 15 3 15 362 15 363 19 4 6 15 361 14 7 77 15 364 19 4 6 15 361 1 367 12 19 2 22 15 361 15 23 15 368 19 3 25 1 361 73 29) #1# #2# 13258) #Y(si::bytecodes nil nil (15 365 15 3 15 369 15 370 19 4 6 15 365 14 7 77 15 371 19 4 6 15 365 1 373 12 19 2 22 15 365 15 23 15 374 19 3 25 1 365 73 29) #1# #2# 13915) #Y(si::bytecodes nil nil (15 375 15 3 15 376 15 377 19 4 6 15 375 14 7 77 15 378 19 4 6 15 375 1 385 12 19 2 22 15 375 15 23 15 386 19 3 25 1 375 73 29) #1# #2# 14040) #Y(si::bytecodes nil nil (15 382 15 3 15 387 15 388 19 4 6 15 382 14 7 77 15 389 19 4 6 15 382 1 391 12 19 2 22 15 382 15 23 15 392 19 3 25 1 382 73 29) #1# #2# 14484) #Y(si::bytecodes nil nil (15 393 15 3 15 394 15 395 19 4 6 15 393 14 7 77 15 396 19 4 6 15 393 1 405 12 19 2 22 1 393 73 29) #1# #2# 14592) #Y(si::bytecodes nil nil (15 403 15 3 15 406 15 407 19 4 6 15 403 14 7 77 15 408 19 4 6 15 403 1 412 12 19 2 22 15 403 15 23 15 413 19 3 25 1 403 73 29) #1# #2# 15094) #Y(si::bytecodes nil nil (15 411 15 3 15 414 15 415 19 4 6 15 411 14 7 77 15 416 19 4 6 15 411 1 418 12 19 2 22 1 411 73 29) #1# #2# 15355) #Y(si::bytecodes nil nil (15 419 15 3 15 420 15 421 19 4 6 15 419 14 7 77 15 422 19 4 6 15 419 1 435 12 14 436 9 3 19 4 22 1 419 73 29) #1# #2# 15456) #Y(si::bytecodes nil nil (15 266 15 3 15 437 15 438 19 4 6 15 266 14 7 77 15 439 19 4 6 15 266 34 443 12 19 2 22 1 266 73 29) #1# #2# 15659) #Y(si::bytecodes nil nil (15 440 15 3 15 444 15 445 19 4 6 15 440 14 7 77 15 446 19 4 6 15 440 34 448 12 19 2 22 1 440 73 29) #1# #2# 16604) #Y(si::bytecodes nil nil (15 442 15 3 15 449 15 450 19 4 6 15 442 14 7 77 15 451 19 4 6 15 442 1 454 12 19 2 22 1 442 73 29) #1# #2# 17029) #Y(si::bytecodes nil nil (15 107 15 3 15 455 15 456 19 4 6 15 107 14 7 77 15 457 19 4 6 15 107 34 461 12 19 2 22 15 107 15 23 15 462 19 3 25 1 107 73 29) #1# #2# 17128) #Y(si::bytecodes nil nil (15 460 15 3 15 463 15 464 19 4 6 15 460 14 7 77 15 465 19 4 6 15 460 34 473 12 19 2 22 15 460 15 23 15 474 19 3 25 1 460 73 29) #1# #2# 18455) #Y(si::bytecodes nil nil (15 475 15 3 15 476 15 477 19 4 6 15 475 14 7 77 15 478 19 4 6 15 475 1 482 12 19 2 22 1 475 73 29) #1# #2# 18910) #Y(si::bytecodes nil nil (15 265 15 3 15 483 15 484 19 4 6 15 265 14 7 77 15 485 19 4 6 15 265 1 487 12 19 2 22 1 265 73 29) #1# #2# 22572) #Y(si::bytecodes nil nil (15 488 15 3 15 489 15 490 19 4 6 15 488 14 7 77 15 491 19 4 6 15 488 1 526 12 19 2 22 15 488 15 23 15 527 19 3 25 1 488 73 29) #1# #2# 22786) #Y(si::bytecodes nil nil (1 528 16 27 15 529 14 135 15 530 14 137 15 531 14 139 15 532 19 7 37 12 15 533 14 135 15 534 14 137 15 535 14 139 15 536 19 7 37 6 2 52 528 15 528 15 3 15 537 15 538 19 4 6 1 528 73 29) #1# #2# 23959))
