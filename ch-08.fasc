(#Y(si::bytecodes nil nil (1 0 16 1 29) #1=#A(t (430) ("SYMBOLIC" si::select-package symbolic::d si::*make-special ext::location (defparameter symbolic::d) (#2=#P"/data/data/org.eql5.android.repl/files/quicklisp/local-projects/paip/ch-08.lisp" . 161) ext::annotate symbolic::int (defparameter symbolic::int) (#2# . 1083) symbolic::exp-lhs (defparameter symbolic::exp-lhs) (#2# . 1108) symbolic::exp-rhs :exp-rhs (defparameter symbolic::exp-rhs) (#2# . 1141) symbolic::exp-op (defparameter symbolic::exp-op) (#2# . 1174) symbolic::x (defparameter symbolic::x) (#2# . 1205) symbolic::y (defparameter symbolic::y) (#2# . 1226) symbolic::undefined (defparameter symbolic::undefined) (#2# . 1247) symbolic::e (defparameter symbolic::e) (#2# . 1284) symbolic::infix->prefix% (defun symbolic::infix->prefix%) (#2# . 1305) :lambda-list (symbolic::infix-exp) symbolic::infix-exp symbolic::prefix->infix #Y(symbolic::infix->prefix% nil nil (24 45 38 26 13 0 19 1 39 29) #1# #2# 1305) si::fset function "Convert fully-parenthesized infix-exp
  to a prefix expression" si::set-documentation symbolic::infix->prefix (defun symbolic::infix->prefix) (#2# . 1507) (exp) exp atom length = symbolic::*infix->prefix-rules* :rule-if symbolic::rule-pattern :rule-then symbolic::rule-response :action symbolic::bindings symbolic::response symbolic::pair #Y(nil nil nil (24 45 61 26 10 0 4 12 10 0 5 12 19 1 45 3 73 29) #1# #2# 1507) mapcar sublis #Y(nil nil nil (24 45 59 24 45 60 26 1 62 12 13 1 19 2 63 12 13 0 19 2 64 29) #1# #2# 1507) :var? symbolic::variablep tools::rule-based-translator symbolp "Illegal expression ~%~A~%
           INFIX->PREFIX" error #Y(symbolic::infix->prefix nil nil (24 45 49 26 10 0 16 50 39 6 10 0 73 38 82 10 0 16 51 12 9 1 19 2 52 39 10 10 0 4 12 19 1 45 38 61 13 0 14 53 14 54 33 55 12 14 56 33 57 12 14 58 1 65 12 14 66 33 67 12 19 10 68 73 40 31 10 0 4 16 69 39 17 10 0 4 12 10 0 5 12 19 1 45 6 2 73 38 8 15 70 13 0 19 2 71 29) #1# #2# 1507) "Translate an infix expression into
  prefix notation." (defun symbolic::variablep) (#2# . 2365) (exp) (symbolic::x symbolic::y symbolic::z symbolic::m symbolic::n symbolic::o symbolic::p symbolic::q symbolic::r symbolic::s t symbolic::u symbolic::v symbolic::w) member #Y(symbolic::variablep nil nil (24 45 49 26 13 0 15 77 19 2 78 29) #1# #2# 2365) "Variables are the symbols M through Z." symbolic::x+ (tools::?+ symbolic::x) tools::pat-match-abbrev symbolic::y+ (tools::?+ symbolic::y) (defun symbolic::rule-pattern) (#2# . 2588) (symbolic::rule) symbolic::rule #Y(symbolic::rule-pattern nil nil (24 45 89 26 10 0 4 73 29) #1# #2# 2588) (defun symbolic::rule-response) (#2# . 2632) (symbolic::rule) second #Y(symbolic::rule-response nil nil (24 45 89 26 10 0 16 94 29) #1# #2# 2632) symbolic::*infix->prefix-rules*% tools::expand-pat-match-abbrev (((symbolic::x+ = symbolic::y+) (= symbolic::x symbolic::y)) ((- symbolic::x+) (- symbolic::x)) ((+ symbolic::x+) (+ symbolic::x)) ((symbolic::x+ + symbolic::y+) (+ symbolic::x symbolic::y)) ((symbolic::x+ - symbolic::y+) (- symbolic::x symbolic::y)) ((symbolic::x+ * symbolic::y+) (* symbolic::x symbolic::y)) ((symbolic::x+ / symbolic::y+) (/ symbolic::x symbolic::y)) ((symbolic::x+ symbolic::^ symbolic::y+) (symbolic::^ symbolic::x symbolic::y)) ((log symbolic::x+) (log symbolic::x)) ((sin symbolic::x+) (sin symbolic::x)) ((cos symbolic::x+) (cos symbolic::x))) variable "A list of rules, ordered by precedence." (defparameter symbolic::*infix->prefix-rules*%) (#2# . 2678) (((symbolic::x+ = symbolic::y+) (= symbolic::x symbolic::y)) ((- symbolic::x+) (- symbolic::x)) ((+ symbolic::x+) (+ symbolic::x)) ((symbolic::x+ + symbolic::y+) (+ symbolic::x symbolic::y)) ((symbolic::x+ - symbolic::y+) (- symbolic::x symbolic::y)) ((symbolic::d symbolic::y+ / symbolic::d symbolic::x) (symbolic::d symbolic::y symbolic::x)) ((symbolic::int symbolic::y+ symbolic::d symbolic::x) (symbolic::int symbolic::y symbolic::x)) ((symbolic::x+ * symbolic::y+) (* symbolic::x symbolic::y)) ((symbolic::x+ / symbolic::y+) (/ symbolic::x symbolic::y)) ((symbolic::x+ symbolic::^ symbolic::y+) (symbolic::^ symbolic::x symbolic::y)) ((log symbolic::x+) (log symbolic::x)) ((sin symbolic::x+) (sin symbolic::x)) ((cos symbolic::x+) (cos symbolic::x))) (defparameter symbolic::*infix->prefix-rules*) (#2# . 3072) "RULE-" list ((symbolic::pattern nil) (symbolic::response nil)) ((symbolic::pattern nil t nil 0 nil) (symbolic::response nil t nil 1 nil)) symbolic::copy-rule (symbolic::make-rule) si::define-structure #3=(symbolic::rule (:type list)) (defstruct #3#) (#2# . 3477) symbolic::make-rule (defun symbolic::make-rule) (#2# . 3477) (&key #4=#:pattern #5=#:response) (nil :response :pattern) #4# #5# #Y(symbolic::make-rule nil nil (28 120 22 40 2 77 46 121 22 40 2 77 46 122 13 1 10 0 6 2 73 29) #1# #2# 3477) "EXP-" ((symbolic::op nil) (symbolic::lhs nil) (symbolic::rhs nil)) ((symbolic::op nil t nil 0 nil) (symbolic::lhs nil t nil 1 nil) (symbolic::rhs nil t nil 2 nil)) symbolic::copy-exp (#6=(symbolic::mkexp (&optional symbolic::lhs symbolic::op symbolic::rhs))) #7=(exp (:type list) (:constructor . #6#)) (defstruct #7#) (#2# . 3543) symbolic::mkexp (defun symbolic::mkexp) (#2# . 3543) (&optional (symbolic::lhs nil) (symbolic::op nil) (symbolic::rhs nil)) symbolic::lhs symbolic::op symbolic::rhs #Y(symbolic::mkexp nil nil (25 40 2 77 46 136 25 40 2 77 46 137 25 40 2 77 46 138 26 13 1 13 2 10 0 6 3 73 29) #1# #2# 3543) symbolic::expp (defun symbolic::expp) (#2# . 3758) (symbolic::x) consp #Y(symbolic::expp nil nil (24 48 21 26 11 21 16 144 44 1 29) #1# #2# 3758) symbolic::exp-args (defun symbolic::exp-args) (#2# . 3788) (symbolic::x) #Y(symbolic::exp-args nil nil (24 48 21 26 11 21 5 73 44 1 29) #1# #2# 3788) (defun symbolic::prefix->infix) (#2# . 3821) (exp) symbolic::binary-exp-p #Y(symbolic::prefix->infix nil nil (24 45 49 26 10 0 16 50 39 6 10 0 73 38 40 33 39 12 13 0 19 1 154 39 23 13 0 19 1 11 12 13 0 19 1 18 12 13 0 19 1 14 6 3 73 38 4 10 0 73 12 19 2 63 29) #1# #2# 3821) "Translate prefix to infix expressions." (defun symbolic::binary-exp-p) (#2# . 4099) (symbolic::x) #Y(symbolic::binary-exp-p nil nil (24 48 21 26 14 21 19 1 140 73 39 14 14 21 19 1 146 16 51 12 9 2 19 2 52 44 1 29) #1# #2# 4099) symbolic::*simplification-rules* ((symbolic::x + 0 = symbolic::x) (0 + symbolic::x = symbolic::x) (symbolic::x + symbolic::x = 2 * symbolic::x) (symbolic::x - 0 = symbolic::x) (0 - symbolic::x = - symbolic::x) (symbolic::x - symbolic::x = 0) (- - symbolic::x = symbolic::x) (symbolic::x * 1 = symbolic::x) (1 * symbolic::x = symbolic::x) (symbolic::x * 0 = 0) (0 * symbolic::x = 0) (symbolic::x * symbolic::x = symbolic::x symbolic::^ 2) (symbolic::x / 0 = symbolic::undefined) (0 / symbolic::x = 0) (symbolic::x / 1 = symbolic::x) (symbolic::x / symbolic::x = 1) (0 symbolic::^ 0 = symbolic::undefined) (symbolic::x symbolic::^ 0 = 1) (0 symbolic::^ symbolic::x = 0) (1 symbolic::^ symbolic::x = 1) (symbolic::x symbolic::^ 1 = symbolic::x) (symbolic::x symbolic::^ -1 = 1 / symbolic::x) (symbolic::x * (symbolic::y / symbolic::x) = symbolic::y) ((symbolic::y / symbolic::x) * symbolic::x = symbolic::y) ((symbolic::x * symbolic::y) / symbolic::x = symbolic::y) ((symbolic::y * symbolic::x) / symbolic::x = symbolic::y) (symbolic::x + - symbolic::x = 0) ((- symbolic::x) + symbolic::x = 0) (symbolic::x + symbolic::y - symbolic::x = symbolic::y)) (defparameter symbolic::*simplification-rules*) (#2# . 4177) symbolic::simplifier (defun symbolic::simplifier) (#2# . 4831) 0 symbolic::simplifier> *query-io* print read symbolic::submission symbolic::q eq symbolic::done symbolic::simp :stream :right-margin write #Y(symbolic::simplifier nil nil (26 58 60 56 57 168 61 1 1 15 169 14 170 19 2 171 19 0 172 45 173 13 0 1 174 17 175 39 6 1 176 73 36 2 13 0 19 1 177 12 14 178 14 170 14 179 9 60 19 5 180 43 1 35 0 0 62 73 63 29) #1# #2# 4831) "Read a mathematical expression, 
  simplify it and return the result." (defun symbolic::simp) (#2# . 5154) (symbolic::inf) symbolic::inf symbolic::simplify #Y(symbolic::simp nil nil (24 45 186 26 13 0 19 1 45 12 19 1 187 12 19 1 39 29) #1# #2# 5154) (defun symbolic::simplify) (#2# . 5226) (exp) symbolic::simplify-exp #Y(symbolic::simplify nil nil (24 45 49 26 10 0 16 50 39 6 10 0 73 38 13 33 187 12 13 0 19 2 63 12 19 1 192 29) #1# #2# 5226) "Simplify an expression by first 
  simplifying its components." symbolic::simplify-exp% (defun symbolic::simplify-exp%) (#2# . 5398) (exp) #Y(nil nil nil (24 45 59 24 45 60 26 13 1 13 0 19 2 64 12 19 1 187 29) #1# #2# 5398) symbolic::evaluable eval #Y(symbolic::simplify-exp% nil nil (24 45 49 26 13 0 14 161 14 54 33 11 12 14 56 33 14 12 14 58 1 199 12 14 66 33 67 12 19 10 68 73 40 17 13 0 19 1 200 39 7 10 0 16 201 38 4 10 0 73 29) #1# #2# 5398) "Simplify using a rule, or by doing
  arithmetic." (defun symbolic::evaluable) (#2# . 5813) (exp) numberp every (+ - * /) symbolic::^ integerp #Y(symbolic::evaluable nil nil (24 45 49 26 33 207 12 13 0 19 1 146 12 19 2 208 73 39 37 13 0 19 1 18 12 15 209 19 2 78 73 40 23 13 0 19 1 18 12 1 210 17 175 73 39 10 13 0 19 1 146 16 94 16 211 29) #1# #2# 5813) "Is this an arithmetic expression that
  can be evaluated?" (defun symbolic::^) (#2# . 6065) (symbolic::x symbolic::y) expt #Y(symbolic::^ nil nil (24 48 21 24 48 24 26 14 21 11 24 17 217 44 2 29) #1# #2# 6065) symbolic::clear-plists (defun symbolic::clear-plists) (#2# . 6095) (&rest symbolic::syms) symbolic::syms si::%dolist-var symbolic::s si::set-symbol-plist symbolic::ok #Y(symbolic::clear-plists nil nil (27 45 223 10 0 45 224 38 18 10 0 4 45 225 13 0 75 17 226 10 1 5 51 1 43 1 10 0 40 -20 43 1 1 227 73 29) #1# #2# 6095) "Sets the plist of symbols to
  nil. Takes an arbitrary number of
  symbols." symbolic::clear-props (defun symbolic::clear-props) (#2# . 8018) (&rest symbolic::symbs) symbolic::symbs symbolic::symb #Y(symbolic::clear-props nil nil (27 45 234 10 0 45 224 38 18 10 0 4 45 235 13 0 75 17 226 10 1 5 51 1 43 1 10 0 40 -20 75 45 235 1 227 73 43 1 43 1 29) #1# #2# 8018) symbolic::?n symbolic::?m symbolic::?s (tools::?is symbolic::n numberp) (tools::?is symbolic::m numberp) (tools::?is symbolic::s symbolic::not-number-p) symbolic::not-number-p (defun symbolic::not-number-p) (#2# . 8403) (symbolic::x) #Y(symbolic::not-number-p nil nil (24 48 21 26 11 21 16 207 76 73 44 1 29) #1# #2# 8403) symbolic::simp-rule (defun symbolic::simp-rule) (#2# . 8449) (symbolic::rule) #Y(symbolic::simp-rule nil nil (24 45 89 26 13 0 19 1 45 45 49 13 0 19 1 11 12 19 1 97 12 13 0 19 1 18 12 13 0 19 1 14 12 19 3 132 43 1 29) #1# #2# 8449) "Transform a rule into proper format." ((symbolic::?s * symbolic::?n = symbolic::n * symbolic::s) (symbolic::?n * (symbolic::?m * symbolic::x) = (symbolic::n * symbolic::m) * symbolic::x) (symbolic::x * (symbolic::?n * symbolic::y) = symbolic::n * (symbolic::x * symbolic::y)) ((symbolic::?n * symbolic::x) * symbolic::y = symbolic::n * (symbolic::x * symbolic::y)) (symbolic::?n + symbolic::?s = symbolic::s + symbolic::n) ((symbolic::x + symbolic::?m) + symbolic::?n = symbolic::x + (symbolic::n + symbolic::m)) (symbolic::x + (symbolic::y + symbolic::?n) = (symbolic::x + symbolic::y) + symbolic::n) ((symbolic::x + symbolic::?n) + symbolic::y = (symbolic::x + symbolic::y) + symbolic::n)) append ((log 1 = 0) (log 0 = symbolic::undefined) (log symbolic::e = 1) (sin 0 = 0) (sin pi = 0) (cos 0 = 1) (cos pi = -1) (sin (pi / 2) = 1) (cos (pi / 2) = 0) (log (symbolic::e symbolic::^ symbolic::x) = symbolic::x) (symbolic::e symbolic::^ (log symbolic::x) = symbolic::x) ((symbolic::x symbolic::^ symbolic::y) * (symbolic::x symbolic::^ symbolic::z) = symbolic::x symbolic::^ (symbolic::y + symbolic::z)) ((symbolic::x symbolic::^ symbolic::y) / (symbolic::x symbolic::^ symbolic::z) = symbolic::x symbolic::^ (symbolic::y - symbolic::z)) (log symbolic::x + log symbolic::y = log (symbolic::x * symbolic::y)) (log symbolic::x - log symbolic::y = log (symbolic::x / symbolic::y)) ((sin symbolic::x) symbolic::^ 2 + (cos symbolic::x) symbolic::^ 2 = 1)) ((symbolic::d symbolic::x / symbolic::d symbolic::x = 1) (symbolic::d (symbolic::u + symbolic::v) / symbolic::d symbolic::x = (symbolic::d symbolic::u / symbolic::d symbolic::x) + (symbolic::d symbolic::v / symbolic::d symbolic::x)) (symbolic::d (symbolic::u - symbolic::v) / symbolic::d symbolic::x = (symbolic::d symbolic::u / symbolic::d symbolic::x) - (symbolic::d symbolic::v / symbolic::d symbolic::x)) (symbolic::d (- symbolic::u) / symbolic::d symbolic::x = - (symbolic::d symbolic::u / symbolic::d symbolic::x)) (symbolic::d (symbolic::u * symbolic::v) / symbolic::d symbolic::x = symbolic::u * (symbolic::d symbolic::v / symbolic::d symbolic::x) + symbolic::v * (symbolic::d symbolic::u / symbolic::d symbolic::x)) (symbolic::d (symbolic::u / symbolic::v) / symbolic::d symbolic::x = symbolic::v * (symbolic::d symbolic::u / symbolic::d symbolic::x) - symbolic::u * (symbolic::d symbolic::v / symbolic::d symbolic::x) / symbolic::v symbolic::^ 2) (symbolic::d (symbolic::u symbolic::^ symbolic::?n) / symbolic::d symbolic::x = symbolic::n * symbolic::u symbolic::^ (symbolic::n - 1) * (symbolic::d symbolic::u / symbolic::d symbolic::x)) (symbolic::d (symbolic::u symbolic::^ symbolic::v) / symbolic::d symbolic::x = symbolic::v * symbolic::u symbolic::^ (symbolic::v - 1) * (symbolic::d symbolic::u / symbolic::d symbolic::x) + symbolic::u symbolic::^ symbolic::v * (log symbolic::u) * (symbolic::d symbolic::v / symbolic::d symbolic::x)) (symbolic::d (log symbolic::u) / symbolic::d symbolic::x = (symbolic::d symbolic::u / symbolic::d symbolic::x) / symbolic::u) (symbolic::d (sin symbolic::u) / symbolic::d symbolic::x = (cos symbolic::u) * (symbolic::d symbolic::u / symbolic::d symbolic::x)) (symbolic::d (cos symbolic::u) / symbolic::d symbolic::x = - (sin symbolic::u) * (symbolic::d symbolic::u / symbolic::d symbolic::x)) (symbolic::d (symbolic::e symbolic::^ symbolic::u) / symbolic::d symbolic::x = (symbolic::e symbolic::^ symbolic::u) * (symbolic::d symbolic::u / symbolic::d symbolic::x)) (symbolic::d symbolic::u / symbolic::d symbolic::x = 0)) symbolic::simp-fn (defun symbolic::simp-fn) (#2# . 14771) (symbolic::op) :simp-fn get #Y(symbolic::simp-fn nil nil (24 45 137 26 13 0 14 262 19 2 263 29) #1# #2# 14771) symbolic::set-simp-fn (defun symbolic::set-simp-fn) (#2# . 15627) (symbolic::op symbolic::fn) symbolic::fn #:g463 #:g464 si::putprop #Y(symbolic::set-simp-fn nil nil (24 45 137 24 45 269 26 10 1 45 270 10 1 45 271 13 1 13 0 14 262 19 3 272 43 1 43 1 29) #1# #2# 15627) (defun symbolic::simplify-exp) (#2# . 15686) (exp) symbolic::simplify-by-fn #Y(nil nil nil (24 45 59 24 45 60 26 13 1 13 0 19 2 64 12 19 1 187 29) #1# #2# 15686) #Y(symbolic::simplify-exp nil nil (24 45 49 26 13 0 19 1 277 73 40 47 13 0 14 161 14 54 33 11 12 14 56 33 14 12 14 58 1 278 12 14 66 33 67 12 19 10 68 73 40 17 13 0 19 1 200 39 7 10 0 16 201 38 4 10 0 73 29) #1# #2# 15686) "Simplify using a rule or by doing 
  arithmetic, or by using the simp
  function supplied for this operator." (defun symbolic::simplify-by-fn) (#2# . 16160) (exp) symbolic::result #Y(symbolic::simplify-by-fn nil nil (24 45 49 26 13 0 19 1 18 12 19 1 258 45 269 10 0 39 8 13 0 13 1 20 1 23 45 284 10 0 73 39 6 13 0 19 1 187 43 2 29) #1# #2# 16160) "If there is a simplification fn for 
  this exp, and if apply it gives a true
  result, then return the simplified 
  result." symbolic::factorize (defun symbolic::factorize) (#2# . 16473) (exp) symbolic::constant symbolic::factors symbolic::n * symbolic::starts-with / - symbolic::length=1 :key :test equal find symbolic::factor #:g485 #:g487 + #:g486 si::elt-set #Y(symbolic::fac nil nil (24 48 21 24 45 293 26 11 21 16 207 39 18 13 3 14 21 10 0 17 217 12 19 2 294 51 3 73 38 232 14 21 15 294 19 2 295 39 27 14 21 19 1 11 12 13 0 32 1 18 2 14 21 19 1 14 12 13 0 32 1 18 2 38 197 14 21 15 296 19 2 295 39 31 14 21 19 1 11 12 13 0 32 1 18 2 14 21 19 1 14 12 13 0 19 1 297 12 32 1 18 2 38 158 14 21 15 297 19 2 295 39 10 14 21 19 1 146 12 19 1 298 39 22 13 3 19 1 297 51 3 14 21 19 1 11 12 13 0 32 1 18 2 38 117 14 21 15 210 19 2 295 39 8 14 21 19 1 14 16 207 39 25 14 21 19 1 11 12 13 0 14 21 19 1 14 12 19 2 294 12 32 1 18 2 38 75 14 21 13 2 14 299 33 11 12 14 300 33 301 12 19 6 302 45 303 10 0 39 35 10 0 45 304 10 2 45 305 13 1 19 1 14 12 13 0 19 2 306 45 307 13 2 9 2 13 0 19 3 308 43 3 38 16 15 210 14 21 10 1 6 3 12 10 3 3 51 3 73 43 1 44 1 29) #1# #2# 16473) ((symbolic::^ 0 1)) 1 #Y(symbolic::factorize nil nil (24 45 49 26 77 9 1 46 291 46 292 31 1 309 13 3 9 1 32 0 18 2 10 2 42 168 6 1 310 73 38 23 42 311 6 10 1 73 38 15 15 210 13 2 8 1 6 3 12 10 1 7 2 73 43 1 43 2 29) #1# #2# 16473) "Return a list of the factors of exp, 
  where each factor is of the form
  (^ y n)" symbolic::unfactorize (defun symbolic::unfactorize) (#2# . 18759) (symbolic::factors) #Y(symbolic::unfactorize nil nil (24 45 292 26 10 0 76 39 6 8 1 73 38 30 13 0 19 1 298 39 7 10 0 4 73 38 17 15 294 10 0 4 12 10 0 5 12 19 1 314 6 3 73 29) #1# #2# 18759) "Convert a list of factors back into
  prefix form." (defun symbolic::length=1) (#2# . 18988) (symbolic::seq) symbolic::seq #:g490 typep vector #Y(symbolic::length=1 nil nil (24 45 323 26 10 0 45 324 13 0 15 107 19 2 325 39 13 10 1 73 39 6 10 1 5 76 73 38 24 13 0 15 326 19 2 325 39 13 10 1 16 51 12 9 1 19 2 52 38 3 75 73 43 1 29) #1# #2# 18988) (defun symbolic::starts-with) (#2# . 19099) (symbolic::seq symbolic::item &key (symbolic::test (function eql))) symbolic::item (nil :test) eql symbolic::test #:g492 aref #Y(symbolic::starts-with nil nil (24 45 323 24 45 331 28 332 22 40 4 33 333 12 46 334 10 2 45 335 13 0 15 107 19 2 325 39 14 13 1 13 2 10 3 4 12 20 2 23 38 29 13 0 15 326 19 2 325 39 18 13 1 13 2 13 3 9 0 19 2 336 12 20 2 23 38 3 75 73 43 1 29) #1# #2# 19099) symbolic::divide-factors (defun symbolic::divide-factors) (#2# . 19329) (symbolic::numer symbolic::denom) symbolic::numer symbolic::denom copy-list #:g505 #:g507 #:g506 delete #Y(symbolic::divide-factors nil nil (24 45 342 24 45 343 26 33 344 12 13 1 19 2 63 45 284 10 1 45 224 38 104 10 0 4 48 2 14 2 19 1 11 12 13 1 14 299 33 11 12 14 300 33 301 12 19 6 302 45 303 10 0 39 38 10 0 45 345 14 2 19 1 14 45 346 13 1 19 1 14 12 13 0 19 2 297 45 347 13 2 9 2 13 0 19 3 308 43 3 38 26 15 210 14 2 19 1 11 12 14 2 19 1 14 12 19 1 297 6 3 12 10 2 3 51 2 43 1 10 0 5 51 0 44 1 10 0 40 -106 43 1 9 0 13 0 14 299 33 14 12 19 4 348 43 1 29) #1# #2# 19329) "Divide a list of factors by another,
  producing a third." symbolic::free-of (defun symbolic::free-of) (#2# . 19884) (exp symbolic::var) symbolic::var symbolic::find-anywhere #Y(symbolic::free-of nil nil (24 45 49 24 45 355 26 13 0 13 1 19 2 356 76 73 29) #1# #2# 19884) "True if expression has no occurrences
  of var." (defun symbolic::find-anywhere) (#2# . 19995) (symbolic::item symbolic::tree) symbolic::tree #Y(symbolic::find-anywhere nil nil (24 45 331 24 45 362 26 13 1 10 0 17 333 39 6 10 0 73 38 35 10 0 16 50 39 5 75 73 38 25 13 1 10 0 4 12 19 2 356 73 40 13 13 1 10 0 5 12 19 2 356 12 72 1 29) #1# #2# 19995) "Does item occur anywhere in tree? If so,
  return it." symbolic::integrate (defun symbolic::integrate) (#2# . 20221) (exp symbolic::x) #:g510 2 (1 2) si::ecase-error #Y(nil nil nil (24 45 303 26 13 0 14 21 19 2 351 29) #1# #2# 20221) symbolic::partition-if symbolic::x-factors symbolic::const-factors symbolic::deriv-divides #Y(nil nil nil (24 45 303 26 13 0 13 2 14 21 19 3 377 29) #1# #2# 20221) some symbolic::int? #Y(symbolic::integrate nil nil (24 45 49 24 48 21 26 13 0 14 21 19 2 351 39 12 15 294 13 0 11 21 6 3 73 38 191 13 0 15 306 19 2 295 39 31 15 306 13 0 19 1 11 12 14 21 19 2 365 12 13 0 19 1 14 12 14 21 19 2 365 6 3 73 38 152 13 0 15 297 19 2 295 39 76 13 0 19 1 146 16 51 45 369 10 0 42 311 19 15 297 13 1 19 1 11 12 14 21 19 2 365 6 2 73 38 40 42 370 31 15 297 13 1 19 1 11 12 14 21 19 2 365 12 13 1 19 1 14 12 14 21 19 2 365 6 3 73 38 7 13 0 1 371 17 372 43 1 38 68 1 373 12 13 0 19 1 287 12 19 2 374 47 1 375 45 376 15 294 13 0 19 1 314 12 10 1 76 39 5 11 21 38 23 34 378 12 13 1 19 2 379 40 13 15 380 13 1 19 1 314 12 11 21 6 3 6 3 12 19 1 187 12 43 2 72 1 44 1 29) #1# #2# 20221) (defun symbolic::partition-if) (#2# . 21461) (symbolic::pred list) symbolic::pred symbolic::no-list symbolic::yes-list nreverse #Y(symbolic::partition-if nil nil (24 45 385 24 45 107 26 77 77 46 386 46 387 10 2 45 224 38 38 10 0 4 45 331 13 5 13 0 20 1 23 39 10 13 0 10 2 3 51 2 38 8 13 0 10 3 3 51 3 10 1 5 51 1 43 1 10 0 40 -40 43 1 10 0 16 388 12 10 1 16 388 12 72 2 43 2 29) #1# #2# 21461) "Return two values: elements of list
  that satisfy pred and elements that
  don't." (defun symbolic::deriv-divides) (#2# . 21808) (symbolic::factor symbolic::factors symbolic::x) (symbolic::starts-with symbolic::factor (quote symbolic::^)) si::assert-failure symbolic::u symbolic::deriv symbolic::k log symbolic::in-integral-table? symbolic::k2 symbolic::integrate-from-table #Y(symbolic::deriv-divides nil nil (24 45 303 24 45 292 24 48 21 26 38 6 15 394 19 1 395 13 1 15 210 19 2 295 76 40 -14 13 1 19 1 11 45 396 13 2 19 1 14 45 293 13 2 15 294 13 3 13 1 14 21 19 2 397 6 3 12 19 1 287 12 19 2 338 45 398 13 0 14 21 19 2 351 39 67 13 1 9 -1 19 2 52 39 20 15 294 13 0 19 1 314 12 15 399 10 2 6 2 6 3 73 38 37 15 296 15 294 13 0 19 1 314 12 15 210 13 2 13 1 9 1 19 2 306 6 3 6 3 12 13 1 9 1 19 2 306 6 3 73 38 85 13 1 9 1 19 2 52 39 6 13 2 19 1 400 73 39 68 13 3 15 294 13 2 13 2 19 1 11 12 14 21 19 2 397 6 3 12 19 1 287 12 19 2 338 45 401 13 0 14 21 19 2 351 73 39 27 15 294 13 3 19 1 18 12 13 3 19 1 11 12 19 2 402 12 13 0 19 1 314 6 3 73 43 1 43 3 44 1 29) #1# #2# 21808) (defun symbolic::deriv) (#2# . 22710) (symbolic::y symbolic::x) #Y(symbolic::deriv nil nil (24 48 24 24 48 21 26 15 2 14 24 11 21 6 3 12 19 1 187 44 2 29) #1# #2# 22710) symbolic::integration-table (defun symbolic::integration-table) (#2# . 22755) (symbolic::rules) symbolic::rules symbolic::i-rule #:g528 #:g529 #:g530 #Y(symbolic::integration-table nil nil (24 45 412 26 10 0 45 224 38 58 10 0 4 45 413 13 0 19 1 45 45 89 13 0 19 1 11 12 19 1 11 12 19 1 18 45 414 1 8 45 415 10 2 45 416 13 2 13 0 13 1 19 3 272 43 1 43 2 43 1 10 1 5 51 1 43 1 10 0 40 -60 75 73 43 1 29) #1# #2# 22755) (defun symbolic::in-integral-table?) (#2# . 22947) (exp) #Y(symbolic::in-integral-table? nil nil (24 45 49 26 13 0 19 1 140 73 39 12 13 0 19 1 18 12 15 8 19 2 263 29) #1# #2# 22947) (defun symbolic::integrate-from-table) (#2# . 23031) (symbolic::op symbolic::arg) symbolic::arg subst #Y(symbolic::integrate-from-table nil nil (24 45 137 24 45 425 26 13 1 15 8 19 2 263 45 89 13 1 13 0 19 1 11 12 19 1 11 12 19 1 11 12 13 0 19 1 14 12 19 3 426 43 1 29) #1# #2# 23031) ((symbolic::int log (symbolic::x) symbolic::d symbolic::x = symbolic::x * log (symbolic::x) - symbolic::x) (symbolic::int exp (symbolic::x) symbolic::d symbolic::x = exp (symbolic::x)) (symbolic::int sin (symbolic::x) symbolic::d symbolic::x = - cos (symbolic::x)) (symbolic::int cos (symbolic::x) symbolic::d symbolic::x = sin (symbolic::x)) (symbolic::int tan (symbolic::x) symbolic::d symbolic::x = - log (cos (symbolic::x))) (symbolic::int sinh (symbolic::x) symbolic::d symbolic::x = cosh (symbolic::x)) (symbolic::int cosh (symbolic::x) symbolic::d symbolic::x = sinh (symbolic::x)) (symbolic::int tanh (symbolic::x) symbolic::d symbolic::x = log (cosh (symbolic::x)))) #Y(nil nil nil (24 45 49 26 13 0 19 1 11 12 13 0 19 1 14 12 19 2 365 29) #1# #2# 23464))) #2# 0) #Y(si::bytecodes nil nil (1 2 16 3 1 2 52 2 15 2 15 4 15 5 15 6 19 4 7 1 2 73 29) #1# #2# 161) #Y(si::bytecodes nil nil (1 8 16 3 1 8 52 8 15 8 15 4 15 9 15 10 19 4 7 1 8 73 29) #1# #2# 1083) #Y(si::bytecodes nil nil (1 11 16 3 1 11 52 11 15 11 15 4 15 12 15 13 19 4 7 1 11 73 29) #1# #2# 1108) #Y(si::bytecodes nil nil (1 14 16 3 11 15 52 14 15 14 15 4 15 16 15 17 19 4 7 1 14 73 29) #1# #2# 1141) #Y(si::bytecodes nil nil (1 18 16 3 1 18 52 18 15 18 15 4 15 19 15 20 19 4 7 1 18 73 29) #1# #2# 1174) #Y(si::bytecodes nil nil (1 21 16 3 1 21 52 21 15 21 15 4 15 22 15 23 19 4 7 1 21 73 29) #1# #2# 1205) #Y(si::bytecodes nil nil (1 24 16 3 1 24 52 24 15 24 15 4 15 25 15 26 19 4 7 1 24 73 29) #1# #2# 1226) #Y(si::bytecodes nil nil (1 27 16 3 1 27 52 27 15 27 15 4 15 28 15 29 19 4 7 1 27 73 29) #1# #2# 1247) #Y(si::bytecodes nil nil (1 30 16 3 1 30 52 30 15 30 15 4 15 31 15 32 19 4 7 1 30 73 29) #1# #2# 1284) #Y(si::bytecodes nil nil (15 33 15 4 15 34 15 35 19 4 7 15 33 14 36 77 15 37 19 4 7 15 33 1 40 12 19 2 41 15 33 15 42 15 43 19 3 44 1 33 73 29) #1# #2# 1305) #Y(si::bytecodes nil nil (15 45 15 4 15 46 15 47 19 4 7 15 45 14 36 77 15 48 19 4 7 15 45 1 72 12 19 2 41 15 45 15 42 15 73 19 3 44 1 45 73 29) #1# #2# 1507) #Y(si::bytecodes nil nil (15 67 15 4 15 74 15 75 19 4 7 15 67 14 36 77 15 76 19 4 7 15 67 1 79 12 19 2 41 15 67 15 42 15 80 19 3 44 1 67 73 29) #1# #2# 2365) #Y(si::bytecodes nil nil (15 81 15 82 19 2 83 29) #1# #2# 2524) #Y(si::bytecodes nil nil (15 84 15 85 19 2 83 29) #1# #2# 2556) #Y(si::bytecodes nil nil (15 55 15 4 15 86 15 87 19 4 7 15 55 14 36 77 15 88 19 4 7 15 55 1 90 12 19 2 41 1 55 73 29) #1# #2# 2588) #Y(si::bytecodes nil nil (15 57 15 4 15 91 15 92 19 4 7 15 57 14 36 77 15 93 19 4 7 15 57 1 95 12 19 2 41 1 57 73 29) #1# #2# 2632) #Y(si::bytecodes nil nil (1 96 16 3 33 97 12 15 98 19 2 63 52 96 15 96 15 99 15 100 19 3 44 15 96 15 4 15 101 15 102 19 4 7 1 96 73 29) #1# #2# 2678) #Y(si::bytecodes nil nil (1 53 16 3 33 97 12 15 103 19 2 63 52 53 15 53 15 4 15 104 15 105 19 4 7 1 53 73 29) #1# #2# 3072) #Y(si::bytecodes nil nil (15 89 15 106 15 107 77 15 108 15 109 15 110 77 77 77 15 111 9 2 77 77 77 19 15 112 15 113 15 4 15 114 15 115 19 4 7 15 116 15 4 15 117 15 118 19 4 7 15 116 14 36 77 15 119 19 4 7 15 116 1 123 12 19 2 41 1 89 73 29) #1# #2# 3477) #Y(si::bytecodes nil nil (15 49 15 124 15 107 77 15 125 15 126 15 127 77 77 77 15 128 9 3 77 77 77 19 15 112 15 129 15 4 15 130 15 131 19 4 7 15 132 15 4 15 133 15 134 19 4 7 15 132 14 36 77 15 135 19 4 7 15 132 1 139 12 19 2 41 1 49 73 29) #1# #2# 3543) #Y(si::bytecodes nil nil (15 140 15 4 15 141 15 142 19 4 7 15 140 14 36 77 15 143 19 4 7 15 140 1 145 12 19 2 41 1 140 73 29) #1# #2# 3758) #Y(si::bytecodes nil nil (15 146 15 4 15 147 15 148 19 4 7 15 146 14 36 77 15 149 19 4 7 15 146 1 150 12 19 2 41 1 146 73 29) #1# #2# 3788) #Y(si::bytecodes nil nil (15 39 15 4 15 151 15 152 19 4 7 15 39 14 36 77 15 153 19 4 7 15 39 1 155 12 19 2 41 15 39 15 42 15 156 19 3 44 1 39 73 29) #1# #2# 3821) #Y(si::bytecodes nil nil (15 154 15 4 15 157 15 158 19 4 7 15 154 14 36 77 15 159 19 4 7 15 154 1 160 12 19 2 41 1 154 73 29) #1# #2# 4099) #Y(si::bytecodes nil nil (1 161 16 3 33 45 12 15 162 19 2 63 52 161 15 161 15 4 15 163 15 164 19 4 7 1 161 73 29) #1# #2# 4177) #Y(si::bytecodes nil nil (15 165 15 4 15 166 15 167 19 4 7 15 165 14 36 77 77 19 4 7 15 165 1 181 12 19 2 41 15 165 15 42 15 182 19 3 44 1 165 73 29) #1# #2# 4831) #Y(si::bytecodes nil nil (15 177 15 4 15 183 15 184 19 4 7 15 177 14 36 77 15 185 19 4 7 15 177 1 188 12 19 2 41 1 177 73 29) #1# #2# 5154) #Y(si::bytecodes nil nil (15 187 15 4 15 189 15 190 19 4 7 15 187 14 36 77 15 191 19 4 7 15 187 1 193 12 19 2 41 15 187 15 42 15 194 19 3 44 1 187 73 29) #1# #2# 5226) #Y(si::bytecodes nil nil (15 195 15 4 15 196 15 197 19 4 7 15 195 14 36 77 15 198 19 4 7 15 195 1 202 12 19 2 41 15 195 15 42 15 203 19 3 44 1 195 73 29) #1# #2# 5398) #Y(si::bytecodes nil nil (15 200 15 4 15 204 15 205 19 4 7 15 200 14 36 77 15 206 19 4 7 15 200 1 212 12 19 2 41 15 200 15 42 15 213 19 3 44 1 200 73 29) #1# #2# 5813) #Y(si::bytecodes nil nil (15 210 15 4 15 214 15 215 19 4 7 15 210 14 36 77 15 216 19 4 7 15 210 1 218 12 19 2 41 1 210 73 29) #1# #2# 6065) #Y(si::bytecodes nil nil (15 219 15 4 15 220 15 221 19 4 7 15 219 14 36 77 15 222 19 4 7 15 219 1 228 12 19 2 41 15 219 15 42 15 229 19 3 44 1 219 73 29) #1# #2# 6095) #Y(si::bytecodes nil nil (15 230 15 4 15 231 15 232 19 4 7 15 230 14 36 77 15 233 19 4 7 15 230 1 236 12 19 2 41 1 230 73 29) #1# #2# 8018) #Y(si::bytecodes nil nil (15 237 15 238 15 239 19 3 230 29) #1# #2# 8248) #Y(si::bytecodes nil nil (15 237 15 240 19 2 83 29) #1# #2# 8275) #Y(si::bytecodes nil nil (15 238 15 241 19 2 83 29) #1# #2# 8316) #Y(si::bytecodes nil nil (15 239 15 242 19 2 83 29) #1# #2# 8357) #Y(si::bytecodes nil nil (15 243 15 4 15 244 15 245 19 4 7 15 243 14 36 77 15 246 19 4 7 15 243 1 247 12 19 2 41 1 243 73 29) #1# #2# 8403) #Y(si::bytecodes nil nil (15 248 15 4 15 249 15 250 19 4 7 15 248 14 36 77 15 251 19 4 7 15 248 1 252 12 19 2 41 15 248 15 42 15 253 19 3 44 1 248 73 29) #1# #2# 8449) #Y(si::bytecodes nil nil (14 161 33 248 12 15 254 19 2 63 12 19 2 255 52 161 73 29) #1# #2# 8647) #Y(si::bytecodes nil nil (14 161 33 248 12 15 256 19 2 63 12 19 2 255 52 161 73 29) #1# #2# 9014) #Y(si::bytecodes nil nil (14 161 33 248 12 15 257 19 2 63 12 19 2 255 52 161 73 29) #1# #2# 12420) #Y(si::bytecodes nil nil (15 258 15 4 15 259 15 260 19 4 7 15 258 14 36 77 15 261 19 4 7 15 258 1 264 12 19 2 41 1 258 73 29) #1# #2# 14771) #Y(si::bytecodes nil nil (15 265 15 4 15 266 15 267 19 4 7 15 265 14 36 77 15 268 19 4 7 15 265 1 273 12 19 2 41 1 265 73 29) #1# #2# 15627) #Y(si::bytecodes nil nil (15 192 15 4 15 274 15 275 19 4 7 15 192 14 36 77 15 276 19 4 7 15 192 1 279 12 19 2 41 15 192 15 42 15 280 19 3 44 1 192 73 29) #1# #2# 15686) #Y(si::bytecodes nil nil (15 277 15 4 15 281 15 282 19 4 7 15 277 14 36 77 15 283 19 4 7 15 277 1 285 12 19 2 41 15 277 15 42 15 286 19 3 44 1 277 73 29) #1# #2# 16160) #Y(si::bytecodes nil nil (15 287 15 4 15 288 15 289 19 4 7 15 287 14 36 77 15 290 19 4 7 15 287 34 312 12 19 2 41 15 287 15 42 15 313 19 3 44 1 287 73 29) #1# #2# 16473) #Y(si::bytecodes nil nil (15 314 15 4 15 315 15 316 19 4 7 15 314 14 36 77 15 317 19 4 7 15 314 1 318 12 19 2 41 15 314 15 42 15 319 19 3 44 1 314 73 29) #1# #2# 18759) #Y(si::bytecodes nil nil (15 298 15 4 15 320 15 321 19 4 7 15 298 14 36 77 15 322 19 4 7 15 298 1 327 12 19 2 41 1 298 73 29) #1# #2# 18988) #Y(si::bytecodes nil nil (15 295 15 4 15 328 15 329 19 4 7 15 295 14 36 77 15 330 19 4 7 15 295 1 337 12 19 2 41 1 295 73 29) #1# #2# 19099) #Y(si::bytecodes nil nil (15 338 15 4 15 339 15 340 19 4 7 15 338 14 36 77 15 341 19 4 7 15 338 1 349 12 19 2 41 15 338 15 42 15 350 19 3 44 1 338 73 29) #1# #2# 19329) #Y(si::bytecodes nil nil (15 351 15 4 15 352 15 353 19 4 7 15 351 14 36 77 15 354 19 4 7 15 351 1 357 12 19 2 41 15 351 15 42 15 358 19 3 44 1 351 73 29) #1# #2# 19884) #Y(si::bytecodes nil nil (15 356 15 4 15 359 15 360 19 4 7 15 356 14 36 77 15 361 19 4 7 15 356 1 363 12 19 2 41 15 356 15 42 15 364 19 3 44 1 356 73 29) #1# #2# 19995) #Y(si::bytecodes nil nil (15 365 15 4 15 366 15 367 19 4 7 15 365 14 36 77 15 368 19 4 7 15 365 34 381 12 19 2 41 1 365 73 29) #1# #2# 20221) #Y(si::bytecodes nil nil (15 374 15 4 15 382 15 383 19 4 7 15 374 14 36 77 15 384 19 4 7 15 374 1 389 12 19 2 41 15 374 15 42 15 390 19 3 44 1 374 73 29) #1# #2# 21461) #Y(si::bytecodes nil nil (15 377 15 4 15 391 15 392 19 4 7 15 377 14 36 77 15 393 19 4 7 15 377 1 403 12 19 2 41 1 377 73 29) #1# #2# 21808) #Y(si::bytecodes nil nil (15 397 15 4 15 404 15 405 19 4 7 15 397 14 36 77 15 406 19 4 7 15 397 1 407 12 19 2 41 1 397 73 29) #1# #2# 22710) #Y(si::bytecodes nil nil (15 408 15 4 15 409 15 410 19 4 7 15 408 14 36 77 15 411 19 4 7 15 408 1 417 12 19 2 41 1 408 73 29) #1# #2# 22755) #Y(si::bytecodes nil nil (15 400 15 4 15 418 15 419 19 4 7 15 400 14 36 77 15 420 19 4 7 15 400 1 421 12 19 2 41 1 400 73 29) #1# #2# 22947) #Y(si::bytecodes nil nil (15 402 15 4 15 422 15 423 19 4 7 15 402 14 36 77 15 424 19 4 7 15 402 1 427 12 19 2 41 1 402 73 29) #1# #2# 23031) #Y(si::bytecodes nil nil (15 428 19 1 408 29) #1# #2# 23182) #Y(si::bytecodes nil nil (15 8 1 429 12 19 2 265 29) #1# #2# 23464))
