(#Y(si::bytecodes nil nil (1 0 16 1 29) #1=#A(t (512) ("REASONING-COMPLETENESS" si::select-package reasoning-completeness::+fail+ si::*make-constant variable "Indicates pat-match failure" si::set-documentation ext::location (defconstant reasoning-completeness::+fail+) (#2=#P"/data/data/org.eql5.android.repl/files/quicklisp/local-projects/paip/ch-14a.lisp" . 150) ext::annotate reasoning-completeness::+no-bindings+ ((t . t)) "Indicates pat-match success, with no
  variables" (defconstant reasoning-completeness::+no-bindings+) (#2# . 477) reasoning-completeness::variablep (defun reasoning-completeness::variablep) (#2# . 570) :lambda-list (reasoning-completeness::x) reasoning-completeness::x symbolp symbol-name char #\? eql #Y(reasoning-completeness::variablep nil nil (24 45 21 26 10 0 16 22 73 39 15 10 0 16 23 12 8 0 17 24 12 1 25 17 26 29) #1# #2# 570) si::fset function "Is x a variable (a symbol beginning
  with '?')?" reasoning-completeness::get-binding (defun reasoning-completeness::get-binding) (#2# . 789) (reasoning-completeness::var reasoning-completeness::bindings) reasoning-completeness::var reasoning-completeness::bindings assoc #Y(reasoning-completeness::get-binding nil nil (24 45 35 24 45 36 26 13 1 13 0 19 2 37 29) #1# #2# 789) "Find a (variable . value) pair in a
  binding list." reasoning-completeness::binding-val (defun reasoning-completeness::binding-val) (#2# . 904) (reasoning-completeness::binding) reasoning-completeness::binding #Y(reasoning-completeness::binding-val nil nil (24 45 44 26 10 0 5 73 29) #1# #2# 904) "Get the value part of a single binding." reasoning-completeness::lookup (defun reasoning-completeness::lookup) (#2# . 995) (reasoning-completeness::var reasoning-completeness::bindings) #Y(reasoning-completeness::lookup nil nil (24 45 35 24 45 36 26 13 1 13 0 19 2 31 12 19 1 40 29) #1# #2# 995) "Get the value part (for var) from a 
  binding list." reasoning-completeness::extend-bindings (defun reasoning-completeness::extend-bindings) (#2# . 1126) (reasoning-completeness::var reasoning-completeness::val reasoning-completeness::bindings) reasoning-completeness::val eq #Y(reasoning-completeness::extend-bindings nil nil (24 45 35 24 45 57 24 45 36 26 13 2 10 1 3 12 13 0 11 11 17 58 39 4 75 38 3 10 0 3 73 29) #1# #2# 1126) "Add a (var . value) pair to a binding
  list." reasoning-completeness::match-variable (defun reasoning-completeness::match-variable) (#2# . 1457) (reasoning-completeness::var reasoning-completeness::input reasoning-completeness::bindings) reasoning-completeness::input equal #Y(reasoning-completeness::match-variable nil nil (24 45 35 24 45 65 24 45 36 26 13 2 13 0 19 2 31 45 44 10 0 76 39 12 13 3 13 2 13 1 19 3 53 38 20 13 2 13 0 19 1 40 17 66 39 6 10 1 73 38 4 11 2 73 43 1 29) #1# #2# 1457) "Does var match bindings? Uses (or 
  updates) and returns bindings." reasoning-completeness::unify (defun reasoning-completeness::unify) (#2# . 1775) (reasoning-completeness::x reasoning-completeness::y &optional (reasoning-completeness::bindings reasoning-completeness::+no-bindings+)) reasoning-completeness::y reasoning-completeness::unify-variable consp #Y(reasoning-completeness::unify nil nil (24 45 21 24 45 73 25 40 3 14 11 46 36 26 13 0 11 2 17 58 39 6 11 2 73 38 92 13 2 10 1 17 26 39 6 10 0 73 38 79 13 2 19 1 16 39 12 13 2 13 1 13 0 19 3 74 38 61 13 1 19 1 16 39 12 13 1 13 2 13 0 19 3 74 38 43 10 2 16 75 39 5 10 1 16 75 39 28 10 2 5 12 10 1 5 12 10 2 4 12 10 1 4 12 13 0 19 3 69 12 19 3 69 38 4 11 2 73 29) #1# #2# 1775) "See if x and y match with given bindkngs." reasoning-completeness::*occurs-check* si::*make-special t "Should we do the occurs check?" (defparameter reasoning-completeness::*occurs-check*) (#2# . 2287) (defun reasoning-completeness::unify-variable) (#2# . 2359) (reasoning-completeness::var reasoning-completeness::x reasoning-completeness::bindings) reasoning-completeness::occurs-check #Y(reasoning-completeness::unify-variable nil nil (24 45 35 24 45 21 24 45 36 26 13 2 13 0 19 2 31 39 18 13 2 13 0 19 2 47 12 13 1 13 0 19 3 69 38 63 13 1 19 1 16 39 8 13 1 13 0 19 2 31 39 18 13 2 13 1 13 0 19 2 47 12 13 0 19 3 69 38 30 11 78 39 10 13 2 13 1 13 0 19 3 87 39 6 11 2 73 38 10 13 2 13 1 13 0 19 3 53 29) #1# #2# 2359) "Unify var with x, using (and maybe
  extending) bindings." (defun reasoning-completeness::occurs-check) (#2# . 2911) (reasoning-completeness::var reasoning-completeness::x reasoning-completeness::bindings) #Y(reasoning-completeness::occurs-check nil nil (24 45 35 24 45 21 24 45 36 26 13 2 10 1 17 58 39 6 11 80 73 38 69 13 1 19 1 16 39 8 13 1 13 0 19 2 31 39 18 13 2 13 1 13 0 19 2 47 12 13 0 19 3 87 38 36 10 1 16 75 39 28 13 2 10 1 4 12 13 0 19 3 87 73 40 12 13 2 10 1 5 12 13 0 19 3 87 38 3 75 73 29) #1# #2# 2911) "Does var occur anywhere inside x?" reasoning-completeness::subst-bindings (defun reasoning-completeness::subst-bindings) (#2# . 3345) (reasoning-completeness::bindings reasoning-completeness::x) atom more-efficiency::reuse-cons #Y(reasoning-completeness::subst-bindings nil nil (24 45 36 24 45 21 26 13 1 11 2 17 58 39 6 11 2 73 38 81 13 1 11 11 17 58 39 6 10 0 73 38 68 13 0 19 1 16 39 8 13 0 13 1 19 2 31 39 16 13 1 13 0 13 1 19 2 47 12 19 2 95 38 37 10 0 16 99 39 6 10 0 73 38 26 13 1 10 0 4 12 19 2 95 12 13 1 10 0 5 12 19 2 95 12 13 0 19 3 100 29) #1# #2# 3345) "Substitute the value of variables in
  bindings into x, taking recursively 
  bound variables into account." reasoning-completeness::unifier (defun reasoning-completeness::unifier) (#2# . 3880) (reasoning-completeness::x reasoning-completeness::y) #Y(reasoning-completeness::unifier nil nil (24 45 21 24 45 73 26 13 1 13 0 19 2 69 12 13 1 19 2 95 29) #1# #2# 3880) "Return something that unifies with both
  x and y (or fail)." reasoning-completeness::clause-head (defun reasoning-completeness::clause-head) (#2# . 4001) (reasoning-completeness::clause) reasoning-completeness::clause #Y(reasoning-completeness::clause-head nil nil (24 45 113 26 10 0 4 73 29) #1# #2# 4001) reasoning-completeness::clause-body (defun reasoning-completeness::clause-body) (#2# . 4110) (reasoning-completeness::clause) #Y(reasoning-completeness::clause-body nil nil (24 45 113 26 10 0 5 73 29) #1# #2# 4110) reasoning-completeness::get-clauses (defun reasoning-completeness::get-clauses) (#2# . 4156) (reasoning-completeness::pred) reasoning-completeness::pred reasoning-completeness::clauses get #Y(reasoning-completeness::get-clauses nil nil (24 45 124 26 13 0 15 125 19 2 126 29) #1# #2# 4156) reasoning-completeness::predicate (defun reasoning-completeness::predicate) (#2# . 4257) (reasoning-completeness::relation) reasoning-completeness::relation #Y(reasoning-completeness::predicate nil nil (24 45 132 26 10 0 4 73 29) #1# #2# 4257) reasoning-completeness::*db-predicates* boundp (defvar reasoning-completeness::*db-predicates*) (#2# . 4306) reasoning-completeness::add-clause (defun reasoning-completeness::add-clause) (#2# . 4336) (reasoning-completeness::clause) reasoning-completeness::ensure-list (and (symbolp reasoning-completeness::pred) (not (reasoning-completeness::variablep reasoning-completeness::pred))) si::assert-failure adjoin #:g1368 #:g1369 nconc #:g1370 si::putprop #Y(reasoning-completeness::add-clause nil nil (24 45 113 26 13 0 19 1 109 12 19 1 142 12 19 1 128 45 124 38 6 15 143 19 1 144 10 0 16 22 39 7 13 0 19 1 16 76 76 40 -19 13 0 14 134 19 2 145 52 134 10 0 45 146 1 125 45 147 13 2 19 1 120 12 10 3 6 1 12 19 2 148 45 149 13 2 13 0 13 1 19 3 150 43 1 43 2 10 0 73 43 1 29) #1# #2# 4336) "Add a clause to the database, indexed
  by the head's predicate." reasoning-completeness::clear-db (defun reasoning-completeness::clear-db) (#2# . 4822) reasoning-completeness::clear-predicate mapc #Y(reasoning-completeness::clear-db nil nil (26 33 156 12 14 134 19 2 157 29) #1# #2# 4822) "Remove all clauses (for all predicates)
  from the database." (defun reasoning-completeness::clear-predicate) (#2# . 4951) (reasoning-completeness::predicate) #:g1374 #:g1375 #:g1376 #Y(reasoning-completeness::clear-predicate nil nil (24 45 128 26 10 0 45 163 1 125 45 164 75 45 165 13 2 13 0 13 1 19 3 150 43 1 43 2 29) #1# #2# 4951) "Remove the clauses for a single 
  predicate." reasoning-completeness::*search-cutoff* "Has the search been stopped?" (defvar reasoning-completeness::*search-cutoff*) (#2# . 5076) reasoning-completeness::prove-all (defun reasoning-completeness::prove-all) (#2# . 5148) (reasoning-completeness::goals reasoning-completeness::bindings reasoning-completeness::depth) reasoning-completeness::goals reasoning-completeness::depth reasoning-completeness::prove #Y(reasoning-completeness::prove-all nil nil (24 45 176 24 45 36 24 45 177 26 13 1 11 2 17 58 39 6 11 2 73 38 26 10 2 76 39 6 10 1 73 38 16 10 2 4 12 13 1 10 2 5 12 13 0 19 4 178 29) #1# #2# 5148) "Find a solution to the conjunction of
  goals." (defun reasoning-completeness::prove) (#2# . 5495) (reasoning-completeness::goal reasoning-completeness::bindings reasoning-completeness::other-goals reasoning-completeness::depth) reasoning-completeness::goal reasoning-completeness::other-goals zerop listp reasoning-completeness::rename-variables reasoning-completeness::new-clause append 1- #Y(nil nil nil (24 45 113 26 13 0 19 1 188 45 189 13 0 19 1 115 12 13 4 19 2 190 12 13 6 13 0 19 1 109 12 13 5 19 3 69 12 10 3 16 191 12 19 3 172 43 1 29) #1# #2# 5495) some #Y(reasoning-completeness::prove nil nil (24 45 184 24 45 36 24 45 185 24 45 177 26 10 0 16 186 39 10 11 80 52 168 11 2 73 38 45 13 3 19 1 128 12 19 1 120 45 125 10 0 16 187 39 11 34 192 12 13 0 19 2 193 38 16 13 0 10 4 5 12 13 3 13 2 13 1 20 4 23 43 1 29) #1# #2# 5495) "Return a list of possible solutions to 
  goal." reasoning-completeness::*depth-start* "The depth of the first round of iterative
  search." (defparameter reasoning-completeness::*depth-start*) (#2# . 6696) reasoning-completeness::*depth-incr* "Increase the depth of each iteration
   of the search by this amount." (defparameter reasoning-completeness::*depth-incr*) (#2# . 6808) reasoning-completeness::*depth-max* most-positive-fixnum "The deepest we will ever search." (defparameter reasoning-completeness::*depth-max*) (#2# . 6921) reasoning-completeness::top-level-prove (defun reasoning-completeness::top-level-prove) (#2# . 7021) (reasoning-completeness::goals) reasoning-completeness::show-prolog-vars reasoning-completeness::variables-in reasoning-completeness::all-goals #:loop-step-by1382 #:loop-limit1381 0 > reasoning-completeness::*search-cut-off* + "~&No." format #Y(reasoning-completeness::top-level-prove nil nil (24 45 176 26 13 0 15 213 13 0 19 1 214 7 2 6 1 12 19 2 190 45 215 14 196 14 204 14 200 46 216 46 217 46 177 57 218 61 2 2 47 13 1 13 2 19 2 219 39 4 35 0 1 75 45 220 13 5 14 11 13 2 19 3 172 10 0 43 1 76 39 4 35 0 1 13 1 13 3 19 2 221 51 1 35 0 0 62 43 3 43 1 14 80 15 222 19 2 223 0 29) #1# #2# 7021) (defun reasoning-completeness::show-prolog-vars) (#2# . 7553) (reasoning-completeness::vars reasoning-completeness::bindings reasoning-completeness::other-goals reasoning-completeness::depth) reasoning-completeness::vars *query-io* *standard-output* make-broadcast-stream reasoning-completeness::bs "~&Yes." si::%dolist-var "~&~A = ~A" reasoning-completeness::continuep #Y(reasoning-completeness::show-prolog-vars nil nil (24 45 228 24 45 36 24 45 185 24 45 177 26 13 0 14 200 19 2 219 39 6 11 2 73 38 92 14 229 14 230 19 2 231 45 232 10 0 48 230 10 4 76 39 10 14 80 15 233 19 2 223 38 61 10 4 45 234 38 30 10 0 4 45 35 14 80 15 235 13 0 13 5 13 0 19 2 95 12 19 4 223 10 1 5 51 1 43 1 10 0 40 -32 43 1 19 0 236 39 6 11 2 73 38 10 13 2 13 3 13 1 19 3 172 43 1 44 1 29) #1# #2# 7553) "Print each variable with its binding.
  Then ask the user if more solutions are
  desired." (defun reasoning-completeness::rename-variables) (#2# . 8393) (reasoning-completeness::x) string gensym #Y(nil nil nil (24 45 35 26 13 0 10 0 16 242 12 19 1 243 3 73 29) #1# #2# 8393) mapcar sublis #Y(reasoning-completeness::rename-variables nil nil (24 45 21 26 1 244 12 13 0 19 1 214 12 19 2 245 12 13 0 19 2 246 29) #1# #2# 8393) "Replace all variables in x with new ones." (defun reasoning-completeness::variables-in) (#2# . 8606) (exp) exp reasoning-completeness::unique-find-anywhere-if #Y(reasoning-completeness::variables-in nil nil (24 45 252 26 33 16 12 13 0 19 2 253 29) #1# #2# 8606) "Return a list of all variables in the
  arg exp." (defun reasoning-completeness::unique-find-anywhere-if) (#2# . 8731) (reasoning-completeness::predicate reasoning-completeness::tree &optional reasoning-completeness::found-so-far) reasoning-completeness::tree reasoning-completeness::found-so-far #Y(reasoning-completeness::unique-find-anywhere-if nil nil (24 45 128 24 45 259 25 40 2 77 46 260 26 10 1 16 99 39 24 13 2 13 1 20 1 23 39 10 13 1 13 0 19 2 145 38 4 10 0 73 38 22 13 2 10 1 4 12 13 2 10 1 5 12 13 0 19 3 253 12 19 3 253 29) #1# #2# 8731) "Return a list of leaves of tree 
  satisfying predicate with duplicates
  removed." reasoning-completeness::show-prolog-solutions (defun reasoning-completeness::show-prolog-solutions) (#2# . 9200) (reasoning-completeness::vars reasoning-completeness::solutions) reasoning-completeness::solutions "~&No." reasoning-completeness::solution #Y(nil nil nil (24 45 269 26 13 2 13 0 19 2 213 29) #1# #2# 9200) #Y(reasoning-completeness::show-prolog-solutions nil nil (24 45 228 24 45 267 26 10 0 76 39 10 14 80 15 268 19 2 223 38 9 34 270 12 13 0 19 2 157 0 29) #1# #2# 9200) "Print the variables in each of the 
  solutions." (defun reasoning-completeness::ensure-list) (#2# . 9469) (reasoning-completeness::x) #Y(reasoning-completeness::ensure-list nil nil (24 45 21 26 10 0 16 187 39 6 10 0 73 38 6 10 0 6 1 73 29) #1# #2# 9469) #:g1383 #:g1384 #:g1385 (defun reasoning-completeness::continuep) (#2# . 9608) read-char #\; #\. #\Newline " Type ; to see more or ~%~
              . to stop." #Y(reasoning-completeness::continuep nil nil (26 19 0 282 42 283 6 11 80 73 38 26 42 284 5 75 73 38 19 42 285 6 19 0 236 38 11 14 80 15 286 19 2 223 19 0 236 29) #1# #2# 9608) "Ask user if we should continue looking
  for solutions." reasoning-completeness::replace-?-vars (defun reasoning-completeness::replace-?-vars) (#2# . 9877) (exp) reasoning-completeness::? "?" #Y(reasoning-completeness::replace-?-vars nil nil (24 45 252 26 13 0 1 293 17 58 39 8 15 294 19 1 243 38 33 10 0 16 99 39 6 10 0 73 38 22 10 0 4 12 19 1 289 12 10 0 5 12 19 1 289 12 13 0 19 3 100 29) #1# #2# 9877) "Replace any ? in exp with a var of the
    form #:?123." reasoning-completeness::<- (defmacro reasoning-completeness::<-) (#2# . 10243) (&rest reasoning-completeness::clause) #:g1387 #:g1386 #:g1388 quote #Y(reasoning-completeness::<- nil nil (24 45 301 24 45 302 26 10 1 5 45 303 10 0 45 113 15 138 15 304 13 0 19 1 289 6 2 6 2 73 29) #1# #2# 10243) "Add a clause to the data base." reasoning-completeness::?- (defmacro reasoning-completeness::?-) (#2# . 10354) (&rest reasoning-completeness::goals) #:g1390 #:g1389 #:g1391 #Y(reasoning-completeness::?- nil nil (24 45 311 24 45 312 26 10 1 5 45 313 10 0 45 176 15 209 15 304 13 0 19 1 289 6 2 6 2 73 29) #1# #2# 10354) "Make a query and print answers." reasoning-completeness::make-empty-nlist (defun reasoning-completeness::make-empty-nlist) (#2# . 10471) #Y(reasoning-completeness::make-empty-nlist nil nil (26 9 0 75 3 73 29) #1# #2# 10471) "Create a new, empty nlist." reasoning-completeness::nlist-n (defun reasoning-completeness::nlist-n) (#2# . 10608) (reasoning-completeness::nlist) reasoning-completeness::nlist #Y(reasoning-completeness::nlist-n nil nil (24 45 325 26 10 0 4 73 29) #1# #2# 10608) "Return the number of elements in an
  nlist." reasoning-completeness::nlist-list (defun reasoning-completeness::nlist-list) (#2# . 10698) (reasoning-completeness::nlist) #Y(reasoning-completeness::nlist-list nil nil (24 45 325 26 10 0 5 73 29) #1# #2# 10698) "Return the elements in an nlist." reasoning-completeness::nlist-push (defun reasoning-completeness::nlist-push) (#2# . 10777) (reasoning-completeness::item reasoning-completeness::nlist) reasoning-completeness::item #:g1398 #:g1400 #:g1399 rplaca #:g1403 #:g1401 #:g1402 rplacd #Y(reasoning-completeness::nlist-push nil nil (24 45 338 24 45 325 26 10 0 45 339 8 1 45 340 10 1 4 12 13 0 19 2 221 45 341 13 2 10 0 17 342 10 0 43 3 10 1 45 343 10 1 45 344 13 1 10 0 5 3 45 345 13 1 10 0 17 346 10 0 73 43 3 29) #1# #2# 10777) "Add a new element to an nlist." reasoning-completeness::dtree "DTREE-" vector ((first nil) (rest nil) (reasoning-completeness::atoms nil) (reasoning-completeness::var #3=(reasoning-completeness::make-empty-nlist))) ((first nil t nil 0 nil) (rest nil t nil 1 nil) (reasoning-completeness::atoms nil t nil 2 nil) (reasoning-completeness::var #3# t nil 3 nil)) reasoning-completeness::copy-dtree (reasoning-completeness::make-dtree) si::define-structure #4=(reasoning-completeness::dtree (:type vector)) (defstruct #4#) (#2# . 10892) reasoning-completeness::make-dtree (defun reasoning-completeness::make-dtree) (#2# . 10892) (&key #5=#:first #6=#:rest #7=#:atoms (#8=#:var (reasoning-completeness::make-empty-nlist))) (nil :var :atoms :rest :first) #5# #6# #7# #8# (4) :element-type :initial-contents make-array #Y(reasoning-completeness::make-dtree nil nil (28 364 22 40 2 77 46 365 22 40 2 77 46 366 22 40 2 77 46 367 22 40 5 19 0 316 12 46 368 15 369 14 370 15 80 14 371 13 3 13 2 13 1 10 0 6 4 12 19 5 372 29) #1# #2# 10892) reasoning-completeness::predicates reasoning-completeness::get-dtree (defun reasoning-completeness::get-dtree) (#2# . 11186) (reasoning-completeness::predicate) #:g1409 #:g1410 #:g1411 #Y(reasoning-completeness::get-dtree nil nil (24 45 128 26 13 0 15 349 19 2 126 73 40 34 13 0 10 1 3 51 1 10 0 45 379 1 349 45 380 19 0 360 45 381 13 2 13 0 13 1 19 3 150 43 1 43 2 29) #1# #2# 11186) "Fetch (or make) the dtree for this
    predicate." reasoning-completeness::clear-dtrees (defun reasoning-completeness::clear-dtrees) (#2# . 11186) #:g1422 #:g1423 #:g1424 #Y(reasoning-completeness::clear-dtrees nil nil (26 10 0 45 234 38 37 10 0 4 45 128 10 0 45 387 1 349 45 388 75 45 389 13 2 13 0 13 1 19 3 150 43 1 43 2 10 1 5 51 1 43 1 10 0 40 -39 43 1 75 51 0 73 29) #1# #2# 11186) "Remove all the dtrees for all the
    predicates." reasoning-completeness::index (defun reasoning-completeness::index) (#2# . 11758) (reasoning-completeness::key) reasoning-completeness::key reasoning-completeness::dtree-index #Y(reasoning-completeness::index nil nil (24 45 396 26 13 0 13 0 19 1 188 12 13 0 19 1 128 12 19 1 375 12 19 3 397 29) #1# #2# 11758) "Store key in a dtree node...key must
  be of the form (predicate . args); it
  is stored in the predicate's dtree." (defun reasoning-completeness::dtree-index) (#2# . 12052) (reasoning-completeness::key reasoning-completeness::value reasoning-completeness::dtree) reasoning-completeness::value reasoning-completeness::dtree-first #:g1430 #:g1431 si::elt-set reasoning-completeness::dtree-rest #:g1432 #:g1433 reasoning-completeness::dtree-var reasoning-completeness::lookup-atom #Y(reasoning-completeness::dtree-index nil nil (24 45 396 24 45 403 24 45 349 26 10 2 16 75 39 83 10 2 4 12 13 1 13 0 19 1 404 73 40 23 10 0 45 405 19 0 360 45 406 13 1 9 0 13 0 19 3 407 43 1 43 1 12 19 3 397 10 2 5 12 13 1 13 0 19 1 408 73 40 23 10 0 45 409 19 0 360 45 410 13 1 9 1 13 0 19 3 407 43 1 43 1 12 19 3 397 38 40 10 2 76 73 40 34 13 2 19 1 16 39 14 13 1 13 0 19 1 411 12 19 2 334 38 14 13 1 13 2 13 0 19 2 412 12 19 2 334 29) #1# #2# 12052) "Index value under all atoms of key in 
  dtree." (defun reasoning-completeness::lookup-atom) (#2# . 12807) (atom reasoning-completeness::dtree) reasoning-completeness::dtree-atoms reasoning-completeness::new #:g1439 #:g1437 #:g1438 #Y(reasoning-completeness::lookup-atom nil nil (24 45 99 24 45 349 26 13 1 13 0 19 1 418 12 19 2 47 73 40 43 19 0 316 45 419 13 2 10 0 3 45 420 10 2 45 421 13 1 13 0 19 1 418 3 45 422 13 1 9 2 13 0 19 3 407 43 3 10 0 73 43 1 29) #1# #2# 12807) "Return (or create) the nlist for this
  atom in dtree." reasoning-completeness::test-index (defun reasoning-completeness::test-index) (#2# . 13057) ((reasoning-completeness::p reasoning-completeness::a reasoning-completeness::b) (reasoning-completeness::p reasoning-completeness::a reasoning-completeness::c) (reasoning-completeness::p reasoning-completeness::a reasoning-completeness::?x) (reasoning-completeness::p reasoning-completeness::b reasoning-completeness::c) (reasoning-completeness::p reasoning-completeness::b (reasoning-completeness::f reasoning-completeness::c)) (reasoning-completeness::p reasoning-completeness::a (reasoning-completeness::f . reasoning-completeness::?x))) reasoning-completeness::props reasoning-completeness::p :circle :array :pretty write #Y(reasoning-completeness::test-index nil nil (26 1 428 45 429 19 0 384 33 392 12 13 0 19 2 157 13 0 15 430 19 1 375 6 2 12 14 431 14 80 14 432 14 80 14 433 14 80 19 7 434 43 1 0 29) #1# #2# 13057) reasoning-completeness::fetch (defun reasoning-completeness::fetch) (#2# . 13414) (reasoning-completeness::query) reasoning-completeness::query reasoning-completeness::dtree-fetch #Y(reasoning-completeness::fetch nil nil (24 45 440 26 13 0 13 0 19 1 128 12 19 1 375 12 77 9 0 77 14 205 19 6 441 29) #1# #2# 13414) "Return a list of buckets potentially
  matching the query, which must be a 
  relation of the form (predicate . args)." (defun reasoning-completeness::dtree-fetch) (#2# . 13708) (reasoning-completeness::pat reasoning-completeness::dtree reasoning-completeness::var-list-in reasoning-completeness::var-n-in reasoning-completeness::best-list reasoning-completeness::best-n) reasoning-completeness::pat reasoning-completeness::var-list-in reasoning-completeness::var-n-in reasoning-completeness::best-list reasoning-completeness::best-n reasoning-completeness::var-nlist reasoning-completeness::var-n reasoning-completeness::var-list >= reasoning-completeness::dtree-atom-fetch reasoning-completeness::n1 reasoning-completeness::list1 #Y(reasoning-completeness::dtree-fetch nil nil (24 45 447 24 45 349 24 45 448 24 45 449 24 45 450 24 45 451 26 10 4 76 40 11 10 5 76 40 6 13 5 19 1 16 39 9 13 1 13 0 72 2 38 135 13 4 19 1 411 45 452 13 3 13 0 19 1 321 12 19 2 221 45 453 13 1 19 1 328 76 39 5 10 5 38 10 13 1 19 1 328 12 10 5 3 45 454 13 1 13 3 19 2 455 39 9 13 4 13 3 72 2 38 73 10 8 16 99 39 18 13 8 13 7 13 0 13 1 13 4 13 3 19 6 456 38 50 10 8 4 12 13 7 19 1 404 12 13 0 13 1 13 4 13 3 19 6 441 47 1 457 45 458 10 10 5 12 13 9 19 1 408 12 13 2 13 3 13 0 13 1 19 6 441 43 2 43 3 29) #1# #2# 13708) "Return two values: a list of possible
  matches to pat, and the number of 
  elements in the list-of-lists." (defun reasoning-completeness::dtree-atom-fetch) (#2# . 15148) (atom reasoning-completeness::dtree reasoning-completeness::var-list reasoning-completeness::var-n reasoning-completeness::best-list reasoning-completeness::best-n) reasoning-completeness::atom-nlist #:g1443 < #Y(reasoning-completeness::dtree-atom-fetch nil nil (24 45 99 24 45 349 24 45 454 24 45 453 24 45 450 24 45 451 26 13 5 13 4 19 1 418 12 19 2 47 45 464 10 0 76 40 7 13 0 19 1 328 76 39 9 13 4 13 3 72 2 38 53 10 0 39 25 13 0 19 1 321 45 465 13 4 13 0 19 2 221 51 4 12 43 1 13 1 19 2 466 39 17 13 0 19 1 328 12 10 4 3 12 13 3 72 2 38 7 13 2 13 1 72 2 43 1 29) #1# #2# 15148) "Return the answers indexed at this atom
  (along with the vars), or return the 
  previous best answer, if it is better." (inline reasoning-completeness::mapc-retrieve) proclaim reasoning-completeness::mapc-retrieve (defun reasoning-completeness::mapc-retrieve) (#2# . 15969) (reasoning-completeness::fn reasoning-completeness::query) reasoning-completeness::fn reasoning-completeness::bucket reasoning-completeness::answer #Y(reasoning-completeness::mapc-retrieve nil nil (24 45 475 24 45 440 26 13 0 19 1 436 45 234 38 64 10 0 4 45 476 10 0 45 234 38 40 10 0 4 45 477 13 4 13 0 19 2 69 45 36 13 0 11 2 17 58 76 39 8 13 6 13 0 20 1 23 43 1 10 1 5 51 1 43 1 10 0 40 -42 43 1 10 1 5 51 1 43 1 10 0 40 -66 75 73 43 1 29) #1# #2# 15969) "For every fact that matches the query, 
  apply fn to the binding list." reasoning-completeness::retrieve (defun reasoning-completeness::retrieve) (#2# . 16258) (reasoning-completeness::query) reasoning-completeness::answers #Y(nil nil nil (24 45 36 26 13 0 10 1 3 51 1 73 29) #1# #2# 16258) #Y(reasoning-completeness::retrieve nil nil (24 45 440 26 75 45 484 34 485 12 13 1 19 2 471 10 0 73 43 1 29) #1# #2# 16258) "Find all facts that match query. 
   Return a list of bindings." reasoning-completeness::retrieve-matches (defun reasoning-completeness::retrieve-matches) (#2# . 16490) (reasoning-completeness::query) #Y(nil nil nil (24 45 36 26 13 0 13 1 19 2 95 29) #1# #2# 16490) #Y(reasoning-completeness::retrieve-matches nil nil (24 45 440 26 34 492 12 13 0 19 1 480 12 19 2 245 29) #1# #2# 16490) "Find all facts that match query.
  Return a list of expressions that
  match the query." reasoning-completeness::query-bind (defmacro reasoning-completeness::query-bind) (#2# . 16724) (reasoning-completeness::variables reasoning-completeness::query &body reasoning-completeness::body) #:g1447 #:g1446 #:g1448 si::dm-too-few-arguments reasoning-completeness::variables reasoning-completeness::body "BINDINGS" #Y(nil nil nil (24 45 35 26 13 0 15 95 13 1 15 304 10 0 6 2 6 3 6 2 73 29) #1# #2# 16724) reasoning-completeness::vars-and-vals lambda let #Y(reasoning-completeness::query-bind nil nil (24 45 499 24 45 500 26 10 1 5 45 501 10 0 76 39 6 13 2 19 1 502 10 0 4 12 10 0 5 51 0 22 45 503 10 1 76 39 6 13 3 19 1 502 10 1 4 12 10 1 5 51 1 22 45 440 10 2 45 504 15 505 19 1 243 45 36 34 506 12 13 3 19 2 245 45 507 15 471 15 29 15 508 10 1 6 1 12 15 509 13 0 10 2 7 3 6 3 6 2 12 10 3 6 3 73 43 2 29) #1# #2# 16724) "Execute body for each match to the 
  query. Within the body, bind each 
  variable.")) #2# 0) #Y(si::bytecodes nil nil (15 2 75 17 3 15 2 15 4 15 5 19 3 6 15 2 15 7 15 8 15 9 19 4 10 1 2 73 29) #1# #2# 150) #Y(si::bytecodes nil nil (15 11 1 12 17 3 15 11 15 4 15 13 19 3 6 15 11 15 7 15 14 15 15 19 4 10 1 11 73 29) #1# #2# 477) #Y(si::bytecodes nil nil (15 16 15 7 15 17 15 18 19 4 10 15 16 14 19 77 15 20 19 4 10 15 16 1 27 12 19 2 28 15 16 15 29 15 30 19 3 6 1 16 73 29) #1# #2# 570) #Y(si::bytecodes nil nil (15 31 15 7 15 32 15 33 19 4 10 15 31 14 19 77 15 34 19 4 10 15 31 1 38 12 19 2 28 15 31 15 29 15 39 19 3 6 1 31 73 29) #1# #2# 789) #Y(si::bytecodes nil nil (15 40 15 7 15 41 15 42 19 4 10 15 40 14 19 77 15 43 19 4 10 15 40 1 45 12 19 2 28 15 40 15 29 15 46 19 3 6 1 40 73 29) #1# #2# 904) #Y(si::bytecodes nil nil (15 47 15 7 15 48 15 49 19 4 10 15 47 14 19 77 15 50 19 4 10 15 47 1 51 12 19 2 28 15 47 15 29 15 52 19 3 6 1 47 73 29) #1# #2# 995) #Y(si::bytecodes nil nil (15 53 15 7 15 54 15 55 19 4 10 15 53 14 19 77 15 56 19 4 10 15 53 1 59 12 19 2 28 15 53 15 29 15 60 19 3 6 1 53 73 29) #1# #2# 1126) #Y(si::bytecodes nil nil (15 61 15 7 15 62 15 63 19 4 10 15 61 14 19 77 15 64 19 4 10 15 61 1 67 12 19 2 28 15 61 15 29 15 68 19 3 6 1 61 73 29) #1# #2# 1457) #Y(si::bytecodes nil nil (15 69 15 7 15 70 15 71 19 4 10 15 69 14 19 77 15 72 19 4 10 15 69 1 76 12 19 2 28 15 69 15 29 15 77 19 3 6 1 69 73 29) #1# #2# 1775) #Y(si::bytecodes nil nil (1 78 16 79 11 80 52 78 15 78 15 4 15 81 19 3 6 15 78 15 7 15 82 15 83 19 4 10 1 78 73 29) #1# #2# 2287) #Y(si::bytecodes nil nil (15 74 15 7 15 84 15 85 19 4 10 15 74 14 19 77 15 86 19 4 10 15 74 1 88 12 19 2 28 15 74 15 29 15 89 19 3 6 1 74 73 29) #1# #2# 2359) #Y(si::bytecodes nil nil (15 87 15 7 15 90 15 91 19 4 10 15 87 14 19 77 15 92 19 4 10 15 87 1 93 12 19 2 28 15 87 15 29 15 94 19 3 6 1 87 73 29) #1# #2# 2911) #Y(si::bytecodes nil nil (15 95 15 7 15 96 15 97 19 4 10 15 95 14 19 77 15 98 19 4 10 15 95 1 101 12 19 2 28 15 95 15 29 15 102 19 3 6 1 95 73 29) #1# #2# 3345) #Y(si::bytecodes nil nil (15 103 15 7 15 104 15 105 19 4 10 15 103 14 19 77 15 106 19 4 10 15 103 1 107 12 19 2 28 15 103 15 29 15 108 19 3 6 1 103 73 29) #1# #2# 3880) #Y(si::bytecodes nil nil (15 109 15 7 15 110 15 111 19 4 10 15 109 14 19 77 15 112 19 4 10 15 109 1 114 12 19 2 28 1 109 73 29) #1# #2# 4001) #Y(si::bytecodes nil nil (15 115 15 7 15 116 15 117 19 4 10 15 115 14 19 77 15 118 19 4 10 15 115 1 119 12 19 2 28 1 115 73 29) #1# #2# 4110) #Y(si::bytecodes nil nil (15 120 15 7 15 121 15 122 19 4 10 15 120 14 19 77 15 123 19 4 10 15 120 1 127 12 19 2 28 1 120 73 29) #1# #2# 4156) #Y(si::bytecodes nil nil (15 128 15 7 15 129 15 130 19 4 10 15 128 14 19 77 15 131 19 4 10 15 128 1 133 12 19 2 28 1 128 73 29) #1# #2# 4257) #Y(si::bytecodes nil nil (1 134 16 79 1 134 16 135 76 39 4 75 52 134 15 134 15 7 15 136 15 137 19 4 10 1 134 73 29) #1# #2# 4306) #Y(si::bytecodes nil nil (15 138 15 7 15 139 15 140 19 4 10 15 138 14 19 77 15 141 19 4 10 15 138 1 151 12 19 2 28 15 138 15 29 15 152 19 3 6 1 138 73 29) #1# #2# 4336) #Y(si::bytecodes nil nil (15 153 15 7 15 154 15 155 19 4 10 15 153 14 19 77 77 19 4 10 15 153 1 158 12 19 2 28 15 153 15 29 15 159 19 3 6 1 153 73 29) #1# #2# 4822) #Y(si::bytecodes nil nil (15 156 15 7 15 160 15 161 19 4 10 15 156 14 19 77 15 162 19 4 10 15 156 1 166 12 19 2 28 15 156 15 29 15 167 19 3 6 1 156 73 29) #1# #2# 4951) #Y(si::bytecodes nil nil (1 168 16 79 1 168 16 135 76 39 4 75 52 168 15 168 15 4 15 169 19 3 6 15 168 15 7 15 170 15 171 19 4 10 1 168 73 29) #1# #2# 5076) #Y(si::bytecodes nil nil (15 172 15 7 15 173 15 174 19 4 10 15 172 14 19 77 15 175 19 4 10 15 172 1 179 12 19 2 28 15 172 15 29 15 180 19 3 6 1 172 73 29) #1# #2# 5148) #Y(si::bytecodes nil nil (15 178 15 7 15 181 15 182 19 4 10 15 178 14 19 77 15 183 19 4 10 15 178 34 194 12 19 2 28 15 178 15 29 15 195 19 3 6 1 178 73 29) #1# #2# 5495) #Y(si::bytecodes nil nil (1 196 16 79 8 5 52 196 15 196 15 4 15 197 19 3 6 15 196 15 7 15 198 15 199 19 4 10 1 196 73 29) #1# #2# 6696) #Y(si::bytecodes nil nil (1 200 16 79 8 5 52 200 15 200 15 4 15 201 19 3 6 15 200 15 7 15 202 15 203 19 4 10 1 200 73 29) #1# #2# 6808) #Y(si::bytecodes nil nil (1 204 16 79 11 205 52 204 15 204 15 4 15 206 19 3 6 15 204 15 7 15 207 15 208 19 4 10 1 204 73 29) #1# #2# 6921) #Y(si::bytecodes nil nil (15 209 15 7 15 210 15 211 19 4 10 15 209 14 19 77 15 212 19 4 10 15 209 1 224 12 19 2 28 1 209 73 29) #1# #2# 7021) #Y(si::bytecodes nil nil (15 213 15 7 15 225 15 226 19 4 10 15 213 14 19 77 15 227 19 4 10 15 213 1 237 12 19 2 28 15 213 15 29 15 238 19 3 6 1 213 73 29) #1# #2# 7553) #Y(si::bytecodes nil nil (15 188 15 7 15 239 15 240 19 4 10 15 188 14 19 77 15 241 19 4 10 15 188 1 247 12 19 2 28 15 188 15 29 15 248 19 3 6 1 188 73 29) #1# #2# 8393) #Y(si::bytecodes nil nil (15 214 15 7 15 249 15 250 19 4 10 15 214 14 19 77 15 251 19 4 10 15 214 1 254 12 19 2 28 15 214 15 29 15 255 19 3 6 1 214 73 29) #1# #2# 8606) #Y(si::bytecodes nil nil (15 253 15 7 15 256 15 257 19 4 10 15 253 14 19 77 15 258 19 4 10 15 253 1 261 12 19 2 28 15 253 15 29 15 262 19 3 6 1 253 73 29) #1# #2# 8731) #Y(si::bytecodes nil nil (15 263 15 7 15 264 15 265 19 4 10 15 263 14 19 77 15 266 19 4 10 15 263 34 271 12 19 2 28 15 263 15 29 15 272 19 3 6 1 263 73 29) #1# #2# 9200) #Y(si::bytecodes nil nil (15 142 15 7 15 273 15 274 19 4 10 15 142 14 19 77 15 275 19 4 10 15 142 1 276 12 19 2 28 1 142 73 29) #1# #2# 9469) #Y(si::bytecodes nil nil (1 213 45 277 1 125 45 278 1 213 45 279 13 2 13 0 13 1 19 3 150 43 1 43 2 29) #1# #2# 9536) #Y(si::bytecodes nil nil (15 236 15 7 15 280 15 281 19 4 10 15 236 14 19 77 77 19 4 10 15 236 1 287 12 19 2 28 15 236 15 29 15 288 19 3 6 1 236 73 29) #1# #2# 9608) #Y(si::bytecodes nil nil (15 289 15 7 15 290 15 291 19 4 10 15 289 14 19 77 15 292 19 4 10 15 289 1 295 12 19 2 28 15 289 15 29 15 296 19 3 6 1 289 73 29) #1# #2# 9877) #Y(si::bytecodes nil nil (15 297 15 7 15 298 15 299 19 4 10 15 297 14 19 77 15 300 19 4 10 15 297 1 305 12 14 80 9 1 19 4 28 15 297 15 29 15 306 19 3 6 1 297 73 29) #1# #2# 10243) #Y(si::bytecodes nil nil (15 307 15 7 15 308 15 309 19 4 10 15 307 14 19 77 15 310 19 4 10 15 307 1 314 12 14 80 9 1 19 4 28 15 307 15 29 15 315 19 3 6 1 307 73 29) #1# #2# 10354) #Y(si::bytecodes nil nil (15 316 15 7 15 317 15 318 19 4 10 15 316 14 19 77 77 19 4 10 15 316 1 319 12 19 2 28 15 316 15 29 15 320 19 3 6 1 316 73 29) #1# #2# 10471) #Y(si::bytecodes nil nil (15 321 15 7 15 322 15 323 19 4 10 15 321 14 19 77 15 324 19 4 10 15 321 1 326 12 19 2 28 15 321 15 29 15 327 19 3 6 1 321 73 29) #1# #2# 10608) #Y(si::bytecodes nil nil (15 328 15 7 15 329 15 330 19 4 10 15 328 14 19 77 15 331 19 4 10 15 328 1 332 12 19 2 28 15 328 15 29 15 333 19 3 6 1 328 73 29) #1# #2# 10698) #Y(si::bytecodes nil nil (15 334 15 7 15 335 15 336 19 4 10 15 334 14 19 77 15 337 19 4 10 15 334 1 347 12 19 2 28 15 334 15 29 15 348 19 3 6 1 334 73 29) #1# #2# 10777) #Y(si::bytecodes nil nil (15 349 15 350 15 351 77 15 352 15 353 15 354 77 77 77 15 355 9 4 77 77 77 19 15 356 15 357 15 7 15 358 15 359 19 4 10 15 360 15 7 15 361 15 362 19 4 10 15 360 14 19 77 15 363 19 4 10 15 360 1 373 12 19 2 28 1 349 73 29) #1# #2# 10892) #Y(si::bytecodes nil nil (75 45 374 15 375 15 7 15 376 15 377 19 4 10 15 375 14 19 77 15 378 19 4 10 15 375 34 382 12 19 2 28 15 375 15 29 15 383 19 3 6 15 384 15 7 15 385 15 386 19 4 10 15 384 14 19 77 77 19 4 10 15 384 34 390 12 19 2 28 15 384 15 29 15 391 19 3 6 1 384 73 43 1 29) #1# #2# 11186) #Y(si::bytecodes nil nil (15 392 15 7 15 393 15 394 19 4 10 15 392 14 19 77 15 395 19 4 10 15 392 1 398 12 19 2 28 15 392 15 29 15 399 19 3 6 1 392 73 29) #1# #2# 11758) #Y(si::bytecodes nil nil (15 397 15 7 15 400 15 401 19 4 10 15 397 14 19 77 15 402 19 4 10 15 397 1 413 12 19 2 28 15 397 15 29 15 414 19 3 6 1 397 73 29) #1# #2# 12052) #Y(si::bytecodes nil nil (15 412 15 7 15 415 15 416 19 4 10 15 412 14 19 77 15 417 19 4 10 15 412 1 423 12 19 2 28 15 412 15 29 15 424 19 3 6 1 412 73 29) #1# #2# 12807) #Y(si::bytecodes nil nil (15 425 15 7 15 426 15 427 19 4 10 15 425 14 19 77 77 19 4 10 15 425 1 435 12 19 2 28 1 425 73 29) #1# #2# 13057) #Y(si::bytecodes nil nil (15 436 15 7 15 437 15 438 19 4 10 15 436 14 19 77 15 439 19 4 10 15 436 1 442 12 19 2 28 15 436 15 29 15 443 19 3 6 1 436 73 29) #1# #2# 13414) #Y(si::bytecodes nil nil (15 441 15 7 15 444 15 445 19 4 10 15 441 14 19 77 15 446 19 4 10 15 441 1 459 12 19 2 28 15 441 15 29 15 460 19 3 6 1 441 73 29) #1# #2# 13708) #Y(si::bytecodes nil nil (15 456 15 7 15 461 15 462 19 4 10 15 456 14 19 77 15 463 19 4 10 15 456 1 467 12 19 2 28 15 456 15 29 15 468 19 3 6 1 456 73 29) #1# #2# 15148) #Y(si::bytecodes nil nil (1 469 16 470 29) #1# #2# 15925) #Y(si::bytecodes nil nil (15 471 15 7 15 472 15 473 19 4 10 15 471 14 19 77 15 474 19 4 10 15 471 1 478 12 19 2 28 15 471 15 29 15 479 19 3 6 1 471 73 29) #1# #2# 15969) #Y(si::bytecodes nil nil (15 480 15 7 15 481 15 482 19 4 10 15 480 14 19 77 15 483 19 4 10 15 480 34 486 12 19 2 28 15 480 15 29 15 487 19 3 6 1 480 73 29) #1# #2# 16258) #Y(si::bytecodes nil nil (15 488 15 7 15 489 15 490 19 4 10 15 488 14 19 77 15 491 19 4 10 15 488 34 493 12 19 2 28 15 488 15 29 15 494 19 3 6 1 488 73 29) #1# #2# 16490) #Y(si::bytecodes nil nil (15 495 15 7 15 496 15 497 19 4 10 15 495 14 19 77 15 498 19 4 10 15 495 34 510 12 14 80 9 3 19 4 28 15 495 15 29 15 511 19 3 6 1 495 73 29) #1# #2# 16724))
