(#Y(si::bytecodes nil nil (1 0 16 1 29) #1=#A(t (551) ("CANONICAL" si::select-package (inline canonical::main-var canonical::degree canonical::coef canonical::var= canonical::var> canonical::poly canonical::make-poly) proclaim canonical::polynomial (deftype canonical::polynomial nil (quote simple-vector)) simple-vector si::do-deftype canonical::main-var ext::location (defun canonical::main-var) (#2=#P"/data/data/org.eql5.android.repl/files/quicklisp/local-projects/paip/ch-15.lisp" . 1251) ext::annotate :lambda-list (canonical::p) canonical::p svref #Y(canonical::main-var nil nil (24 45 15 26 13 0 8 0 17 16 29) #1# #2# 1251) si::fset canonical::degree (defun canonical::degree) (#2# . 1304) (canonical::p) length - #Y(canonical::degree nil nil (24 45 15 26 10 0 16 23 12 9 2 19 2 24 29) #1# #2# 1304) canonical::coef (defun canonical::coef) (#2# . 1362) (canonical::p canonical::i) canonical::i 1+ #Y(canonical::coef nil nil (24 45 15 24 45 30 26 13 1 10 0 16 31 17 16 29) #1# #2# 1362) canonical::poly (defun canonical::poly) (#2# . 1418) (canonical::x &rest canonical::coefs) canonical::x canonical::coefs vector apply #Y(canonical::poly nil nil (24 45 37 27 45 38 33 39 12 13 1 13 0 19 3 40 29) #1# #2# 1418) function "Make a polynomial with main variable 
  and coefficients in increasing order." si::set-documentation (defsetf canonical::main-var) (#2# . 1645) canonical::val setf the #Y(nil nil nil (24 45 47 24 45 15 26 15 48 15 16 15 49 15 4 10 0 6 3 12 8 0 6 3 12 10 1 6 3 73 29) #1# #2# 1645) si::do-defsetf canonical::make-poly (defun canonical::make-poly) (#2# . 1720) (canonical::x canonical::degree) + :initial-element make-array #:g1580 #:g1581 si::svset #Y(canonical::make-poly nil nil (24 45 37 24 45 19 26 13 0 9 2 19 2 56 12 14 57 9 0 19 3 58 45 15 10 0 45 59 10 3 45 60 13 1 9 0 13 0 19 3 61 43 1 43 1 10 0 73 43 1 29) #1# #2# 1720) "Make the polynomial 0 + 0x + 0x^2 + 
  0x^3 + ... + 0x^degree." (defsetf canonical::coef) (#2# . 1921) #Y(nil nil nil (24 45 47 24 45 15 24 45 30 26 15 48 15 16 15 49 15 4 10 1 6 3 12 15 31 10 0 6 2 6 3 12 10 2 6 3 73 29) #1# #2# 1921) canonical::prefix->canon% (defun canonical::prefix->canon%) (#2# . 2028) (canonical::x) numberp symbolp symbolic::expp symbolic::exp-op canonical::prefix->canon get symbolic::exp-args mapcar "Not a polynomial: ~A" error #Y(canonical::prefix->canon% nil nil (24 45 37 26 10 0 16 71 39 6 10 0 73 38 75 10 0 16 72 39 12 13 0 9 0 9 1 19 3 33 38 58 13 0 19 1 73 39 12 13 0 19 1 74 12 15 75 19 2 76 39 31 13 0 19 1 74 12 15 75 19 2 76 12 33 75 12 13 0 19 1 77 12 19 2 78 12 19 2 40 38 8 15 79 13 0 19 2 80 29) #1# #2# 2028) "Convert a prefix Lisp expression to 
  a polynomial canonical form. E.g.:
  (+ (^ x 2) (* 3 x)) => #(x 0 3 1);
  (- (* (- x 1) (+ x 1)) (- (^ x 2) 1)) 
  => 0" ((+ canonical::poly+) (- canonical::poly-) (* canonical::poly*poly) (canonical::^ canonical::poly^n) (canonical::d canonical::deriv-poly) (canonical::i canonical::integ-poly)) si::%dolist-var canonical::item #:g1587 #:g1588 second #:g1589 si::putprop canonical::poly+ (defun canonical::poly+) (#2# . 2834) (&rest canonical::args) canonical::args #:g1591 1 2 canonical::poly+poly (1 2) si::ecase-error #Y(canonical::poly+ nil nil (27 45 95 10 0 16 23 45 96 10 0 42 97 7 10 1 4 73 38 24 42 98 15 10 1 4 12 10 1 16 88 12 19 2 99 38 7 13 0 1 100 17 101 43 1 29) #1# #2# 2834) "Unary or binary polynomial addition." canonical::poly- (defun canonical::poly-) (#2# . 3022) (&rest canonical::args) #:g1593 canonical::poly*poly (1 2) #Y(canonical::poly- nil nil (27 45 95 10 0 16 23 45 108 10 0 42 97 12 9 -1 10 1 4 12 19 2 109 38 30 42 98 21 10 1 4 12 9 -1 10 1 16 88 12 19 2 109 12 19 2 99 38 7 13 0 1 110 17 101 43 1 29) #1# #2# 3022) "Unary or binary polynomial subtraction." canonical::var= (defun canonical::var=) (#2# . 3268) (canonical::x canonical::y) canonical::y eq #Y(canonical::var= nil nil (24 45 37 24 45 117 26 13 1 10 0 17 118 29) #1# #2# 3268) canonical::var> (defun canonical::var>) (#2# . 3430) (canonical::x canonical::y) string> #Y(canonical::var> nil nil (24 45 37 24 45 117 26 13 1 13 0 19 2 124 29) #1# #2# 3430) (defun canonical::poly+poly) (#2# . 3466) (canonical::p canonical::q) canonical::q canonical::k+poly canonical::poly+same canonical::normalize-poly #Y(canonical::poly+poly nil nil (24 45 15 24 45 129 26 10 1 16 71 39 10 13 1 13 0 19 2 130 38 75 10 0 16 71 39 10 13 0 13 1 19 2 130 38 60 13 1 19 1 8 12 13 0 19 1 8 12 19 2 113 39 10 13 1 13 0 19 2 131 38 34 13 0 19 1 8 12 13 1 19 1 8 12 19 2 120 39 10 13 0 13 1 19 2 130 38 8 13 1 13 0 19 2 130 12 19 1 132 29) #1# #2# 3466) "Add two polynomials." (defun canonical::k+poly) (#2# . 3840) (canonical::k canonical::p) canonical::k eql canonical::copy-poly canonical::r #:g1599 #:g1600 #Y(canonical::k+poly nil nil (24 45 138 24 45 15 26 13 1 8 0 17 139 39 6 10 0 73 38 69 10 1 16 71 39 5 10 0 16 71 39 10 13 1 13 0 19 2 56 38 48 13 0 19 1 140 45 141 10 0 45 142 13 1 9 0 19 2 26 12 13 3 19 2 99 45 143 13 1 8 0 16 31 12 13 0 19 3 61 43 1 43 1 10 0 73 43 1 29) #1# #2# 3840) "Add a constant, k, to a polynomial, p." (defun canonical::poly+same) (#2# . 4088) (canonical::p canonical::q) > #:loop-limit1617 0 #:g1624 #:g1625 #:g1626 #Y(canonical::poly+same nil nil (24 45 15 24 45 129 26 13 1 19 1 19 12 13 0 19 1 19 12 19 2 149 39 10 13 0 13 1 19 2 131 38 100 13 0 19 1 140 45 141 9 0 13 2 19 1 19 12 46 150 46 30 57 151 61 2 2 67 13 1 13 2 19 2 149 39 4 35 0 1 10 3 45 152 10 2 45 153 13 5 13 3 19 2 26 12 13 7 13 3 19 2 26 12 19 2 99 45 154 13 2 10 1 16 31 12 13 0 19 3 61 43 1 43 2 10 1 16 31 51 1 35 0 0 62 43 2 10 0 73 43 1 29) #1# #2# 4088) "Add two polynomials with the same main 
  variable." (defun canonical::copy-poly) (#2# . 4548) (canonical::p) copy-seq #Y(canonical::copy-poly nil nil (24 45 15 26 10 0 16 160 29) #1# #2# 4548) "Make a copy of a polynomial" (defun canonical::poly*poly) (#2# . 4618) (canonical::p canonical::q) canonical::k*poly canonical::poly*same #Y(canonical::poly*poly nil nil (24 45 15 24 45 129 26 10 1 16 71 39 10 13 1 13 0 19 2 166 38 75 10 0 16 71 39 10 13 0 13 1 19 2 166 38 60 13 1 19 1 8 12 13 0 19 1 8 12 19 2 113 39 10 13 1 13 0 19 2 167 38 34 13 0 19 1 8 12 13 1 19 1 8 12 19 2 120 39 10 13 0 13 1 19 2 166 38 8 13 1 13 0 19 2 166 12 19 1 132 29) #1# #2# 4618) "Muptiply two polynomials" (defun canonical::k*poly) (#2# . 4916) (canonical::k canonical::p) * #:loop-limit1643 #:g1650 #:g1651 #:g1652 #Y(canonical::k*poly nil nil (24 45 138 24 45 15 26 13 1 8 0 17 139 39 6 8 0 73 38 138 13 1 8 1 17 139 39 6 10 0 73 38 125 10 1 16 71 39 5 10 0 16 71 39 10 13 1 13 0 19 2 173 38 104 13 0 19 1 8 12 13 0 19 1 19 12 19 2 52 45 141 9 0 13 1 19 1 19 12 46 174 46 30 57 151 61 2 2 61 13 1 13 2 19 2 149 39 4 35 0 1 10 3 45 175 10 2 45 176 13 7 13 6 13 3 19 2 26 12 19 2 109 45 177 13 2 10 1 16 31 12 13 0 19 3 61 43 1 43 2 10 1 16 31 51 1 35 0 0 62 43 2 10 0 73 43 1 29) #1# #2# 4916) "Multiply a polynomial, p, by a 
  constant factor, k." (defun canonical::poly*same) (#2# . 5407) (canonical::p canonical::q) canonical::r-degree #:loop-limit1683 #:loop-limit1697 canonical::j #:g1704 #:g1705 #:g1706 #Y(canonical::poly*same nil nil (24 45 15 24 45 129 26 13 1 19 1 19 12 13 0 19 1 19 12 19 2 56 45 183 13 2 19 1 8 12 13 0 19 2 52 45 141 9 0 13 3 19 1 19 12 46 184 46 30 57 151 61 2 2 147 13 1 13 2 19 2 149 39 4 35 0 1 13 6 13 1 19 2 26 12 8 0 17 139 76 39 111 9 0 13 5 19 1 19 12 46 185 46 186 57 151 61 2 2 90 13 1 13 2 19 2 149 39 4 35 0 1 10 6 45 187 13 5 13 2 19 2 56 45 188 13 8 13 6 13 3 19 2 56 12 19 2 26 12 13 11 13 6 19 2 26 12 13 10 13 3 19 2 26 12 19 2 109 12 19 2 99 45 189 13 2 10 1 16 31 12 13 0 19 3 61 43 1 43 2 10 1 16 31 51 1 35 0 0 62 43 2 10 1 16 31 51 1 35 0 0 62 43 2 10 0 73 43 2 29) #1# #2# 5407) "Multiply two polynomials with the same
  variable." (defun canonical::normalize-poly) (#2# . 5972) (canonical::p) :test complement :from-end t position canonical::p-degree <= < :start delete #Y(canonical::normalize-poly nil nil (24 45 15 26 10 0 16 71 39 6 10 0 73 38 80 9 0 13 0 14 195 33 139 16 196 12 14 197 14 198 19 6 199 12 9 1 19 2 24 45 200 13 0 9 0 19 2 201 39 14 13 1 9 0 19 2 26 12 19 1 132 38 30 13 0 13 1 19 1 19 12 19 2 202 39 14 9 0 13 1 14 203 13 0 19 4 204 38 4 10 1 73 43 1 29) #1# #2# 5972) "Alter a poly by deleting trailing zeros." canonical::poly^n% (defun canonical::poly^n%) (#2# . 6432) (canonical::p canonical::n) canonical::n #:g1712 (integer 0 *) typep si::do-check-type = (not (eql canonical::p 0)) si::assert-failure canonical::poly^n #Y(canonical::poly^n% nil nil (24 45 15 24 45 211 26 10 0 45 212 13 0 15 213 19 2 214 76 39 13 13 0 15 213 77 15 211 19 4 215 51 1 43 1 13 0 9 0 19 2 216 39 23 38 6 15 217 19 1 218 13 1 8 0 17 139 76 76 40 -14 8 1 73 38 20 13 1 13 1 13 0 9 1 19 2 24 12 19 2 219 12 19 2 109 29) #1# #2# 6432) "Raise polynomial to the nth power, 
  n >= 0." canonical::deriv-poly (defun canonical::deriv-poly) (#2# . 6654) (canonical::p canonical::x) (and (typep canonical::x (quote canonical::polynomial)) (= (canonical::degree canonical::x) 1) (eql (canonical::coef canonical::x 0) 0) (eql (canonical::coef canonical::x 1) 1)) subseq #:g1744 #:g1745 #:loop-limit1748 #:g1755 #:g1756 #:g1757 #:loop-limit1761 #:g1768 #:g1769 #:g1770 #Y(canonical::deriv-poly nil nil (24 45 15 24 45 37 26 38 6 15 226 19 1 218 13 0 15 4 19 2 214 39 40 13 0 19 1 19 12 9 1 19 2 216 39 27 13 0 9 0 19 2 26 12 8 0 17 139 39 13 13 0 9 1 19 2 26 12 8 1 17 139 76 40 -55 10 1 16 71 39 6 8 0 73 38 264 13 1 19 1 8 12 13 0 19 1 8 12 19 2 120 39 6 8 0 73 38 242 13 1 19 1 8 12 13 0 19 1 8 12 19 2 113 39 130 13 1 9 1 19 2 227 45 141 10 0 45 228 13 2 19 1 8 45 229 13 1 9 0 13 0 19 3 61 43 1 43 1 9 1 13 0 19 1 19 12 46 230 46 30 57 151 61 2 2 67 13 1 13 2 19 2 149 39 4 35 0 1 10 3 45 231 10 2 45 232 13 3 9 1 19 2 56 12 13 5 13 3 19 2 26 12 19 2 109 45 233 13 2 10 1 16 31 12 13 0 19 3 61 43 1 43 2 10 1 16 31 51 1 35 0 0 62 43 2 13 0 19 1 132 43 1 38 96 13 1 19 1 140 45 141 9 0 13 2 19 1 19 12 46 234 46 30 57 151 61 2 2 61 13 1 13 2 19 2 149 39 4 35 0 1 10 3 45 235 10 2 45 236 13 5 13 3 19 2 26 12 13 6 19 2 222 45 237 13 2 10 1 16 31 12 13 0 19 3 61 43 1 43 2 10 1 16 31 51 1 35 0 0 62 43 2 13 0 19 1 132 43 1 29) #1# #2# 6654) "Return the derivative, dp/dx, of 
  the polynomial p." canonical::add-integ-const (defun canonical::add-integ-const) (#2# . 8016) (canonical::p) (canonical::~c 0 1) #Y(canonical::add-integ-const nil nil (24 45 15 26 15 244 13 0 19 2 130 29) #1# #2# 8016) canonical::integ-poly (defun canonical::integ-poly) (#2# . 8776) (canonical::p canonical::x) (and (typep canonical::x (quote canonical::polynomial)) (= (canonical::degree canonical::x) 1) (eql (canonical::coef canonical::x 0) 0) (eql (canonical::coef canonical::x 1) 1)) canonical::integ-aux #Y(canonical::integ-poly nil nil (24 45 15 24 45 37 26 38 6 15 250 19 1 218 13 0 15 4 19 2 214 39 40 13 0 19 1 19 12 9 1 19 2 216 39 27 13 0 9 0 19 2 26 12 8 0 17 139 39 13 13 0 9 1 19 2 26 12 8 1 17 139 76 40 -55 13 1 13 0 19 2 251 12 19 1 240 12 19 1 132 29) #1# #2# 8776) "Integration: ∫ p dx." (defun canonical::integ-aux) (#2# . 9336) (canonical::p canonical::x) canonical::poly-args si::%dotimes-var #:loop-limit1804 #:g1811 #:g1812 / #:g1813 #:loop-limit1817 #:g1824 #:g1825 #:g1826 #Y(canonical::integ-aux nil nil (24 45 15 24 45 37 26 10 1 16 71 40 16 13 1 19 1 8 12 13 0 19 1 8 12 19 2 120 39 16 13 0 19 1 8 12 9 0 13 1 19 3 33 38 275 13 1 19 1 8 12 13 0 19 1 8 12 19 2 113 39 161 9 0 13 0 19 1 8 6 2 45 257 13 2 19 1 19 16 31 45 258 8 0 45 30 38 20 13 4 13 0 19 2 26 12 10 2 3 51 2 10 0 16 31 51 0 13 0 13 1 19 2 202 40 -27 43 2 33 33 12 13 0 19 2 40 45 141 9 2 13 0 19 1 19 12 46 259 46 30 57 151 61 2 2 65 13 1 13 2 19 2 149 39 4 35 0 1 10 3 45 260 10 2 45 261 13 3 19 1 262 12 13 5 13 3 19 2 26 12 19 2 109 45 263 13 2 10 1 16 31 12 13 0 19 3 61 43 1 43 2 10 1 16 31 51 1 35 0 0 62 43 2 10 0 73 43 1 43 1 38 98 13 1 19 1 140 45 141 9 0 13 0 19 1 19 12 46 264 46 30 57 151 61 2 2 65 13 1 13 2 19 2 149 39 4 35 0 1 10 3 45 265 10 2 45 266 13 5 13 3 19 2 26 12 13 6 19 2 251 12 19 1 132 45 267 13 2 10 1 16 31 12 13 0 19 3 61 43 1 43 2 10 1 16 31 51 1 35 0 0 62 43 2 10 0 73 43 1 29) #1# #2# 9336) canonical::eval-poly (defun canonical::eval-poly) (#2# . 9991) (canonical::p canonical::k) canonical::result #:loop-limit1835 canonical::power expt #:g1839 #Y(canonical::eval-poly nil nil (24 45 15 24 45 138 26 10 1 16 71 39 6 10 1 73 38 88 13 1 9 0 19 2 26 45 273 9 1 13 2 19 1 19 12 46 274 46 275 57 151 61 2 2 53 13 1 13 2 19 2 149 39 4 35 0 1 13 5 13 1 19 2 26 12 13 4 10 1 17 276 12 19 2 173 45 277 13 4 13 0 19 2 56 51 4 43 1 10 1 16 31 51 1 35 0 0 62 43 2 10 0 73 43 1 29) #1# #2# 9991) "Given a poly and a numerical constant, 
  return the result of substituting the 
  constant for the main variable in the 
  poly." canonical::poly-calc-interval (defun canonical::poly-calc-interval) (#2# . 10776) (canonical::p canonical::a canonical::b) canonical::a canonical::b #Y(canonical::poly-calc-interval nil nil (24 45 15 24 45 284 24 45 285 26 13 2 13 0 19 2 269 12 13 2 13 1 19 2 269 12 19 2 24 29) #1# #2# 10776) "Given a polynomial, and two endpoints, 
  where a is the lower endpoint, and b 
  the upper, return the difference 
  of evaluating p with b and with a." canonical::def-integ (defun canonical::def-integ) (#2# . 11012) (canonical::p canonical::a canonical::b) canonical::integ #:g1842 #:g1843 (setf canonical::coeff) canonical::poly-calc-interv #Y(canonical::def-integ nil nil (24 45 15 24 45 284 24 45 285 26 13 2 13 2 19 1 8 12 19 2 246 45 292 10 0 45 293 8 0 45 294 13 0 13 1 9 0 33 295 18 3 43 1 43 1 13 0 13 2 13 1 19 3 296 43 1 29) #1# #2# 11012) "Given a polynomial and the endpoints
  of the integration interval, return 
  the definite integral of the polynomial,
  evaluate along the interval." canonical::prefix->infix (defun canonical::prefix->infix) (#2# . 11338) (exp) exp atom canonical::intersperse #Y(canonical::prefix->infix nil nil (24 45 303 26 10 0 16 304 39 6 10 0 73 38 23 13 0 19 1 74 12 33 299 12 13 0 19 1 77 12 19 2 78 12 19 2 305 29) #1# #2# 11338) "Translate prefix to infix expressions.
  Handles operators with any number of 
  args." (defun canonical::intersperse) (#2# . 11694) (canonical::op canonical::args) canonical::op symbolic::length=1 #:loop-list1847 canonical::arg #:loop-list-head1848 #:loop-list-tail1849 rplacd #Y(canonical::intersperse nil nil (24 45 311 24 45 95 26 13 0 19 1 312 39 7 10 0 4 73 38 81 58 60 76 77 13 1 46 313 46 314 75 6 1 45 315 10 0 45 316 57 151 61 2 2 42 10 4 2 39 4 35 0 1 10 4 4 51 3 10 4 5 51 4 13 1 10 7 6 1 51 1 17 317 13 1 10 3 6 1 51 1 17 317 35 0 0 10 2 5 73 36 5 62 43 2 43 2 63 5 73 29) #1# #2# 11694) "Place op between each element of args.
  Ex.: (intersperse '+ '(a b c)) => 
  (a + b + c)" canonical::canon->prefix (defun canonical::canon->prefix) (#2# . 11949) (canonical::p) #:loop-list-head1852 #:loop-list-tail1853 canonical::exponent->prefix canonical::args->prefix 1- #Y(canonical::canon->prefix nil nil (24 45 15 26 10 0 16 71 39 6 10 0 73 38 109 15 56 9 0 58 60 98 13 1 19 1 19 45 30 75 6 1 45 324 10 0 45 325 57 151 61 2 2 63 13 3 9 0 19 2 202 39 4 35 0 1 13 1 15 173 9 1 13 5 13 3 19 2 26 12 19 1 320 12 13 5 19 1 8 12 13 3 19 2 326 6 2 12 19 3 327 6 1 51 1 17 317 10 3 16 328 51 3 35 0 0 10 2 5 73 36 4 62 73 43 2 43 1 63 12 19 3 327 29) #1# #2# 11949) "Convert a canonical polynomial to a 
  Lisp expression." (defun canonical::exponent->prefix) (#2# . 12405) (canonical::base canonical::exponent) canonical::base canonical::exponent canonical::^ #Y(canonical::exponent->prefix nil nil (24 45 334 24 45 335 26 10 0 42 151 6 8 1 73 38 18 42 97 6 10 1 73 38 10 15 336 13 1 10 0 6 3 73 29) #1# #2# 12405) "Convert canonical base^exponent to 
  prefix form" (defun canonical::args->prefix) (#2# . 12571) (canonical::op identity canonical::args) identity remove canonical::useful-args member general-problem-solver::starts-with #Y(nil nil nil (24 45 303 26 13 0 13 4 19 2 346 39 8 13 0 19 1 77 38 6 10 0 6 1 73 29) #1# #2# 12571) alexandria::mappend #Y(canonical::args->prefix nil nil (24 45 311 24 45 342 24 45 95 26 13 1 13 0 19 2 343 45 344 10 0 76 39 6 10 2 73 38 48 13 3 1 173 17 118 39 8 9 0 13 1 19 2 345 39 6 8 0 73 38 26 13 1 19 1 312 39 7 10 0 4 73 38 13 13 3 34 347 12 13 0 19 2 348 3 73 43 1 29) #1# #2# 12571) "Convert arg1 op arg2 op ... op argn
  to (op arg1 arg2 ... argn)." canonical::canon (defun canonical::canon) (#2# . 13067) (canonical::infix-exp) canonical::infix-exp canonical::infix->prefix #Y(canonical::canon nil nil (24 45 355 26 13 0 19 1 356 12 19 1 75 12 19 1 320 12 19 1 299 29) #1# #2# 13067) "Canonicalize argument and convert it 
  back to infix." canonical::canon-simplifier (defun canonical::canon-simplifier) (#2# . 13297) *standard-output* *query-io* make-broadcast-stream canonical::output canonical::canon> print read canonical::input canonical::quit #Y(canonical::canon-simplifier nil nil (26 14 362 14 363 19 2 364 45 365 10 0 48 362 58 60 47 57 151 61 1 1 15 366 19 1 367 19 0 368 45 369 13 0 1 370 17 118 39 7 75 73 36 2 38 10 13 0 19 1 351 12 19 1 367 43 1 35 0 0 62 73 63 43 1 44 1 29) #1# #2# 13297) "Read an expression, canonicalize it, 
  and print the result." canonical::*binary-operators* si::*make-special ((canonical::d . 0) (canonical::e . 0) (+ . 1) (- . 1) (* . 2) (canonical::^ . 3)) (defparameter canonical::*binary-operators*) (#2# . 13669) canonical::*unary-operators* ((+ . 4) (- . 4)) (defparameter canonical::*unary-operators*) (#2# . 13979) canonical::weight (defun canonical::weight) (#2# . 14038) (canonical::c) canonical::c assoc #Y(canonical::weight nil nil (24 45 386 26 13 0 14 373 19 2 387 5 73 29) #1# #2# 14038) (defun canonical::infix->prefix) (#2# . 14103) (canonical::expr) canonical::expr canonical::inf-aux #Y(canonical::infix->prefix nil nil (24 45 392 26 10 0 16 304 39 6 10 0 73 38 8 13 0 77 77 19 3 393 29) #1# #2# 14103) (defun canonical::inf-aux) (#2# . 14192) (canonical::expr canonical::operators canonical::operands) canonical::operators canonical::operands canonical::inf-iter #Y(canonical::inf-aux nil nil (24 45 392 24 45 398 24 45 399 26 10 2 4 16 304 39 10 10 2 4 12 14 378 19 2 387 39 32 10 2 5 5 12 13 1 10 2 4 12 10 2 5 4 12 19 1 356 6 2 12 10 0 3 12 19 3 400 38 22 10 2 5 12 13 1 10 2 4 12 19 1 356 12 10 0 3 12 19 3 400 29) #1# #2# 14192) (defun canonical::inf-iter) (#2# . 14660) (canonical::expr canonical::operators canonical::operands) canonical::list01 #Y(canonical::inf-iter nil nil (24 45 392 24 45 398 24 45 399 26 10 2 76 39 4 10 1 76 39 7 10 0 4 73 38 82 10 2 39 25 10 1 76 40 20 10 2 4 12 19 1 382 12 10 1 4 12 19 1 382 12 19 2 149 39 20 10 2 5 12 10 2 4 12 10 1 3 12 13 0 19 3 393 38 33 13 2 10 1 5 12 10 1 4 12 10 0 5 4 12 10 0 4 12 19 3 405 12 10 0 5 5 3 12 19 3 400 29) #1# #2# 14660) canonical::make-rat (defun canonical::make-rat) (#2# . 15204) (numerator denominator) numerator denominator #Y(canonical::make-rat nil nil (24 45 411 24 45 412 26 10 0 16 71 39 14 13 0 19 1 262 12 13 1 19 2 166 38 7 13 1 10 0 3 73 29) #1# #2# 15204) "Build a rational: a quotient of 
  two polynomials." canonical::rat-numerator (defun canonical::rat-numerator) (#2# . 15710) (canonical::rat) canonical::rat #:g1857 cons number #Y(canonical::rat-numerator nil nil (24 45 419 26 10 0 45 420 13 0 15 421 19 2 214 39 7 10 1 4 73 38 19 13 0 15 422 19 2 214 39 7 10 1 16 411 38 4 10 1 73 43 1 29) #1# #2# 15710) "The numerator of a rational expression" canonical::rat-denominator (defun canonical::rat-denominator) (#2# . 15861) (canonical::rat) #:g1859 #Y(canonical::rat-denominator nil nil (24 45 419 26 10 0 45 429 13 0 15 421 19 2 214 39 7 10 1 5 73 38 19 13 0 15 422 19 2 214 39 7 10 1 16 412 38 4 8 1 73 43 1 29) #1# #2# 15861) "The denominator of a rational expression" (defun canonical::prefix->canon) (#2# . 16016) (canonical::x) #\/ symbol-name canonical::sname canonical::/idx (and (= canonical::/idx (position #\/ canonical::sname :from-end t)) (char/= (char canonical::sname 0) #\/) (char/= (char canonical::sname (1- (length canonical::sname))) #\/)) "Bad rational: %S" char char/= digit-char-p every parse-integer intern consp third "Not a polynomial: ~A" #Y(canonical::prefix->canon nil nil (24 45 37 26 10 0 16 71 39 6 10 0 73 38 381 10 0 16 72 39 11 15 435 10 0 16 436 12 19 2 199 39 238 10 0 16 436 45 437 15 435 13 0 19 2 199 45 438 38 12 15 439 77 77 15 440 13 2 19 5 218 13 0 15 435 13 1 14 197 14 198 19 4 199 12 19 2 216 39 31 13 1 8 0 17 441 12 15 435 19 2 442 39 17 13 1 10 1 16 23 16 328 17 441 12 15 435 19 2 442 76 40 -62 33 443 12 13 1 9 0 13 0 19 3 227 12 19 2 444 39 39 13 1 9 0 13 0 19 3 227 12 19 1 445 12 13 1 10 0 16 31 12 19 2 227 12 19 1 446 12 19 1 75 12 19 2 407 38 98 33 443 12 13 1 10 0 16 31 12 19 2 227 12 19 2 444 39 39 13 1 9 0 13 0 19 3 227 12 19 1 446 12 19 1 75 12 13 1 10 0 16 31 12 19 2 227 12 19 1 445 12 19 2 407 38 41 13 1 9 0 13 0 19 3 227 12 19 1 446 12 19 1 75 12 13 1 10 0 16 31 12 19 2 227 12 19 1 446 12 19 1 75 12 19 2 407 43 2 38 126 10 0 16 72 39 12 13 0 9 0 9 1 19 3 33 38 109 10 0 16 447 39 22 10 0 16 23 12 9 3 19 2 216 39 10 10 0 16 88 12 1 262 17 118 39 23 10 0 4 12 19 1 75 12 10 0 16 448 12 19 1 75 12 19 2 407 38 58 13 0 19 1 73 39 12 13 0 19 1 74 12 15 75 19 2 76 39 31 13 0 19 1 74 12 15 75 19 2 76 12 33 75 12 13 0 19 1 77 12 19 2 78 12 19 2 40 38 8 15 449 13 0 19 2 80 29) #1# #2# 16016) "Convert a prefix Lisp expression to 
  a polynomial canonical form. E.g.:
  (+ (^ x 2) (* 3 x)) => #(x 0 3 1);
  (- (* (- x 1) (+ x 1)) (- (^ x 2) 1)) 
  => 0. Improved version that accepts 
  rationals. In addition to already 
  accepted inputs, it now accepts symbols
  containing / or a list of 3 elements 
  with / as the second element. Does
  not exclusively return rational expressions,
  as this would make things too cumbersome." (defun canonical::poly^n) (#2# . 18162) (canonical::p canonical::n) #:g1862 integer (not (eql canonical::p 0)) #Y(canonical::poly^n nil nil (24 45 15 24 45 211 26 10 0 45 455 13 0 15 456 19 2 214 76 39 13 13 0 15 456 77 15 211 19 4 215 51 1 43 1 13 0 9 0 19 2 216 39 23 38 6 15 457 19 1 218 13 1 8 0 17 139 76 76 40 -14 8 1 73 38 48 13 0 9 0 19 2 149 39 22 13 1 13 1 13 0 9 1 19 2 24 12 19 2 219 12 19 2 109 38 18 9 1 13 1 13 0 19 1 24 12 19 2 219 12 19 2 407 29) #1# #2# 18162) "Raise polynomial to the nth power." canonical::polyp (defun canonical::polyp) (#2# . 18413) (canonical::x) vectorp #Y(canonical::polyp nil nil (24 45 37 26 10 0 16 464 73 40 5 10 0 16 71 29) #1# #2# 18413) canonical::proper-poly-p (defun canonical::proper-poly-p) (#2# . 18774) (canonical::x) #Y(canonical::proper-poly-p nil nil (24 45 37 26 10 0 16 464 29) #1# #2# 18774) canonical::rat*rat (defun canonical::rat*rat) (#2# . 18820) (canonical::r1 canonical::r2) canonical::r1 canonical::r2 zerop #Y(canonical::rat*rat nil nil (24 45 475 24 45 476 26 10 1 16 71 39 5 10 1 16 477 40 11 10 0 16 71 39 5 10 0 16 477 39 6 8 0 73 38 145 10 1 16 71 39 8 13 1 9 1 19 2 216 39 6 10 0 73 38 125 10 0 16 71 39 8 13 0 9 1 19 2 216 39 6 10 1 73 38 105 13 1 19 1 460 39 6 13 0 19 1 460 39 10 13 1 13 0 19 2 109 38 82 13 1 19 1 460 39 10 13 0 13 1 19 2 471 38 66 13 0 19 1 460 39 24 13 1 19 1 415 12 13 0 19 2 109 12 13 1 19 1 425 12 19 2 407 38 36 13 1 19 1 415 12 13 0 19 1 415 12 19 2 109 12 13 1 19 1 425 12 13 0 19 1 425 12 19 2 109 12 19 2 407 29) #1# #2# 18820) canonical::rat+rat (defun canonical::rat+rat) (#2# . 19416) (canonical::r1 canonical::r2) #Y(canonical::rat+rat nil nil (24 45 475 24 45 476 26 10 1 16 71 39 5 10 1 16 477 39 6 10 0 73 38 152 10 0 16 71 39 5 10 0 16 477 39 6 10 1 73 38 135 13 1 19 1 460 39 6 13 0 19 1 460 39 10 13 1 13 0 19 2 99 38 112 13 1 19 1 460 39 10 13 0 13 1 19 2 479 38 96 13 0 19 1 460 39 34 13 1 19 1 415 12 13 0 13 1 19 1 425 12 19 2 109 12 19 2 99 12 13 1 19 1 425 12 19 2 407 38 56 13 1 19 1 415 12 13 0 19 1 425 12 19 2 109 12 13 0 19 1 415 12 13 1 19 1 425 12 19 2 109 12 19 2 99 12 13 1 19 1 425 12 13 0 19 1 425 12 19 2 109 12 19 2 407 29) #1# #2# 19416) canonical::rat/rat (defun canonical::rat/rat) (#2# . 20043) (canonical::r1 canonical::r2) canonical::poly/poly "Division by 0 rat" #Y(canonical::rat/rat nil nil (24 45 475 24 45 476 26 13 1 19 1 460 39 6 13 0 19 1 460 39 10 13 1 13 0 19 2 488 38 60 13 0 19 1 460 39 16 13 1 9 1 13 0 19 2 488 12 19 2 471 38 38 13 0 19 1 415 16 477 39 8 15 489 19 1 80 38 22 13 1 13 0 19 1 425 12 13 0 19 1 415 12 19 2 407 12 19 2 471 29) #1# #2# 20043) canonical::poly= (defun canonical::poly=) (#2# . 20381) (canonical::p1 canonical::p2) canonical::p1 canonical::p2 canonical::coef-idx #Y(nil nil nil (24 45 497 26 13 2 13 0 19 2 26 12 13 1 13 0 19 2 26 12 19 2 491 29) #1# #2# 20381) canonical::iota #Y(canonical::poly= nil nil (24 45 495 24 45 496 26 10 1 16 71 39 14 10 0 16 71 39 8 13 1 13 0 19 2 216 73 40 71 13 1 19 1 466 73 39 63 13 0 19 1 466 73 39 55 13 1 19 1 8 12 13 0 19 1 8 12 19 2 113 73 39 37 13 1 19 1 19 12 13 0 19 1 19 12 19 2 216 73 39 19 34 498 12 13 1 19 1 19 16 31 12 19 1 499 12 19 2 444 29) #1# #2# 20381) "Are these polys equal?" (defun canonical::poly/poly) (#2# . 21082) (canonical::dividend canonical::divisor) canonical::dividend canonical::divisor (not (zerop canonical::divisor)) "DIVISION BY ZERO: (poly/poly ~S 0)" canonical::ci #Y(nil nil nil (24 45 509 26 13 2 13 0 19 2 26 16 71 29) #1# #2# 21082) notevery #Y(nil nil nil (24 45 509 26 13 1 13 0 19 2 26 16 71 29) #1# #2# 21082) canonical::expanded-synthetic-division #Y(canonical::poly/poly nil nil (24 45 505 24 45 506 26 10 1 16 71 39 5 10 0 16 71 39 15 13 1 13 0 19 2 262 12 9 0 72 2 38 228 10 1 16 71 39 29 10 1 16 477 39 9 9 0 9 0 72 2 38 13 9 0 13 1 13 0 19 2 407 12 72 2 38 194 10 0 16 71 39 59 38 12 15 507 77 77 15 508 13 1 19 5 218 10 0 16 477 76 76 40 -18 13 0 9 1 19 2 216 39 9 13 1 9 0 72 2 38 19 13 1 9 1 13 0 19 2 262 12 19 2 109 12 9 0 72 2 38 130 13 1 19 1 8 12 13 0 19 1 8 12 19 2 120 39 21 13 1 9 1 13 0 19 2 488 12 19 2 109 12 9 0 72 2 38 93 13 0 19 1 8 12 13 1 19 1 8 12 19 2 120 39 15 9 0 13 0 13 1 19 2 407 12 72 2 38 62 34 510 12 13 1 19 1 19 16 31 12 19 1 499 12 19 2 511 40 19 34 512 12 13 0 19 1 19 16 31 12 19 1 499 12 19 2 511 39 15 13 1 13 0 19 2 407 12 9 0 72 2 38 8 13 1 13 0 19 2 513 29) #1# #2# 21082) "Division of polys. Returns two
  values: the quotient (a poly or rat) and 
  the remainder (a rat or 0)." (defun canonical::expanded-synthetic-division) (#2# . 22362) (canonical::dividend canonical::divisor) canonical::deg1 canonical::deg2 :element-type canonical::divisor-coefs canonical::out canonical::normalizer si::aset aref /= #:g1932 #:g1933 #:g1935 #:g1934 mod canonical::remainder-list canonical::quotient-list canonical::separator canonical::remainder canonical::quotient #Y(canonical::expanded-synthetic-division nil nil (24 45 505 24 45 506 26 13 1 19 1 19 45 519 13 1 19 1 19 45 520 10 0 16 31 12 14 521 15 422 19 3 58 45 522 10 2 16 31 12 14 521 15 422 19 3 58 45 523 13 4 13 4 19 1 19 12 19 2 26 45 524 13 3 9 0 46 186 46 30 38 30 13 4 13 1 13 7 13 0 19 2 26 12 19 3 525 10 0 16 328 12 10 1 16 31 12 53 1 53 0 13 1 13 5 19 2 149 39 -37 43 2 13 4 9 0 46 186 46 30 38 30 13 3 13 1 13 8 13 0 19 2 26 12 19 3 525 10 0 16 328 12 10 1 16 31 12 53 1 53 0 13 1 13 6 19 2 149 39 -37 43 2 13 4 13 3 19 2 24 16 31 45 258 8 0 45 30 38 130 13 3 13 0 13 3 13 0 19 2 526 12 13 2 19 2 262 12 19 3 525 13 3 13 0 19 2 526 45 26 13 0 9 0 19 2 527 39 83 8 1 45 186 38 66 10 5 45 528 13 3 13 1 19 2 56 45 529 13 8 13 2 19 2 526 12 19 1 24 12 13 3 19 2 173 45 530 13 2 13 1 19 2 526 12 13 0 19 2 56 45 531 13 3 13 2 13 0 19 3 525 43 4 10 0 16 31 12 53 0 13 0 13 7 19 2 149 39 -73 43 1 43 1 10 0 16 31 51 0 13 0 13 1 19 2 202 40 -137 43 2 9 1 13 3 19 2 24 12 10 1 16 23 17 532 12 77 77 46 533 46 534 46 535 10 0 45 258 8 0 45 30 38 20 13 6 13 0 19 2 526 12 10 3 3 51 3 10 0 16 31 51 0 13 0 13 1 19 2 202 40 -27 43 2 10 0 45 30 38 21 13 5 13 0 19 2 526 12 10 3 3 51 3 10 0 16 31 12 53 0 13 0 10 5 16 23 12 19 2 216 39 -31 43 1 33 33 12 13 9 19 1 8 12 13 1 19 3 40 12 33 477 12 13 2 19 2 444 39 6 8 0 73 38 21 33 33 12 13 9 19 1 8 12 13 2 19 3 40 12 13 8 19 2 407 12 46 536 46 537 13 0 13 1 72 2 43 2 43 3 43 5 29) #1# #2# 22362) "Fast algorithm to divide two proper 
  polynomials with the same main 
  variable. Returns two values: a 
  quotient (poly) and a remainder 
  (rat or 0). See the Wikipedia article
  Synthetic Division." canonical::ratp (defun canonical::ratp) (#2# . 24365) (canonical::x) canonical::rst #Y(canonical::ratp nil nil (24 45 37 26 10 0 16 447 73 39 20 10 0 5 45 544 10 0 16 304 73 39 6 10 0 76 76 73 43 1 29) #1# #2# 24365) canonical::rat= (defun canonical::rat=) (#2# . 24508) (canonical::r1 canonical::r2) #Y(canonical::rat= nil nil (24 45 475 24 45 476 26 13 1 19 1 460 39 15 13 0 19 1 460 39 8 13 1 13 0 19 2 491 73 40 50 13 1 19 1 540 73 39 42 13 0 19 1 540 73 39 34 13 1 19 1 415 12 13 0 19 1 415 12 19 2 491 73 39 16 13 1 19 1 425 12 13 0 19 1 425 12 19 2 491 29) #1# #2# 24508))) #2# 0) #Y(si::bytecodes nil nil (1 2 16 3 29) #1# #2# 136) #Y(si::bytecodes nil nil (15 4 15 5 15 6 19 3 7 29) #1# #2# 1211) #Y(si::bytecodes nil nil (15 8 15 9 15 10 15 11 19 4 12 15 8 14 13 77 15 14 19 4 12 15 8 1 17 12 19 2 18 1 8 73 29) #1# #2# 1251) #Y(si::bytecodes nil nil (15 19 15 9 15 20 15 21 19 4 12 15 19 14 13 77 15 22 19 4 12 15 19 1 25 12 19 2 18 1 19 73 29) #1# #2# 1304) #Y(si::bytecodes nil nil (15 26 15 9 15 27 15 28 19 4 12 15 26 14 13 77 15 29 19 4 12 15 26 1 32 12 19 2 18 1 26 73 29) #1# #2# 1362) #Y(si::bytecodes nil nil (15 33 15 9 15 34 15 35 19 4 12 15 33 14 13 77 15 36 19 4 12 15 33 1 41 12 19 2 18 15 33 15 42 15 43 19 3 44 1 33 73 29) #1# #2# 1418) #Y(si::bytecodes nil nil (15 8 15 9 15 45 15 46 19 4 12 15 8 1 50 12 9 1 19 3 51 1 8 73 29) #1# #2# 1645) #Y(si::bytecodes nil nil (15 52 15 9 15 53 15 54 19 4 12 15 52 14 13 77 15 55 19 4 12 15 52 1 62 12 19 2 18 15 52 15 42 15 63 19 3 44 1 52 73 29) #1# #2# 1720) #Y(si::bytecodes nil nil (15 26 15 9 15 64 15 65 19 4 12 15 26 1 66 12 9 1 19 3 51 1 26 73 29) #1# #2# 1921) #Y(si::bytecodes nil nil (15 67 15 9 15 68 15 69 19 4 12 15 67 14 13 77 15 70 19 4 12 15 67 1 81 12 19 2 18 15 67 15 42 15 82 19 3 44 1 67 73 29) #1# #2# 2028) #Y(si::bytecodes nil nil (1 83 45 84 38 41 10 0 4 45 85 10 0 4 45 86 1 75 45 87 10 2 16 88 45 89 13 2 13 0 13 1 19 3 90 43 1 43 2 10 1 5 51 1 43 1 10 0 40 -43 75 73 43 1 29) #1# #2# 2523) #Y(si::bytecodes nil nil (15 91 15 9 15 92 15 93 19 4 12 15 91 14 13 77 15 94 19 4 12 15 91 1 102 12 19 2 18 15 91 15 42 15 103 19 3 44 1 91 73 29) #1# #2# 2834) #Y(si::bytecodes nil nil (15 104 15 9 15 105 15 106 19 4 12 15 104 14 13 77 15 107 19 4 12 15 104 1 111 12 19 2 18 15 104 15 42 15 112 19 3 44 1 104 73 29) #1# #2# 3022) #Y(si::bytecodes nil nil (15 113 15 9 15 114 15 115 19 4 12 15 113 14 13 77 15 116 19 4 12 15 113 1 119 12 19 2 18 1 113 73 29) #1# #2# 3268) #Y(si::bytecodes nil nil (15 120 15 9 15 121 15 122 19 4 12 15 120 14 13 77 15 123 19 4 12 15 120 1 125 12 19 2 18 1 120 73 29) #1# #2# 3430) #Y(si::bytecodes nil nil (15 99 15 9 15 126 15 127 19 4 12 15 99 14 13 77 15 128 19 4 12 15 99 1 133 12 19 2 18 15 99 15 42 15 134 19 3 44 1 99 73 29) #1# #2# 3466) #Y(si::bytecodes nil nil (15 130 15 9 15 135 15 136 19 4 12 15 130 14 13 77 15 137 19 4 12 15 130 1 144 12 19 2 18 15 130 15 42 15 145 19 3 44 1 130 73 29) #1# #2# 3840) #Y(si::bytecodes nil nil (15 131 15 9 15 146 15 147 19 4 12 15 131 14 13 77 15 148 19 4 12 15 131 1 155 12 19 2 18 15 131 15 42 15 156 19 3 44 1 131 73 29) #1# #2# 4088) #Y(si::bytecodes nil nil (15 140 15 9 15 157 15 158 19 4 12 15 140 14 13 77 15 159 19 4 12 15 140 1 161 12 19 2 18 15 140 15 42 15 162 19 3 44 1 140 73 29) #1# #2# 4548) #Y(si::bytecodes nil nil (15 109 15 9 15 163 15 164 19 4 12 15 109 14 13 77 15 165 19 4 12 15 109 1 168 12 19 2 18 15 109 15 42 15 169 19 3 44 1 109 73 29) #1# #2# 4618) #Y(si::bytecodes nil nil (15 166 15 9 15 170 15 171 19 4 12 15 166 14 13 77 15 172 19 4 12 15 166 1 178 12 19 2 18 15 166 15 42 15 179 19 3 44 1 166 73 29) #1# #2# 4916) #Y(si::bytecodes nil nil (15 167 15 9 15 180 15 181 19 4 12 15 167 14 13 77 15 182 19 4 12 15 167 1 190 12 19 2 18 15 167 15 42 15 191 19 3 44 1 167 73 29) #1# #2# 5407) #Y(si::bytecodes nil nil (15 132 15 9 15 192 15 193 19 4 12 15 132 14 13 77 15 194 19 4 12 15 132 1 205 12 19 2 18 15 132 15 42 15 206 19 3 44 1 132 73 29) #1# #2# 5972) #Y(si::bytecodes nil nil (15 207 15 9 15 208 15 209 19 4 12 15 207 14 13 77 15 210 19 4 12 15 207 1 220 12 19 2 18 15 207 15 42 15 221 19 3 44 1 207 73 29) #1# #2# 6432) #Y(si::bytecodes nil nil (15 222 15 9 15 223 15 224 19 4 12 15 222 14 13 77 15 225 19 4 12 15 222 1 238 12 19 2 18 15 222 15 42 15 239 19 3 44 1 222 73 29) #1# #2# 6654) #Y(si::bytecodes nil nil (15 240 15 9 15 241 15 242 19 4 12 15 240 14 13 77 15 243 19 4 12 15 240 1 245 12 19 2 18 1 240 73 29) #1# #2# 8016) #Y(si::bytecodes nil nil (15 246 15 9 15 247 15 248 19 4 12 15 246 14 13 77 15 249 19 4 12 15 246 1 252 12 19 2 18 15 246 15 42 15 253 19 3 44 1 246 73 29) #1# #2# 8776) #Y(si::bytecodes nil nil (15 251 15 9 15 254 15 255 19 4 12 15 251 14 13 77 15 256 19 4 12 15 251 1 268 12 19 2 18 1 251 73 29) #1# #2# 9336) #Y(si::bytecodes nil nil (15 269 15 9 15 270 15 271 19 4 12 15 269 14 13 77 15 272 19 4 12 15 269 1 278 12 19 2 18 15 269 15 42 15 279 19 3 44 1 269 73 29) #1# #2# 9991) #Y(si::bytecodes nil nil (15 280 15 9 15 281 15 282 19 4 12 15 280 14 13 77 15 283 19 4 12 15 280 1 286 12 19 2 18 15 280 15 42 15 287 19 3 44 1 280 73 29) #1# #2# 10776) #Y(si::bytecodes nil nil (15 288 15 9 15 289 15 290 19 4 12 15 288 14 13 77 15 291 19 4 12 15 288 1 297 12 19 2 18 15 288 15 42 15 298 19 3 44 1 288 73 29) #1# #2# 11012) #Y(si::bytecodes nil nil (15 299 15 9 15 300 15 301 19 4 12 15 299 14 13 77 15 302 19 4 12 15 299 1 306 12 19 2 18 15 299 15 42 15 307 19 3 44 1 299 73 29) #1# #2# 11338) #Y(si::bytecodes nil nil (15 305 15 9 15 308 15 309 19 4 12 15 305 14 13 77 15 310 19 4 12 15 305 1 318 12 19 2 18 15 305 15 42 15 319 19 3 44 1 305 73 29) #1# #2# 11694) #Y(si::bytecodes nil nil (15 320 15 9 15 321 15 322 19 4 12 15 320 14 13 77 15 323 19 4 12 15 320 1 329 12 19 2 18 15 320 15 42 15 330 19 3 44 1 320 73 29) #1# #2# 11949) #Y(si::bytecodes nil nil (15 326 15 9 15 331 15 332 19 4 12 15 326 14 13 77 15 333 19 4 12 15 326 1 337 12 19 2 18 15 326 15 42 15 338 19 3 44 1 326 73 29) #1# #2# 12405) #Y(si::bytecodes nil nil (15 327 15 9 15 339 15 340 19 4 12 15 327 14 13 77 15 341 19 4 12 15 327 34 349 12 19 2 18 15 327 15 42 15 350 19 3 44 1 327 73 29) #1# #2# 12571) #Y(si::bytecodes nil nil (15 351 15 9 15 352 15 353 19 4 12 15 351 14 13 77 15 354 19 4 12 15 351 1 357 12 19 2 18 15 351 15 42 15 358 19 3 44 1 351 73 29) #1# #2# 13067) #Y(si::bytecodes nil nil (15 359 15 9 15 360 15 361 19 4 12 15 359 14 13 77 77 19 4 12 15 359 1 371 12 19 2 18 15 359 15 42 15 372 19 3 44 1 359 73 29) #1# #2# 13297) #Y(si::bytecodes nil nil (1 373 16 374 1 375 52 373 15 373 15 9 15 376 15 377 19 4 12 1 373 73 29) #1# #2# 13669) #Y(si::bytecodes nil nil (1 378 16 374 1 379 52 378 15 378 15 9 15 380 15 381 19 4 12 1 378 73 29) #1# #2# 13979) #Y(si::bytecodes nil nil (15 382 15 9 15 383 15 384 19 4 12 15 382 14 13 77 15 385 19 4 12 15 382 1 388 12 19 2 18 1 382 73 29) #1# #2# 14038) #Y(si::bytecodes nil nil (15 356 15 9 15 389 15 390 19 4 12 15 356 14 13 77 15 391 19 4 12 15 356 1 394 12 19 2 18 1 356 73 29) #1# #2# 14103) #Y(si::bytecodes nil nil (15 393 15 9 15 395 15 396 19 4 12 15 393 14 13 77 15 397 19 4 12 15 393 1 401 12 19 2 18 1 393 73 29) #1# #2# 14192) #Y(si::bytecodes nil nil (15 400 15 9 15 402 15 403 19 4 12 15 400 14 13 77 15 404 19 4 12 15 400 1 406 12 19 2 18 1 400 73 29) #1# #2# 14660) #Y(si::bytecodes nil nil (15 407 15 9 15 408 15 409 19 4 12 15 407 14 13 77 15 410 19 4 12 15 407 1 413 12 19 2 18 15 407 15 42 15 414 19 3 44 1 407 73 29) #1# #2# 15204) #Y(si::bytecodes nil nil (15 415 15 9 15 416 15 417 19 4 12 15 415 14 13 77 15 418 19 4 12 15 415 1 423 12 19 2 18 15 415 15 42 15 424 19 3 44 1 415 73 29) #1# #2# 15710) #Y(si::bytecodes nil nil (15 425 15 9 15 426 15 427 19 4 12 15 425 14 13 77 15 428 19 4 12 15 425 1 430 12 19 2 18 15 425 15 42 15 431 19 3 44 1 425 73 29) #1# #2# 15861) #Y(si::bytecodes nil nil (15 75 15 9 15 432 15 433 19 4 12 15 75 14 13 77 15 434 19 4 12 15 75 1 450 12 19 2 18 15 75 15 42 15 451 19 3 44 1 75 73 29) #1# #2# 16016) #Y(si::bytecodes nil nil (15 219 15 9 15 452 15 453 19 4 12 15 219 14 13 77 15 454 19 4 12 15 219 1 458 12 19 2 18 15 219 15 42 15 459 19 3 44 1 219 73 29) #1# #2# 18162) #Y(si::bytecodes nil nil (15 460 15 9 15 461 15 462 19 4 12 15 460 14 13 77 15 463 19 4 12 15 460 1 465 12 19 2 18 1 460 73 29) #1# #2# 18413) #Y(si::bytecodes nil nil (15 466 15 9 15 467 15 468 19 4 12 15 466 14 13 77 15 469 19 4 12 15 466 1 470 12 19 2 18 1 466 73 29) #1# #2# 18774) #Y(si::bytecodes nil nil (15 471 15 9 15 472 15 473 19 4 12 15 471 14 13 77 15 474 19 4 12 15 471 1 478 12 19 2 18 1 471 73 29) #1# #2# 18820) #Y(si::bytecodes nil nil (15 479 15 9 15 480 15 481 19 4 12 15 479 14 13 77 15 482 19 4 12 15 479 1 483 12 19 2 18 1 479 73 29) #1# #2# 19416) #Y(si::bytecodes nil nil (15 484 15 9 15 485 15 486 19 4 12 15 484 14 13 77 15 487 19 4 12 15 484 1 490 12 19 2 18 1 484 73 29) #1# #2# 20043) #Y(si::bytecodes nil nil (15 491 15 9 15 492 15 493 19 4 12 15 491 14 13 77 15 494 19 4 12 15 491 34 500 12 19 2 18 15 491 15 42 15 501 19 3 44 1 491 73 29) #1# #2# 20381) #Y(si::bytecodes nil nil (15 488 15 9 15 502 15 503 19 4 12 15 488 14 13 77 15 504 19 4 12 15 488 34 514 12 19 2 18 15 488 15 42 15 515 19 3 44 1 488 73 29) #1# #2# 21082) #Y(si::bytecodes nil nil (15 513 15 9 15 516 15 517 19 4 12 15 513 14 13 77 15 518 19 4 12 15 513 1 538 12 19 2 18 15 513 15 42 15 539 19 3 44 1 513 73 29) #1# #2# 22362) #Y(si::bytecodes nil nil (15 540 15 9 15 541 15 542 19 4 12 15 540 14 13 77 15 543 19 4 12 15 540 1 545 12 19 2 18 1 540 73 29) #1# #2# 24365) #Y(si::bytecodes nil nil (15 546 15 9 15 547 15 548 19 4 12 15 546 14 13 77 15 549 19 4 12 15 546 1 550 12 19 2 18 1 546 73 29) #1# #2# 24508))
