(#Y(si::bytecodes nil nil (1 0 16 1 29) #1=#A(t (124) ("EFFICIENT-SIMPLIFY" si::select-package efficient-simplify::*test-data* si::*make-special boundp symbolic::infix->prefix ((symbolic::d (efficient-simplify::a * symbolic::x symbolic::^ 2 + efficient-simplify::b * symbolic::x + efficient-simplify::c) / symbolic::d symbolic::x) (symbolic::d ((efficient-simplify::a * symbolic::x symbolic::^ 2 + efficient-simplify::b * symbolic::x + efficient-simplify::c) / symbolic::x) / symbolic::d symbolic::x) (symbolic::d ((efficient-simplify::a * symbolic::x symbolic::^ 3 + efficient-simplify::b * symbolic::x symbolic::^ 2 + efficient-simplify::c * symbolic::x + symbolic::d) / symbolic::x symbolic::^ 5) / symbolic::d symbolic::x) ((sin (symbolic::x + symbolic::x)) * (sin (2 * symbolic::x)) + (cos (symbolic::d (symbolic::x symbolic::^ 2) / symbolic::d symbolic::x)) symbolic::^ 1) (symbolic::d (3 * symbolic::x + (cos symbolic::x) / symbolic::x) / symbolic::d symbolic::x)) mapcar ext::location (defvar efficient-simplify::*test-data*) (#2=#P"/data/data/org.eql5.android.repl/files/quicklisp/local-projects/paip/ch-09a.lisp" . 168) ext::annotate efficient-simplify::*answers* symbolic::simplify (defvar efficient-simplify::*answers*) (#2# . 564) efficient-simplify::test-it (defun efficient-simplify::test-it) (#2# . 627) :lambda-list (&optional (efficiency::with-profiling t)) t efficiency::with-profiling efficiency::unprofile1 #3=(efficient-simplify::simplify efficient-simplify::simplify-exp symbolic::variablep tools::match-variable tools::pat-match) efficiency::*profiled-functions* (quote #3#) set-difference efficiency::profile1 union efficiency::*profile-call-stack* efficient-simplify::simplify efficiency::profile-report efficient-simplify::answers efficient-simplify::assert-equal mapc #Y(efficient-simplify::test-it nil nil (25 40 3 14 21 46 22 26 10 0 39 71 33 23 12 15 24 19 2 7 14 25 15 26 19 2 27 52 25 33 28 12 14 25 15 24 19 2 29 52 25 12 19 2 7 75 52 30 64 10 33 31 12 14 2 19 2 7 65 15 24 19 1 32 33 23 12 15 24 19 2 7 14 25 15 26 19 2 27 52 25 66 45 33 33 34 12 13 0 14 12 19 3 35 11 21 73 43 1 29) #1# #2# 627) si::fset function "Time a test run and make sure the 
  answers are correct." si::set-documentation (defun efficient-simplify::assert-equal) (#2# . 1101) (symbolic::x symbolic::y) symbolic::x symbolic::y (equal symbolic::x symbolic::y) (symbolic::x symbolic::y) "Expected ~A to be equal to ~A" si::assert-failure #:g699 #:g700 equal #Y(efficient-simplify::assert-equal nil nil (24 48 44 24 48 45 26 38 37 15 46 15 47 14 44 11 45 6 2 12 15 48 14 44 14 45 19 6 49 47 1 50 45 51 10 0 52 44 10 1 52 45 43 2 75 14 44 11 45 17 52 76 40 -44 73 44 2 29) #1# #2# 1101) "If x is not equal to y, complain." (defun efficient-simplify::simplify) (#2# . 1254) (exp) exp atom efficient-simplify::simplify-exp #Y(efficient-simplify::simplify nil nil (24 45 58 26 10 0 16 59 39 6 10 0 73 38 13 33 31 12 13 0 19 2 7 12 19 1 60 29) #1# #2# 1254) "Simplify an expression by first 
  simplifying its components." (defun efficient-simplify::simplify-exp) (#2# . 2023) (exp) symbolic::simplify-by-fn symbolic::exp-op efficient-simplify::rules-for :rule-if symbolic::exp-lhs :rule-then symbolic::exp-rhs :action efficient-simplify::bindings efficient-simplify::response sublis #Y(nil nil nil (24 45 74 24 45 75 26 13 1 13 0 19 2 76 12 19 1 31 29) #1# #2# 2023) :var? symbolic::variablep tools::rule-based-translator symbolic::evaluable eval #Y(efficient-simplify::simplify-exp nil nil (24 45 58 26 13 0 19 1 66 73 40 55 13 0 13 0 19 1 67 12 19 1 68 12 14 69 33 70 12 14 71 33 72 12 14 73 1 77 12 14 78 33 79 12 19 10 80 73 40 17 13 0 19 1 81 39 7 10 0 16 82 38 4 10 0 73 29) #1# #2# 2023) "Simplify using a rule, or by 
  doing arithmetic, or by using the 
  simp function supplied for this 
  operator. This version indexes 
  simplification rules under the 
  operator." efficient-simplify::*rules-for* :test make-hash-table variable "Stores indexed patterns, keyed by
  function." (defvar efficient-simplify::*rules-for*) (#2# . 2579) efficient-simplify::main-op (defun efficient-simplify::main-op) (#2# . 2685) (efficient-simplify::rule) efficient-simplify::rule #Y(efficient-simplify::main-op nil nil (24 45 96 26 13 0 19 1 70 12 19 1 67 29) #1# #2# 2685) "Retrieves the principal operation
  from a pattern." efficient-simplify::index-rules (defun efficient-simplify::index-rules) (#2# . 2791) (efficient-simplify::rules) efficient-simplify::rules clrhash si::%dolist-var gethash nconc si::hash-set #Y(efficient-simplify::index-rules nil nil (24 45 103 26 11 85 16 104 10 0 45 105 38 45 10 0 4 45 96 13 0 19 1 92 12 14 85 13 0 19 1 92 12 14 85 19 2 106 12 10 0 6 1 12 19 2 107 12 19 3 108 10 1 5 51 1 43 1 10 0 40 -47 75 73 43 1 29) #1# #2# 2791) "Index all the rules under the main op." (defun efficient-simplify::rules-for) (#2# . 3096) (efficient-simplify::op) efficient-simplify::op #Y(efficient-simplify::rules-for nil nil (24 45 114 26 13 0 14 85 19 2 106 29) #1# #2# 3096) "Given an operator, retrieves the 
  associated rule list, if any." symbolic::*simplification-rules* efficiency::memoize (defun efficient-simplify::simplify) (#2# . 3389) (exp) #Y(efficient-simplify::simplify nil nil (24 45 58 26 10 0 16 59 39 6 10 0 73 38 13 33 31 12 13 0 19 2 7 12 19 1 60 29) #1# #2# 3389) "Simplify an expression by first 
  simplifying its components.")) #2# 0) #Y(si::bytecodes nil nil (1 2 16 3 1 2 16 4 76 39 11 33 5 12 15 6 19 2 7 52 2 15 2 15 8 15 9 15 10 19 4 11 1 2 73 29) #1# #2# 168) #Y(si::bytecodes nil nil (1 12 16 3 1 12 16 4 76 39 11 33 13 12 14 2 19 2 7 52 12 15 12 15 8 15 14 15 15 19 4 11 1 12 73 29) #1# #2# 564) #Y(si::bytecodes nil nil (15 16 15 8 15 17 15 18 19 4 11 15 16 14 19 77 15 20 19 4 11 15 16 1 36 12 19 2 37 15 16 15 38 15 39 19 3 40 1 16 73 29) #1# #2# 627) #Y(si::bytecodes nil nil (15 34 15 8 15 41 15 42 19 4 11 15 34 14 19 77 15 43 19 4 11 15 34 1 53 12 19 2 37 15 34 15 38 15 54 19 3 40 1 34 73 29) #1# #2# 1101) #Y(si::bytecodes nil nil (15 31 15 8 15 55 15 56 19 4 11 15 31 14 19 77 15 57 19 4 11 15 31 1 61 12 19 2 37 15 31 15 38 15 62 19 3 40 1 31 73 29) #1# #2# 1254) #Y(si::bytecodes nil nil (15 60 15 8 15 63 15 64 19 4 11 15 60 14 19 77 15 65 19 4 11 15 60 1 83 12 19 2 37 15 60 15 38 15 84 19 3 40 1 60 73 29) #1# #2# 2023) #Y(si::bytecodes nil nil (1 85 16 3 1 85 16 4 76 39 11 14 86 33 52 12 19 2 87 52 85 15 85 15 88 15 89 19 3 40 15 85 15 8 15 90 15 91 19 4 11 1 85 73 29) #1# #2# 2579) #Y(si::bytecodes nil nil (15 92 15 8 15 93 15 94 19 4 11 15 92 14 19 77 15 95 19 4 11 15 92 1 97 12 19 2 37 15 92 15 38 15 98 19 3 40 1 92 73 29) #1# #2# 2685) #Y(si::bytecodes nil nil (15 99 15 8 15 100 15 101 19 4 11 15 99 14 19 77 15 102 19 4 11 15 99 1 109 12 19 2 37 15 99 15 38 15 110 19 3 40 1 99 73 29) #1# #2# 2791) #Y(si::bytecodes nil nil (15 68 15 8 15 111 15 112 19 4 11 15 68 14 19 77 15 113 19 4 11 15 68 1 115 12 19 2 37 15 68 15 38 15 116 19 3 40 1 68 73 29) #1# #2# 3096) #Y(si::bytecodes nil nil (14 117 19 1 99 29) #1# #2# 3218) #Y(si::bytecodes nil nil (15 31 14 86 33 52 12 19 3 118 29) #1# #2# 3296) #Y(si::bytecodes nil nil (15 31 15 8 15 119 15 120 19 4 11 15 31 14 19 77 15 121 19 4 11 15 31 1 122 12 19 2 37 15 31 15 38 15 123 19 3 40 1 31 73 29) #1# #2# 3389))
