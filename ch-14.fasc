(#Y(si::bytecodes nil nil (1 0 16 1 29) #1=#A(t (232) ("REASONING" si::select-package reasoning::make-empty-nlist ext::location (defun reasoning::make-empty-nlist) (#2=#P"/data/data/org.eql5.android.repl/files/quicklisp/local-projects/paip/ch-14.lisp" . 127) ext::annotate :lambda-list #Y(reasoning::make-empty-nlist nil nil (26 9 0 75 3 73 29) #1# #2# 127) si::fset function "Create a new, empty nlist." si::set-documentation reasoning::nlist-n (defun reasoning::nlist-n) (#2# . 936) (reasoning::nlist) reasoning::nlist #Y(reasoning::nlist-n nil nil (24 45 17 26 10 0 4 73 29) #1# #2# 936) "Return the number of elements in an
  nlist." reasoning::nlist-list (defun reasoning::nlist-list) (#2# . 1026) (reasoning::nlist) #Y(reasoning::nlist-list nil nil (24 45 17 26 10 0 5 73 29) #1# #2# 1026) "Return the elements in an nlist." reasoning::nlist-push (defun reasoning::nlist-push) (#2# . 1105) (reasoning::item reasoning::nlist) reasoning::item #:g1312 #:g1314 + #:g1313 rplaca #:g1317 #:g1315 #:g1316 rplacd #Y(reasoning::nlist-push nil nil (24 45 30 24 45 17 26 10 0 45 31 8 1 45 32 10 1 4 12 13 0 19 2 33 45 34 13 2 10 0 17 35 10 0 43 3 10 1 45 36 10 1 45 37 13 1 10 0 5 3 45 38 13 1 10 0 17 39 10 0 73 43 3 29) #1# #2# 1105) "Add a new element to an nlist." reasoning::dtree "DTREE-" vector ((first nil) (rest nil) (reasoning::atoms nil) (reasoning::var #3=(reasoning::make-empty-nlist))) ((first nil t nil 0 nil) (rest nil t nil 1 nil) (reasoning::atoms nil t nil 2 nil) (reasoning::var #3# t nil 3 nil)) reasoning::copy-dtree (reasoning::make-dtree) si::define-structure #4=(reasoning::dtree (:type vector)) (defstruct #4#) (#2# . 1220) reasoning::make-dtree (defun reasoning::make-dtree) (#2# . 1220) (&key #5=#:first #6=#:rest #7=#:atoms (#8=#:var (reasoning::make-empty-nlist))) (nil :var :atoms :rest :first) #5# #6# #7# #8# (4) :element-type t :initial-contents make-array #Y(reasoning::make-dtree nil nil (28 57 22 40 2 77 46 58 22 40 2 77 46 59 22 40 2 77 46 60 22 40 5 19 0 2 12 46 61 15 62 14 63 15 64 14 65 13 3 13 2 13 1 10 0 6 4 12 19 5 66 29) #1# #2# 1220) reasoning::predicates reasoning::get-dtree (defun reasoning::get-dtree) (#2# . 1512) (logic::predicate) logic::predicate get #:g1323 #:g1324 #:g1325 si::putprop #Y(reasoning::get-dtree nil nil (24 45 73 26 13 0 15 42 19 2 74 73 40 34 13 0 10 1 3 51 1 10 0 45 75 1 42 45 76 19 0 53 45 77 13 2 13 0 13 1 19 3 78 43 1 43 2 29) #1# #2# 1512) "Fetch (or make) the dtree for this
    predicate." reasoning::clear-dtrees (defun reasoning::clear-dtrees) (#2# . 1512) si::%dolist-var #:g1336 #:g1337 #:g1338 #Y(reasoning::clear-dtrees nil nil (26 10 0 45 84 38 37 10 0 4 45 73 10 0 45 85 1 42 45 86 75 45 87 13 2 13 0 13 1 19 3 78 43 1 43 2 10 1 5 51 1 43 1 10 0 40 -39 43 1 75 51 0 73 29) #1# #2# 1512) "Remove all the dtrees for all the
    predicates." reasoning::index% (defun reasoning::index%) (#2# . 2084) (reasoning::key) reasoning::key reasoning::dtree-index #Y(reasoning::index% nil nil (24 45 94 26 13 0 13 0 13 0 19 1 73 12 19 1 69 12 19 3 95 29) #1# #2# 2084) "Store key in a dtree node. Key 
  must be (predicate . args); it
  is stored in the predicate's dtree." (defun reasoning::dtree-index) (#2# . 2325) (reasoning::key reasoning::value reasoning::dtree) reasoning::value consp reasoning::dtree-first #:g1344 #:g1345 si::elt-set reasoning::dtree-rest #:g1346 #:g1347 logic::variablep reasoning::dtree-var reasoning::lookup-atom #Y(reasoning::dtree-index nil nil (24 45 94 24 45 101 24 45 42 26 10 2 16 102 39 83 10 2 4 12 13 1 13 0 19 1 103 73 40 23 10 0 45 104 19 0 53 45 105 13 1 9 0 13 0 19 3 106 43 1 43 1 12 19 3 95 10 2 5 12 13 1 13 0 19 1 107 73 40 23 10 0 45 108 19 0 53 45 109 13 1 9 1 13 0 19 3 106 43 1 43 1 12 19 3 95 38 40 10 2 76 73 40 34 13 2 19 1 110 39 14 13 1 13 0 19 1 111 12 19 2 26 38 14 13 1 13 2 13 0 19 2 112 12 19 2 26 29) #1# #2# 2325) "Index value under all atoms of key in 
  dtree." (defun reasoning::lookup-atom) (#2# . 3076) (atom reasoning::dtree) atom reasoning::dtree-atoms logic::lookup reasoning::new #:g1353 #:g1351 #:g1352 #Y(reasoning::lookup-atom nil nil (24 45 118 24 45 42 26 13 1 13 0 19 1 119 12 19 2 120 73 40 43 19 0 2 45 121 13 2 10 0 3 45 122 10 2 45 123 13 1 13 0 19 1 119 3 45 124 13 1 9 2 13 0 19 3 106 43 3 10 0 73 43 1 29) #1# #2# 3076) "Return (or create) the nlist for this
  atom in dtree." reasoning::test-index (defun reasoning::test-index) (#2# . 3326) ((reasoning::p reasoning::a reasoning::b) (reasoning::p reasoning::a reasoning::c) (reasoning::p reasoning::a reasoning::?x) (reasoning::p reasoning::b reasoning::c) (reasoning::p reasoning::b (reasoning::f reasoning::c)) (reasoning::p reasoning::a (reasoning::f . reasoning::?x))) reasoning::props reasoning::index mapc reasoning::p :circle :array :pretty write #Y(reasoning::test-index nil nil (26 1 130 45 131 19 0 81 33 132 12 13 0 19 2 133 13 0 15 134 19 1 69 6 2 12 14 135 14 64 14 136 14 64 14 137 14 64 19 7 138 43 1 0 29) #1# #2# 3326) reasoning::fetch (defun reasoning::fetch) (#2# . 3683) (reasoning::query) reasoning::query most-positive-fixnum reasoning::dtree-fetch #Y(reasoning::fetch nil nil (24 45 144 26 13 0 13 0 19 1 73 12 19 1 69 12 77 9 0 77 14 145 19 6 146 29) #1# #2# 3683) "Return a list of buckets potentially
  matching the query, which must be a 
  relation of the form (predicate . args)." (defun reasoning::dtree-fetch) (#2# . 4503) (reasoning::pat reasoning::dtree reasoning::var-list-in reasoning::var-n-in reasoning::best-list reasoning::best-n) reasoning::pat reasoning::var-list-in reasoning::var-n-in reasoning::best-list reasoning::best-n reasoning::var-nlist reasoning::var-n reasoning::var-list >= reasoning::dtree-atom-fetch reasoning::n1 reasoning::list1 #Y(reasoning::dtree-fetch nil nil (24 45 152 24 45 42 24 45 153 24 45 154 24 45 155 24 45 156 26 10 4 76 40 11 10 5 76 40 6 13 5 19 1 110 39 9 13 1 13 0 72 2 38 135 13 4 19 1 111 45 157 13 3 13 0 19 1 13 12 19 2 33 45 158 13 1 19 1 20 76 39 5 10 5 38 10 13 1 19 1 20 12 10 5 3 45 159 13 1 13 3 19 2 160 39 9 13 4 13 3 72 2 38 73 10 8 16 118 39 18 13 8 13 7 13 0 13 1 13 4 13 3 19 6 161 38 50 10 8 4 12 13 7 19 1 103 12 13 0 13 1 13 4 13 3 19 6 146 47 1 162 45 163 10 10 5 12 13 9 19 1 107 12 13 2 13 3 13 0 13 1 19 6 146 43 2 43 3 29) #1# #2# 4503) "Return two values: a list of possible
  matches to pat, and the number of 
  elements in the list-of-lists." (defun reasoning::dtree-atom-fetch) (#2# . 5943) (atom reasoning::dtree reasoning::var-list reasoning::var-n reasoning::best-list reasoning::best-n) reasoning::atom-nlist #:g1357 < #Y(reasoning::dtree-atom-fetch nil nil (24 45 118 24 45 42 24 45 159 24 45 158 24 45 155 24 45 156 26 13 5 13 4 19 1 119 12 19 2 120 45 169 10 0 76 40 7 13 0 19 1 20 76 39 9 13 4 13 3 72 2 38 53 10 0 39 25 13 0 19 1 13 45 170 13 4 13 0 19 2 33 51 4 12 43 1 13 1 19 2 171 39 17 13 0 19 1 20 12 10 4 3 12 13 3 72 2 38 7 13 2 13 1 72 2 43 1 29) #1# #2# 5943) "Return the answers indexed at this atom
  (along with the vars), or return the 
  previous best answer, if it is better." (inline reasoning::mapc-retrieve) proclaim reasoning::mapc-retrieve (defun reasoning::mapc-retrieve) (#2# . 7124) (reasoning::fn reasoning::query) reasoning::fn reasoning::bucket reasoning::answer logic::unify reasoning::bindings logic::+fail+ eq #Y(reasoning::mapc-retrieve nil nil (24 45 180 24 45 144 26 13 0 19 1 140 45 84 38 64 10 0 4 45 181 10 0 45 84 38 40 10 0 4 45 182 13 4 13 0 19 2 183 45 184 13 0 11 185 17 186 76 39 8 13 6 13 0 20 1 23 43 1 10 1 5 51 1 43 1 10 0 40 -42 43 1 10 1 5 51 1 43 1 10 0 40 -66 75 73 43 1 29) #1# #2# 7124) "For every fact that matches the query, 
  apply fn to the binding list." reasoning::retrieve (defun reasoning::retrieve) (#2# . 7413) (reasoning::query) reasoning::answers #Y(nil nil nil (24 45 184 26 13 0 10 1 3 51 1 73 29) #1# #2# 7413) #Y(reasoning::retrieve nil nil (24 45 144 26 75 45 193 34 194 12 13 1 19 2 176 10 0 73 43 1 29) #1# #2# 7413) "Find all facts that match query. 
   Return a list of bindings." reasoning::retrieve-matches (defun reasoning::retrieve-matches) (#2# . 7645) (reasoning::query) logic::subst-bindings #Y(nil nil nil (24 45 184 26 13 0 13 1 19 2 201 29) #1# #2# 7645) mapcar #Y(reasoning::retrieve-matches nil nil (24 45 144 26 34 202 12 13 0 19 1 189 12 19 2 203 29) #1# #2# 7645) "Find all facts that match query.
  Return a list of expressions that
  match the query." (defun reasoning::index) (#2# . 7879) (reasoning::key) logic::rename-variables #Y(reasoning::index nil nil (24 45 94 26 13 0 13 0 19 1 209 12 13 0 19 1 73 12 19 1 69 12 19 3 95 29) #1# #2# 7879) "Store key in a dtree node...key must
  be of the form (predicate . args); it
  is stored in the predicate's dtree." reasoning::query-bind (defmacro reasoning::query-bind) (#2# . 8379) (reasoning::variables reasoning::query &body reasoning::body) #:g1361 #:g1360 #:g1362 si::dm-too-few-arguments reasoning::variables reasoning::body "BINDINGS" gensym reasoning::var quote #Y(nil nil nil (24 45 224 26 13 0 15 201 13 1 15 225 10 0 6 2 6 3 6 2 73 29) #1# #2# 8379) reasoning::vars-and-vals lambda let #Y(reasoning::query-bind nil nil (24 45 216 24 45 217 26 10 1 5 45 218 10 0 76 39 6 13 2 19 1 219 10 0 4 12 10 0 5 51 0 22 45 220 10 1 76 39 6 13 3 19 1 219 10 1 4 12 10 1 5 51 1 22 45 144 10 2 45 221 15 222 19 1 223 45 184 34 226 12 13 3 19 2 203 45 227 15 176 15 10 15 228 10 1 6 1 12 15 229 13 0 10 2 7 3 6 3 6 2 12 10 3 6 3 73 43 2 29) #1# #2# 8379) "Execute body for each match to the 
  query. Within the body, bind each 
  variable.")) #2# 0) #Y(si::bytecodes nil nil (15 2 15 3 15 4 15 5 19 4 6 15 2 14 7 77 77 19 4 6 15 2 1 8 12 19 2 9 15 2 15 10 15 11 19 3 12 1 2 73 29) #1# #2# 127) #Y(si::bytecodes nil nil (15 13 15 3 15 14 15 15 19 4 6 15 13 14 7 77 15 16 19 4 6 15 13 1 18 12 19 2 9 15 13 15 10 15 19 19 3 12 1 13 73 29) #1# #2# 936) #Y(si::bytecodes nil nil (15 20 15 3 15 21 15 22 19 4 6 15 20 14 7 77 15 23 19 4 6 15 20 1 24 12 19 2 9 15 20 15 10 15 25 19 3 12 1 20 73 29) #1# #2# 1026) #Y(si::bytecodes nil nil (15 26 15 3 15 27 15 28 19 4 6 15 26 14 7 77 15 29 19 4 6 15 26 1 40 12 19 2 9 15 26 15 10 15 41 19 3 12 1 26 73 29) #1# #2# 1105) #Y(si::bytecodes nil nil (15 42 15 43 15 44 77 15 45 15 46 15 47 77 77 77 15 48 9 4 77 77 77 19 15 49 15 50 15 3 15 51 15 52 19 4 6 15 53 15 3 15 54 15 55 19 4 6 15 53 14 7 77 15 56 19 4 6 15 53 1 67 12 19 2 9 1 42 73 29) #1# #2# 1220) #Y(si::bytecodes nil nil (75 45 68 15 69 15 3 15 70 15 71 19 4 6 15 69 14 7 77 15 72 19 4 6 15 69 34 79 12 19 2 9 15 69 15 10 15 80 19 3 12 15 81 15 3 15 82 15 83 19 4 6 15 81 14 7 77 77 19 4 6 15 81 34 88 12 19 2 9 15 81 15 10 15 89 19 3 12 1 81 73 43 1 29) #1# #2# 1512) #Y(si::bytecodes nil nil (15 90 15 3 15 91 15 92 19 4 6 15 90 14 7 77 15 93 19 4 6 15 90 1 96 12 19 2 9 15 90 15 10 15 97 19 3 12 1 90 73 29) #1# #2# 2084) #Y(si::bytecodes nil nil (15 95 15 3 15 98 15 99 19 4 6 15 95 14 7 77 15 100 19 4 6 15 95 1 113 12 19 2 9 15 95 15 10 15 114 19 3 12 1 95 73 29) #1# #2# 2325) #Y(si::bytecodes nil nil (15 112 15 3 15 115 15 116 19 4 6 15 112 14 7 77 15 117 19 4 6 15 112 1 125 12 19 2 9 15 112 15 10 15 126 19 3 12 1 112 73 29) #1# #2# 3076) #Y(si::bytecodes nil nil (15 127 15 3 15 128 15 129 19 4 6 15 127 14 7 77 77 19 4 6 15 127 1 139 12 19 2 9 1 127 73 29) #1# #2# 3326) #Y(si::bytecodes nil nil (15 140 15 3 15 141 15 142 19 4 6 15 140 14 7 77 15 143 19 4 6 15 140 1 147 12 19 2 9 15 140 15 10 15 148 19 3 12 1 140 73 29) #1# #2# 3683) #Y(si::bytecodes nil nil (15 146 15 3 15 149 15 150 19 4 6 15 146 14 7 77 15 151 19 4 6 15 146 1 164 12 19 2 9 15 146 15 10 15 165 19 3 12 1 146 73 29) #1# #2# 4503) #Y(si::bytecodes nil nil (15 161 15 3 15 166 15 167 19 4 6 15 161 14 7 77 15 168 19 4 6 15 161 1 172 12 19 2 9 15 161 15 10 15 173 19 3 12 1 161 73 29) #1# #2# 5943) #Y(si::bytecodes nil nil (1 174 16 175 29) #1# #2# 6720) #Y(si::bytecodes nil nil (15 176 15 3 15 177 15 178 19 4 6 15 176 14 7 77 15 179 19 4 6 15 176 1 187 12 19 2 9 15 176 15 10 15 188 19 3 12 1 176 73 29) #1# #2# 7124) #Y(si::bytecodes nil nil (15 189 15 3 15 190 15 191 19 4 6 15 189 14 7 77 15 192 19 4 6 15 189 34 195 12 19 2 9 15 189 15 10 15 196 19 3 12 1 189 73 29) #1# #2# 7413) #Y(si::bytecodes nil nil (15 197 15 3 15 198 15 199 19 4 6 15 197 14 7 77 15 200 19 4 6 15 197 34 204 12 19 2 9 15 197 15 10 15 205 19 3 12 1 197 73 29) #1# #2# 7645) #Y(si::bytecodes nil nil (15 132 15 3 15 206 15 207 19 4 6 15 132 14 7 77 15 208 19 4 6 15 132 1 210 12 19 2 9 15 132 15 10 15 211 19 3 12 1 132 73 29) #1# #2# 7879) #Y(si::bytecodes nil nil (15 212 15 3 15 213 15 214 19 4 6 15 212 14 7 77 15 215 19 4 6 15 212 34 230 12 14 64 9 3 19 4 9 15 212 15 10 15 231 19 3 12 1 212 73 29) #1# #2# 8379))
