(#Y(si::bytecodes nil nil (1 0 16 1 29) #1=#A(t (575) ("MORE-EFFICIENCY" si::select-package more-efficiency::square ext::location (defun more-efficiency::square) (#2=#P"/data/data/org.eql5.android.repl/files/quicklisp/local-projects/paip/ch-10-more-efficiency.lisp" . 130) ext::annotate :lambda-list (more-efficiency::x) more-efficiency::x * #Y(more-efficiency::square nil nil (24 45 9 26 13 0 13 0 19 2 10 29) #1# #2# 130) si::fset function "Given a number, return its square." si::set-documentation more-efficiency::sum-squares (defun more-efficiency::sum-squares) (#2# . 541) (more-efficiency::seq) more-efficiency::seq more-efficiency::sum length si::%dotimes-var more-efficiency::i elt #:g736 + 1+ < #Y(more-efficiency::sum-squares nil nil (24 45 20 26 8 0 45 21 10 1 16 22 45 23 8 0 45 24 38 30 13 3 10 0 17 25 12 19 1 2 45 26 13 3 13 0 19 2 27 51 3 43 1 10 0 16 28 51 0 13 0 13 1 19 2 29 40 -37 43 2 10 0 73 43 1 29) #1# #2# 541) "Given a sequence of numbers, 
  return the sum of their squares. 
  No declarations." more-efficiency::sum-squares-vec-of-ints (defun more-efficiency::sum-squares-vec-of-ints) (#2# . 752) (more-efficiency::vect) more-efficiency::vect svref #:g744 #Y(more-efficiency::sum-squares-vec-of-ints nil nil (24 45 36 26 8 0 45 21 10 1 16 22 45 23 8 0 45 24 38 31 13 3 10 0 17 37 12 19 1 2 45 38 13 3 13 0 19 2 27 51 3 43 1 10 0 16 28 51 0 75 13 0 13 1 19 2 29 40 -38 73 43 2 43 1 29) #1# #2# 752) "Given a vector of integers
  that are no bigger than the 
  word length of the platform, return
  the sum of their squares. Uses 
  declarations to improve speed." (inline more-efficiency::key) proclaim more-efficiency::key (defun more-efficiency::key) (#2# . 3295) (&key more-efficiency::a more-efficiency::b (more-efficiency::c 1) (more-efficiency::d (sqrt more-efficiency::a))) (nil :d :c :b :a) more-efficiency::a more-efficiency::b more-efficiency::c sqrt more-efficiency::d more-efficiency::%no-key #Y(more-efficiency::key nil nil (28 47 22 40 2 77 46 48 22 40 2 77 46 49 22 40 3 9 1 46 50 22 40 6 10 2 16 51 12 46 52 13 3 13 2 13 1 13 0 19 4 53 29) #1# #2# 3295) (defun more-efficiency::%no-key) (#2# . 3358) (more-efficiency::a more-efficiency::b more-efficiency::c more-efficiency::d) #Y(more-efficiency::%no-key nil nil (24 45 48 24 45 49 24 45 50 24 45 52 26 13 3 13 2 13 1 10 0 6 4 73 29) #1# #2# 3358) more-efficiency::ensure-atom (defun more-efficiency::ensure-atom) (#2# . 3402) (more-efficiency::obj) more-efficiency::obj atom #Y(more-efficiency::ensure-atom nil nil (24 45 63 26 10 0 16 64 39 6 10 0 73 38 8 10 0 4 12 19 1 59 29) #1# #2# 3402) more-efficiency::defun* (defmacro more-efficiency::defun*) (#2# . 3591) (more-efficiency::fn-name more-efficiency::arg-list &rest more-efficiency::body) #:g746 #:g745 #:g747 si::dm-too-few-arguments more-efficiency::fn-name more-efficiency::arg-list more-efficiency::body &key member &rest more-efficiency::*no-key compile-simplify::concat-symbol lambda-list-keywords set-difference mapcar more-efficiency::args more-efficiency::no-key-fn-name progn quote inline defun #Y(more-efficiency::defun* nil nil (24 45 70 24 45 71 26 10 1 5 45 72 10 0 76 39 6 13 2 19 1 73 10 0 4 12 10 0 5 51 0 22 45 74 10 1 76 39 6 13 3 19 1 73 10 1 4 12 10 1 5 51 1 22 45 75 10 2 45 76 15 77 13 1 19 2 78 39 9 15 79 13 1 19 2 78 76 39 77 13 2 15 80 19 2 81 12 33 59 12 13 1 14 82 19 2 83 12 19 2 84 12 46 85 46 86 15 87 15 42 15 88 15 89 10 4 6 2 6 2 6 2 12 15 90 13 0 13 1 10 2 7 4 12 15 90 13 4 13 3 13 0 10 1 7 2 6 4 6 4 73 43 2 38 12 15 90 13 2 13 1 10 0 7 4 73 29) #1# #2# 3591) t "Define two functions, one an interface
  to a &keyword-less version. Proclaim
  the interface function inline." more-efficiency::flatten1 (defun more-efficiency::flatten1) (#2# . 4349) (more-efficiency::tree) more-efficiency::tree append #Y(more-efficiency::flatten1 nil nil (24 45 98 26 10 0 76 39 5 75 73 38 33 10 0 16 64 39 8 10 0 6 1 73 38 20 10 0 4 12 19 1 94 12 10 0 5 12 19 1 94 12 19 2 99 29) #1# #2# 4349) "Given a nested list, return a flat
  list of the atoms. Simple version, and
  expensive because of consing and repeated
  traversal." more-efficiency::flatten2 (defun more-efficiency::flatten2) (#2# . 5577) (more-efficiency::tree &optional more-efficiency::accumulator) more-efficiency::accumulator #Y(more-efficiency::flatten2 nil nil (24 45 98 25 40 2 77 46 106 26 10 1 76 39 6 10 0 73 38 32 10 1 16 64 39 9 14 64 10 0 3 73 38 18 10 1 4 12 10 1 5 12 13 0 19 2 102 12 19 2 102 29) #1# #2# 5577) "Much more efficient flatten function" more-efficiency::variablep (defun more-efficiency::variablep) (#2# . 5850) (more-efficiency::obj) symbolp symbol-name char #\? char= #Y(more-efficiency::variablep nil nil (24 45 63 26 10 0 16 113 73 39 16 10 0 16 114 12 8 0 17 115 12 15 116 19 2 117 29) #1# #2# 5850) :fill-pointer :adjustable make-array more-efficiency::vars more-efficiency::vals more-efficiency::success more-efficiency::fail more-efficiency::efficient-pat-match (defun more-efficiency::efficient-pat-match) (#2# . 6138) (more-efficiency::pattern more-efficiency::input) more-efficiency::pattern more-efficiency::input si::fill-pointer-set more-efficiency::pat-match-1 #Y(more-efficiency::efficient-pat-match nil nil (24 45 130 24 45 131 26 13 5 8 0 17 132 13 4 8 0 17 132 13 1 13 0 19 2 133 29) #1# #2# 6138) "Match pattern against input" (defun more-efficiency::pat-match-1) (#2# . 6138) (more-efficiency::pattern more-efficiency::input) more-efficiency::match-var eql consp #Y(more-efficiency::pat-match-1 nil nil (24 45 130 24 45 131 26 13 1 19 1 109 39 10 13 1 13 0 19 2 139 38 56 13 1 10 0 17 140 39 6 10 3 73 38 43 10 1 16 141 39 5 10 0 16 141 39 28 10 1 4 12 10 0 4 12 19 2 133 73 39 12 10 1 5 12 10 0 5 12 19 2 133 38 4 10 2 73 29) #1# #2# 6138) (defun more-efficiency::match-var) (#2# . 6138) (more-efficiency::var more-efficiency::input) more-efficiency::var position vector-push-extend aref equal #Y(more-efficiency::match-var nil nil (24 45 146 24 45 131 26 13 1 13 5 19 2 147 45 24 10 0 76 39 20 13 2 13 6 19 2 148 13 1 13 5 19 2 148 10 4 73 38 22 13 1 13 5 13 0 19 2 149 17 150 39 6 10 4 73 38 4 10 3 73 43 1 29) #1# #2# 6138) "Match a single variable against input" more-efficiency::current-size more-efficiency::max-size more-efficiency::efficient-pat-match-2 (defun more-efficiency::efficient-pat-match-2) (#2# . 7262) (more-efficiency::pattern more-efficiency::input) more-efficiency::pat-match-1-2 #Y(more-efficiency::efficient-pat-match-2 nil nil (24 45 130 24 45 131 26 8 0 51 7 13 1 13 0 19 2 159 29) #1# #2# 7262) (defun more-efficiency::pat-match-1-2) (#2# . 7262) (more-efficiency::pattern more-efficiency::input) more-efficiency::match-var-2 #Y(more-efficiency::pat-match-1-2 nil nil (24 45 130 24 45 131 26 13 1 19 1 109 39 10 13 1 13 0 19 2 164 38 56 13 1 10 0 17 140 39 6 10 3 73 38 43 10 1 16 141 39 5 10 0 16 141 39 28 10 1 4 12 10 0 4 12 19 2 159 73 39 12 10 1 5 12 10 0 5 12 19 2 159 38 4 10 2 73 29) #1# #2# 7262) (defun more-efficiency::match-var-2) (#2# . 7262) (more-efficiency::var more-efficiency::input) = replace si::aset more-efficiency::size #:g781 more-efficiency::current #Y(more-efficiency::match-var-2 nil nil (24 45 146 24 45 131 26 13 1 13 5 19 2 147 45 24 10 0 76 39 90 13 8 13 7 19 2 169 39 43 9 2 13 7 19 2 10 51 7 13 7 19 1 121 12 13 6 19 2 170 51 6 13 7 19 1 121 12 13 5 19 2 170 51 5 13 6 10 5 3 51 4 13 6 13 8 13 2 19 3 171 13 5 13 8 13 1 19 3 171 11 172 45 173 14 174 13 0 19 2 27 52 174 43 1 10 4 73 38 22 13 1 13 5 13 0 19 2 149 17 150 39 6 10 4 73 38 4 10 3 73 43 1 29) #1# #2# 7262) (inline more-efficiency::reuse-cons) more-efficiency::reuse-cons (defun more-efficiency::reuse-cons) (#2# . 8939) (more-efficiency::x more-efficiency::y more-efficiency::xy) more-efficiency::y more-efficiency::xy #Y(more-efficiency::reuse-cons nil nil (24 45 9 24 45 181 24 45 182 26 13 2 10 0 4 17 140 39 8 13 1 10 0 5 17 140 39 6 10 0 73 38 7 13 2 10 1 3 73 29) #1# #2# 8939) "Return (cons x y), or just xy
  when it is the same thing.
  Useful only when x and y are
  symbols, numbers of the same type
  or characters, and xy either
  contains one element or is a 
  dotted list." more-efficiency::remq (defun more-efficiency::remq) (#2# . 9260) (more-efficiency::item list) more-efficiency::item list eq #Y(more-efficiency::remq nil nil (24 45 189 24 45 190 26 10 0 76 39 5 75 73 38 40 13 1 10 0 4 17 191 39 12 13 1 10 0 5 12 19 2 185 38 20 10 0 4 12 13 1 10 0 5 12 19 2 185 12 13 0 19 3 177 29) #1# #2# 9260) "Like ``remove'', but uses eq and 
  only works on lists." more-efficiency::*uniq-cons-table* si::*make-special boundp :test make-hash-table (defvar more-efficiency::*uniq-cons-table*) (#2# . 9556) more-efficiency::ucons (defun more-efficiency::ucons) (#2# . 9765) (more-efficiency::x more-efficiency::y) gethash si::hash-set more-efficiency::car-table #Y(more-efficiency::ucons nil nil (24 45 9 24 45 181 26 13 1 14 194 19 2 205 40 17 13 1 14 194 14 197 33 191 12 19 2 198 12 19 3 206 45 207 13 1 13 0 19 2 205 73 40 14 13 1 13 0 13 2 10 1 3 12 19 3 206 43 1 29) #1# #2# 9765) "Return a cons so that
  (eq (ucons x y) (ucons x y)) is true." more-efficiency::*uniq-atom-table* (defvar more-efficiency::*uniq-atom-table*) (#2# . 10124) more-efficiency::unique (defun more-efficiency::unique) (#2# . 10186) (exp) exp #:g798 symbol typep fixnum cons more-efficiency::unique-cons #Y(more-efficiency::unique nil nil (24 45 217 26 10 0 45 218 13 0 15 219 19 2 220 39 6 10 1 73 38 69 13 0 15 221 19 2 220 39 6 10 1 73 38 55 13 0 15 64 19 2 220 39 22 13 1 14 210 19 2 205 73 40 10 13 1 14 210 13 1 19 3 206 38 25 13 0 15 222 19 2 220 39 14 10 1 4 12 10 1 5 12 19 2 223 38 3 75 73 43 1 29) #1# #2# 10186) "Return a canonical expression that is
  EQUAL to exp arg, such that (equal x y)
  implies (eq (unique x) (unique y))." more-efficiency::unique-cons% (defun more-efficiency::unique-cons%) (#2# . 10682) (more-efficiency::x more-efficiency::y) #Y(more-efficiency::unique-cons% nil nil (24 45 9 24 45 181 26 13 1 19 1 213 12 13 0 19 1 213 12 19 2 201 29) #1# #2# 10682) "Return a cons such that
  (when (and (equal x x2)
             (equal y y2))
   -> (eq (unique-cons x y)
          (unique-cons x2 y2))" more-efficiency::ulist (defun more-efficiency::ulist) (#2# . 10888) (&rest list) #Y(more-efficiency::ulist nil nil (27 45 190 14 85 19 1 213 29) #1# #2# 10888) "Return a uniquified list of 
  the args." more-efficiency::uappend (defun more-efficiency::uappend) (#2# . 10977) (more-efficiency::x more-efficiency::y) #Y(more-efficiency::uappend nil nil (24 45 9 24 45 181 26 10 1 76 39 8 13 0 19 1 213 38 18 10 1 4 12 10 1 5 12 13 0 19 2 238 12 19 2 201 29) #1# #2# 10977) "Given two lists, return a uniquified
  list containing all the elements of 
  the first arg in order, followed
  by all the elements of the second 
  arg in order." (defun more-efficiency::unique-cons) (#2# . 11264) (more-efficiency::x more-efficiency::y) more-efficiency::uy more-efficiency::ux #Y(more-efficiency::unique-cons nil nil (24 45 9 24 45 181 26 77 77 46 247 46 248 13 3 14 194 19 2 205 40 32 13 3 19 1 213 51 0 12 14 194 19 2 205 40 17 13 0 14 194 14 197 33 140 12 19 2 198 12 19 3 206 45 207 13 3 13 0 19 2 205 73 40 30 13 3 19 1 213 51 2 12 13 0 19 2 205 73 40 14 13 2 13 0 13 1 10 2 3 12 19 3 206 43 1 43 2 29) #1# #2# 11264) "Return a cons such that
  (when (and (equal x x2)
             (equal y y2))
   -> (eq (unique-cons x y)
          (unique-cons x2 y2))" more-efficiency::defresource (defmacro more-efficiency::defresource) (#2# . 12192) (more-efficiency::name &key more-efficiency::constructor (more-efficiency::initial-copies 0) (more-efficiency::size (max more-efficiency::initial-copies 10))) #:g819 #:g818 #:g820 more-efficiency::name :constructor si::search-keyword #:g821 si::missing-keyword more-efficiency::constructor :initial-copies #:g822 more-efficiency::initial-copies :size #:g823 max (:size :initial-copies :constructor) si::check-keyword more-efficiency::-resource more-efficiency::deallocate- more-efficiency::allocate- more-efficiency::allocate more-efficiency::deallocate more-efficiency::resource let (:fill-pointer 0) "Get an element from the resource
         pool, or make one." if zerop fill-pointer vector-pop "Place a no-longer needed element
         back in the pool." plusp mapc loop more-efficiency::repeat more-efficiency::collect #Y(more-efficiency::defresource nil nil (24 45 255 24 45 256 26 10 1 5 45 257 10 0 76 39 6 13 2 19 1 73 10 0 4 12 10 0 5 51 0 22 45 258 13 1 15 259 19 2 260 45 261 13 0 1 262 17 191 39 4 75 38 3 10 0 45 263 13 3 15 264 19 2 260 45 265 13 0 1 262 17 191 39 5 8 0 38 3 10 0 45 266 13 5 15 267 19 2 260 45 268 13 0 1 262 17 191 39 10 13 1 9 10 19 2 269 38 3 10 0 45 172 13 7 15 270 19 2 271 13 6 15 272 19 2 81 12 15 273 13 6 19 2 81 12 15 274 13 6 19 2 81 12 46 275 46 276 46 277 15 278 13 0 15 121 13 3 1 279 7 3 6 2 6 1 12 15 90 13 2 77 15 280 15 281 15 282 15 283 10 0 6 2 6 2 12 13 7 15 284 10 0 6 2 6 4 6 5 12 15 90 13 1 10 9 6 1 12 15 285 15 148 13 9 10 0 6 3 6 5 12 10 5 16 286 73 39 27 15 287 15 13 10 1 6 2 12 15 288 15 289 13 5 15 290 10 2 6 1 6 5 6 3 73 12 15 88 10 9 6 2 6 6 73 43 3 29) #1# #2# 12192) more-efficiency::with-resource (defmacro more-efficiency::with-resource) (#2# . 14172) ((more-efficiency::var more-efficiency::resource &optional more-efficiency::protect) &body more-efficiency::body) #:g825 #:g824 #:g826 #:g827 #:g828 more-efficiency::protect si::dm-too-many-arguments unwind-protect setf unless null #Y(more-efficiency::with-resource nil nil (24 45 296 24 45 297 26 10 1 5 45 298 10 0 76 39 6 13 2 19 1 73 10 0 4 12 10 0 5 51 0 22 45 299 10 0 45 300 10 0 76 39 6 13 4 19 1 73 10 0 4 12 10 0 5 51 0 22 45 146 10 1 76 39 6 13 5 19 1 73 10 1 4 12 10 1 5 51 1 22 45 277 10 2 39 13 10 2 4 12 10 2 5 51 2 22 38 2 75 45 301 10 5 45 76 10 4 39 6 13 8 19 1 302 15 274 13 2 19 2 81 12 15 273 13 2 19 2 81 12 46 276 46 275 10 3 39 55 15 278 13 5 75 6 2 6 1 12 15 303 15 87 15 304 13 5 10 0 6 1 6 3 12 10 2 7 3 12 15 305 15 306 10 5 6 2 12 13 1 10 5 6 2 6 3 6 3 6 3 73 38 31 15 278 13 5 10 0 6 1 6 2 6 1 12 13 2 13 1 10 5 6 2 6 1 12 19 2 99 7 3 73 43 2 29) #1# #2# 14172) "Execute body with var bound to an
   instance of resource." more-efficiency::tconc (defun more-efficiency::tconc) (#2# . 15197) (more-efficiency::item more-efficiency::q) more-efficiency::q #:g835 #:g837 #:g838 rplaca #:g839 #:g840 rplacd #:g836 #Y(more-efficiency::tconc nil nil (24 45 189 24 45 313 26 10 0 45 314 10 1 5 76 39 25 10 1 45 315 13 3 75 3 45 316 13 1 10 0 17 317 10 0 43 1 43 1 38 25 10 1 45 318 13 3 75 3 45 319 10 1 5 12 10 0 17 320 10 0 43 1 43 1 45 321 13 1 10 0 17 320 10 0 73 43 1 43 1 29) #1# #2# 15197) "Insert item at the end of a queue." (inline more-efficiency::queue-contents more-efficiency::make-queue more-efficiency::enqueue more-efficiency::dequeue more-efficiency::front more-efficiency::empty-queue-p more-efficiency::queue-nconc) more-efficiency::queue-contents (defun more-efficiency::queue-contents) (#2# . 17954) (more-efficiency::q) #Y(more-efficiency::queue-contents nil nil (24 45 313 26 10 0 5 73 29) #1# #2# 17954) more-efficiency::make-queue (defun more-efficiency::make-queue) (#2# . 17992) #:g843 #:g844 #Y(more-efficiency::make-queue nil nil (26 77 75 3 45 313 10 0 45 333 10 1 45 334 13 1 10 0 17 317 10 0 73 43 1 43 1 43 1 29) #1# #2# 17992) "Build and return a new, empty queue." more-efficiency::enqueue (defun more-efficiency::enqueue) (#2# . 18106) (more-efficiency::item more-efficiency::q) #:g849 #:g851 #:g852 #:g850 #Y(more-efficiency::enqueue nil nil (24 45 189 24 45 313 26 10 0 45 341 10 1 45 342 13 3 75 3 45 343 10 1 4 12 10 0 17 320 10 0 43 1 43 1 45 344 13 1 10 0 17 317 10 0 43 1 43 1 10 0 73 29) #1# #2# 18106) "Insert an item at the end of a queue." more-efficiency::dequeue (defun more-efficiency::dequeue) (#2# . 18249) (more-efficiency::q) #:g857 #:g858 #:g859 #:g860 #Y(more-efficiency::dequeue nil nil (24 45 313 26 10 0 45 351 10 0 5 45 352 10 0 4 10 0 5 51 0 13 1 10 0 17 320 10 0 43 2 10 0 5 76 39 21 10 0 45 353 10 1 45 354 13 1 10 0 17 317 10 0 43 1 43 1 10 0 73 29) #1# #2# 18249) "Remove an item from the front of a queue." more-efficiency::front (defun more-efficiency::front) (#2# . 18376) (more-efficiency::q) #Y(more-efficiency::front nil nil (24 45 313 26 13 0 19 1 325 4 73 29) #1# #2# 18376) more-efficiency::empty-queue-p (defun more-efficiency::empty-queue-p) (#2# . 18422) (more-efficiency::q) #Y(more-efficiency::empty-queue-p nil nil (24 45 313 26 13 0 19 1 325 76 73 29) #1# #2# 18422) more-efficiency::queue-nconc (defun more-efficiency::queue-nconc) (#2# . 18476) (more-efficiency::q list) #:g865 #:g867 #:g868 last #:g866 #Y(more-efficiency::queue-nconc nil nil (24 45 313 24 45 190 26 10 1 45 371 10 2 45 372 10 2 45 373 10 1 4 12 10 0 17 320 13 0 43 1 43 1 19 1 374 45 375 13 1 10 0 17 317 10 0 43 1 43 1 10 1 73 29) #1# #2# 18476) "Given a queue and a list, add
  the elements in the list to the 
  end of the queue." more-efficiency::trie "TRIE-" ((more-efficiency::value nil) (more-efficiency::arcs nil)) ((more-efficiency::value nil t nil 0 nil) (more-efficiency::arcs nil t nil 1 nil)) more-efficiency::copy-trie (more-efficiency::make-trie) more-efficiency::trie-p si::define-structure (defstruct more-efficiency::trie) (#2# . 18652) more-efficiency::make-trie (defun more-efficiency::make-trie) (#2# . 18652) (&key #3=#:value #4=#:arcs) (nil :arcs :value) #3# #4# 0 si::make-structure #Y(more-efficiency::make-trie nil nil (28 392 22 40 2 77 46 393 22 40 2 77 46 394 15 395 13 1 13 0 19 3 396 29) #1# #2# 18652) find-class more-efficiency::trie-arcs symbol-package package ext::package-locked-p si::*ignore-package-locks* package-error "Ignore lock and proceed." "Attempt to define CAS accessor ~S in locked package." (more-efficiency::trie-arcs) :package si::signal-simple-error mp::cas-expander #:g871 si::x gensym si::new si::old mp::compare-and-swap-structure si::structure-ref #Y(nil nil nil (24 45 411 24 45 412 26 19 0 413 12 19 0 413 12 46 414 46 415 77 77 13 0 13 1 15 416 13 2 15 88 1 378 6 2 12 9 1 13 0 10 1 6 6 12 15 417 13 2 15 88 1 378 6 2 12 8 1 6 4 12 72 6 43 2 29) #1# #2# 18652) si::put-sysprop more-efficiency::trie-value (more-efficiency::trie-value) #:g872 #Y(nil nil nil (24 45 422 24 45 412 26 19 0 413 12 19 0 413 12 46 414 46 415 77 77 13 0 13 1 15 416 13 2 15 88 1 378 6 2 12 9 0 13 0 10 1 6 6 12 15 417 13 2 15 88 1 378 6 2 12 8 0 6 4 12 72 6 43 2 29) #1# #2# 18652) more-efficiency::+trie-deleted+ more-efficiency::deleted si::*make-constant (defconstant more-efficiency::+trie-deleted+) (#2# . 19460) more-efficiency::put-trie (defun more-efficiency::put-trie) (#2# . 19499) (more-efficiency::key more-efficiency::trie more-efficiency::value) more-efficiency::value more-efficiency::find-trie #:g875 #:g876 si::structure-set #Y(more-efficiency::put-trie nil nil (24 45 43 24 45 378 24 45 433 26 13 2 14 92 13 1 19 3 434 45 435 10 1 45 436 13 1 15 378 9 0 13 0 19 4 437 43 1 43 1 29) #1# #2# 19499) "Set the value of any key in trie." more-efficiency::get-trie (defun more-efficiency::get-trie) (#2# . 19631) (more-efficiency::key more-efficiency::trie) more-efficiency::key-trie more-efficiency::key-value more-efficiency::val #Y(more-efficiency::get-trie nil nil (24 45 43 24 45 378 26 13 1 77 13 0 19 3 434 45 444 10 0 39 6 13 0 19 1 445 45 446 10 1 76 40 7 13 0 11 424 17 191 39 7 77 77 72 2 38 7 13 0 14 92 72 2 43 2 29) #1# #2# 19631) "Return the value for a key in a tree, 
  and a second foundp value." more-efficiency::delete-trie (defun more-efficiency::delete-trie) (#2# . 19964) (more-efficiency::key more-efficiency::trie) #Y(more-efficiency::delete-trie nil nil (24 45 43 24 45 378 26 13 1 13 0 14 424 19 3 429 29) #1# #2# 19964) "Remove a key from a trie." (defun more-efficiency::find-trie) (#2# . 20063) (more-efficiency::key more-efficiency::extendp more-efficiency::trie) more-efficiency::extendp more-efficiency::follow-arc "." #Y(more-efficiency::find-trie nil nil (24 45 43 24 45 458 24 45 378 26 10 0 76 39 5 75 73 38 47 10 2 16 64 39 12 13 2 13 1 13 0 19 3 459 38 30 10 2 5 12 13 1 10 2 4 12 13 1 15 460 13 1 13 0 19 3 434 12 19 3 434 12 19 3 434 29) #1# #2# 20063) "Find the trie-node for this key.
  If extendp is t, make a new node if 
  one does not exist." (defun more-efficiency::follow-arc) (#2# . 20448) (more-efficiency::component more-efficiency::extendp more-efficiency::trie) more-efficiency::component assoc more-efficiency::arc more-efficiency::new-trie #:g882 #:g880 #:g881 #Y(more-efficiency::follow-arc nil nil (24 45 466 24 45 458 24 45 378 26 13 2 13 0 19 1 399 12 19 2 467 45 468 10 0 39 7 10 0 5 73 38 54 10 2 76 39 5 75 73 38 45 19 0 388 45 469 13 4 10 0 3 45 470 10 3 45 471 13 1 13 0 19 1 399 3 45 472 13 1 15 378 9 1 13 0 19 4 437 43 3 10 0 73 43 1 43 1 29) #1# #2# 20448) "Find the trie node for this component
  of the key. If extendp is t, make a 
  new node if need be." more-efficiency::with-gensyms (defmacro more-efficiency::with-gensyms) (#2# . 20883) ((&rest more-efficiency::syms) &body more-efficiency::body) #:g884 #:g883 #:g885 #:g886 #:g887 more-efficiency::syms more-efficiency::sym #Y(nil nil nil (24 45 485 26 13 0 15 413 10 0 16 114 6 2 6 2 73 29) #1# #2# 20883) #Y(more-efficiency::with-gensyms nil nil (24 45 479 24 45 480 26 10 1 5 45 481 10 0 76 39 6 13 2 19 1 73 10 0 4 12 10 0 5 51 0 22 45 482 10 0 45 483 10 0 45 484 10 3 45 76 15 278 1 486 12 13 1 19 2 84 12 10 0 7 3 73 29) #1# #2# 20883) more-efficiency::deftable (defmacro more-efficiency::deftable) (#2# . 22392) (more-efficiency::name type &key inline (more-efficiency::size 20) (more-efficiency::test (function eql))) #:g889 #:g888 #:g890 type :inline #:g891 #:g892 #:g893 more-efficiency::test (:test :size :inline) more-efficiency::get- more-efficiency::put- more-efficiency::clear- more-efficiency::map- more-efficiency::-table* more-efficiency::t-tab more-efficiency::map-t more-efficiency::clear-t more-efficiency::put-t more-efficiency::get-t declare #:g908 0 #:g906 (more-efficiency::k) cdr more-efficiency::k (more-efficiency::k more-efficiency::v) acons more-efficiency::v (more-efficiency::fn) (function (lambda (more-efficiency::entry) (let ((more-efficiency::k (car more-efficiency::entry)) (more-efficiency::v (cdr more-efficiency::entry))) (funcall more-efficiency::fn more-efficiency::k more-efficiency::v)))) more-efficiency::hash "COLL" "K" "V" more-efficiency::coll (more-efficiency::k) (more-efficiency::k more-efficiency::v) clrhash (more-efficiency::fn) maphash lambda (more-efficiency::k more-efficiency::v) push (funcall more-efficiency::fn more-efficiency::k more-efficiency::v) more-efficiency::plist "only EQ or EQL tests permitted with~%~
              plist tables" error "KS" "VS" "RPLIST" "I" "REST" rest more-efficiency::rplist more-efficiency::vs more-efficiency::ks (more-efficiency::k) get (more-efficiency::k more-efficiency::v) symbol-plist (more-efficiency::fn) reverse do evenp car funcall more-efficiency::fn vector (:adjustable t :fill-pointer 0) (:adjustable t :fill-pointer 0) (more-efficiency::k) when (more-efficiency::k more-efficiency::v) (:adjustable t :fill-pointer 0) (:adjustable t :fill-pointer 0) (more-efficiency::fn) map (quote list) (assoc more-efficiency::hash more-efficiency::plist vector) si::ccase-error #Y(more-efficiency::deftable nil nil (24 45 492 24 45 493 26 10 1 5 45 494 10 0 76 39 6 13 2 19 1 73 10 0 4 12 10 0 5 51 0 22 45 258 10 1 76 39 6 13 3 19 1 73 10 1 4 12 10 1 5 51 1 22 45 495 13 2 15 496 19 2 260 45 497 13 0 1 262 17 191 39 4 75 38 3 10 0 45 89 13 4 15 267 19 2 260 45 498 13 0 1 262 17 191 39 5 8 20 38 3 10 0 45 172 13 6 15 197 19 2 260 45 499 13 0 1 262 17 191 39 5 33 140 38 3 10 0 45 500 13 8 15 501 19 2 271 15 502 13 7 19 2 81 12 15 503 13 7 19 2 81 12 15 504 13 7 19 2 81 12 15 505 13 7 19 2 81 12 15 10 13 7 15 506 19 3 81 12 46 507 46 508 46 509 46 510 46 511 15 87 10 9 73 39 20 15 512 15 88 15 89 13 0 13 1 10 3 6 4 6 2 6 2 73 12 57 513 60 841 57 514 61 1 1 10 13 45 515 10 0 42 467 104 15 278 13 7 75 6 2 6 1 12 15 90 13 3 15 516 15 517 15 467 15 518 13 7 14 197 10 8 6 5 6 2 6 4 12 15 90 13 4 15 519 15 304 13 7 15 520 15 518 15 521 10 7 6 4 6 3 6 4 12 15 90 13 5 77 15 304 13 7 75 6 3 6 4 12 15 90 13 6 15 522 15 84 15 523 10 7 6 3 6 4 12 15 88 10 15 6 2 6 7 73 38 718 42 524 163 15 525 19 1 413 12 15 526 19 1 413 12 15 527 19 1 413 12 46 521 46 518 46 528 15 278 13 10 15 198 14 197 13 11 14 267 10 13 6 5 6 2 6 1 12 15 90 13 6 15 529 15 205 15 518 10 10 6 3 6 4 12 15 90 13 7 15 530 15 304 15 205 15 518 10 10 6 3 12 1 521 6 3 6 4 12 15 90 13 8 77 15 531 10 10 6 2 6 4 12 15 90 13 9 15 532 15 278 13 0 75 6 2 6 1 12 15 533 15 13 15 534 15 535 15 536 15 537 10 0 6 3 6 3 6 2 12 10 10 6 3 12 10 0 6 4 6 4 12 15 88 10 18 6 2 6 7 73 43 3 38 553 42 538 333 13 8 33 191 12 33 140 6 2 12 14 197 33 150 12 19 4 78 76 39 6 15 539 19 1 540 15 541 19 1 413 12 15 542 19 1 413 12 15 543 19 1 413 12 15 544 19 1 413 12 15 545 19 1 413 12 15 526 19 1 413 12 15 527 19 1 413 12 46 521 46 518 46 546 46 24 46 547 46 548 46 549 15 87 15 90 13 10 15 550 15 551 15 88 10 14 6 2 12 1 518 6 3 6 4 12 15 90 13 11 15 552 15 304 15 551 15 88 10 14 6 2 12 1 518 6 3 12 1 521 6 3 6 4 12 15 90 13 12 77 15 304 15 553 15 88 10 14 6 2 6 2 12 75 6 3 6 4 12 15 90 13 13 15 554 15 278 13 0 75 6 2 12 13 1 75 6 2 12 13 2 15 555 15 553 15 88 10 14 6 2 6 2 6 2 6 2 6 3 12 15 556 13 3 9 0 15 28 10 3 6 2 6 3 12 13 4 13 2 15 517 10 4 6 2 6 3 6 2 12 15 306 10 4 6 2 6 1 12 15 281 15 557 10 3 6 2 12 15 536 15 558 10 4 6 2 12 10 1 6 3 12 15 536 15 558 10 4 6 2 12 10 0 6 3 6 4 6 4 12 15 84 15 13 15 534 13 5 10 6 6 2 12 15 559 15 560 13 5 10 6 6 4 6 3 6 2 12 13 0 10 1 6 4 6 4 6 4 12 15 88 10 22 6 2 6 6 73 43 7 38 218 42 561 201 15 541 19 1 413 12 15 542 19 1 413 12 15 544 19 1 413 12 46 24 46 548 46 549 15 278 13 0 15 121 13 13 1 562 7 3 6 2 12 13 1 15 121 13 13 1 563 7 3 6 2 6 2 12 15 90 13 6 15 564 15 278 13 2 15 147 15 518 13 0 14 197 10 11 6 5 6 2 6 1 12 15 565 13 2 15 149 13 1 10 2 6 3 6 3 6 3 6 4 12 15 90 13 7 15 566 15 148 15 518 10 0 6 3 12 15 148 15 521 10 1 6 3 6 5 12 15 90 13 8 77 15 304 13 0 15 121 13 13 1 567 7 3 6 3 12 15 304 13 1 15 121 13 13 1 568 7 3 6 3 12 1 92 6 6 12 15 90 13 9 15 569 15 570 15 571 15 560 13 0 10 1 6 5 6 4 12 15 88 10 18 6 2 6 7 73 43 3 38 15 15 495 13 0 15 572 19 3 573 51 14 35 1 0 36 2 43 1 62 63 6 3 73 43 5 29) #1# #2# 22392))) #2# 0) #Y(si::bytecodes nil nil (15 2 15 3 15 4 15 5 19 4 6 15 2 14 7 77 15 8 19 4 6 15 2 1 11 12 19 2 12 15 2 15 13 15 14 19 3 15 1 2 73 29) #1# #2# 130) #Y(si::bytecodes nil nil (15 16 15 3 15 17 15 18 19 4 6 15 16 14 7 77 15 19 19 4 6 15 16 1 30 12 19 2 12 15 16 15 13 15 31 19 3 15 1 16 73 29) #1# #2# 541) #Y(si::bytecodes nil nil (15 32 15 3 15 33 15 34 19 4 6 15 32 14 7 77 15 35 19 4 6 15 32 1 39 12 19 2 12 15 32 15 13 15 40 19 3 15 1 32 73 29) #1# #2# 752) #Y(si::bytecodes nil nil (1 41 16 42 29) #1# #2# 1248) #Y(si::bytecodes nil nil (15 43 15 3 15 44 15 45 19 4 6 15 43 14 7 77 15 46 19 4 6 15 43 1 54 12 19 2 12 1 43 73 29) #1# #2# 3295) #Y(si::bytecodes nil nil (15 53 15 3 15 55 15 56 19 4 6 15 53 14 7 77 15 57 19 4 6 15 53 1 58 12 19 2 12 1 53 73 29) #1# #2# 3358) #Y(si::bytecodes nil nil (15 59 15 3 15 60 15 61 19 4 6 15 59 14 7 77 15 62 19 4 6 15 59 1 65 12 19 2 12 1 59 73 29) #1# #2# 3402) #Y(si::bytecodes nil nil (15 66 15 3 15 67 15 68 19 4 6 15 66 14 7 77 15 69 19 4 6 15 66 1 91 12 14 92 9 3 19 4 12 15 66 15 13 15 93 19 3 15 1 66 73 29) #1# #2# 3591) #Y(si::bytecodes nil nil (15 94 15 3 15 95 15 96 19 4 6 15 94 14 7 77 15 97 19 4 6 15 94 1 100 12 19 2 12 15 94 15 13 15 101 19 3 15 1 94 73 29) #1# #2# 4349) #Y(si::bytecodes nil nil (15 102 15 3 15 103 15 104 19 4 6 15 102 14 7 77 15 105 19 4 6 15 102 1 107 12 19 2 12 15 102 15 13 15 108 19 3 15 1 102 73 29) #1# #2# 5577) #Y(si::bytecodes nil nil (15 109 15 3 15 110 15 111 19 4 6 15 109 14 7 77 15 112 19 4 6 15 109 1 118 12 19 2 12 1 109 73 29) #1# #2# 5850) #Y(si::bytecodes nil nil (9 10 14 119 9 0 14 120 14 92 19 5 121 45 122 9 10 14 119 9 0 14 120 14 92 19 5 121 45 123 13 1 10 0 3 45 124 75 45 125 15 126 15 3 15 127 15 128 19 4 6 15 126 14 7 77 15 129 19 4 6 15 126 34 134 12 19 2 12 15 126 15 13 15 135 19 3 15 15 133 15 3 15 136 15 137 19 4 6 15 133 14 7 77 15 138 19 4 6 15 133 34 142 12 19 2 12 15 139 15 3 15 143 15 144 19 4 6 15 139 14 7 77 15 145 19 4 6 15 139 34 151 12 19 2 12 15 139 15 13 15 152 19 3 15 1 139 73 43 4 29) #1# #2# 6138) #Y(si::bytecodes nil nil (8 0 45 153 8 1 45 154 13 0 19 1 121 45 122 13 1 19 1 121 45 123 13 1 10 0 3 45 124 75 45 125 15 155 15 3 15 156 15 157 19 4 6 15 155 14 7 77 15 158 19 4 6 15 155 34 160 12 19 2 12 15 159 15 3 15 161 15 162 19 4 6 15 159 14 7 77 15 163 19 4 6 15 159 34 165 12 19 2 12 15 164 15 3 15 166 15 167 19 4 6 15 164 14 7 77 15 168 19 4 6 15 164 34 175 12 19 2 12 1 164 73 43 6 29) #1# #2# 7262) #Y(si::bytecodes nil nil (1 176 16 42 29) #1# #2# 8767) #Y(si::bytecodes nil nil (15 177 15 3 15 178 15 179 19 4 6 15 177 14 7 77 15 180 19 4 6 15 177 1 183 12 19 2 12 15 177 15 13 15 184 19 3 15 1 177 73 29) #1# #2# 8939) #Y(si::bytecodes nil nil (15 185 15 3 15 186 15 187 19 4 6 15 185 14 7 77 15 188 19 4 6 15 185 1 192 12 19 2 12 15 185 15 13 15 193 19 3 15 1 185 73 29) #1# #2# 9260) #Y(si::bytecodes nil nil (1 194 16 195 1 194 16 196 76 39 11 14 197 33 191 12 19 2 198 52 194 15 194 15 3 15 199 15 200 19 4 6 1 194 73 29) #1# #2# 9556) #Y(si::bytecodes nil nil (15 201 15 3 15 202 15 203 19 4 6 15 201 14 7 77 15 204 19 4 6 15 201 1 208 12 19 2 12 15 201 15 13 15 209 19 3 15 1 201 73 29) #1# #2# 9765) #Y(si::bytecodes nil nil (1 210 16 195 1 210 16 196 76 39 11 14 197 33 150 12 19 2 198 52 210 15 210 15 3 15 211 15 212 19 4 6 1 210 73 29) #1# #2# 10124) #Y(si::bytecodes nil nil (15 213 15 3 15 214 15 215 19 4 6 15 213 14 7 77 15 216 19 4 6 15 213 1 224 12 19 2 12 15 213 15 13 15 225 19 3 15 1 213 73 29) #1# #2# 10186) #Y(si::bytecodes nil nil (15 226 15 3 15 227 15 228 19 4 6 15 226 14 7 77 15 229 19 4 6 15 226 1 230 12 19 2 12 15 226 15 13 15 231 19 3 15 1 226 73 29) #1# #2# 10682) #Y(si::bytecodes nil nil (15 232 15 3 15 233 15 234 19 4 6 15 232 14 7 77 15 235 19 4 6 15 232 1 236 12 19 2 12 15 232 15 13 15 237 19 3 15 1 232 73 29) #1# #2# 10888) #Y(si::bytecodes nil nil (15 238 15 3 15 239 15 240 19 4 6 15 238 14 7 77 15 241 19 4 6 15 238 1 242 12 19 2 12 15 238 15 13 15 243 19 3 15 1 238 73 29) #1# #2# 10977) #Y(si::bytecodes nil nil (15 223 15 3 15 244 15 245 19 4 6 15 223 14 7 77 15 246 19 4 6 15 223 1 249 12 19 2 12 15 223 15 13 15 250 19 3 15 1 223 73 29) #1# #2# 11264) #Y(si::bytecodes nil nil (15 251 15 3 15 252 15 253 19 4 6 15 251 14 7 77 15 254 19 4 6 15 251 1 291 12 14 92 9 2 19 4 12 1 251 73 29) #1# #2# 12192) #Y(si::bytecodes nil nil (15 292 15 3 15 293 15 294 19 4 6 15 292 14 7 77 15 295 19 4 6 15 292 1 307 12 14 92 9 2 19 4 12 15 292 15 13 15 308 19 3 15 1 292 73 29) #1# #2# 14172) #Y(si::bytecodes nil nil (15 309 15 3 15 310 15 311 19 4 6 15 309 14 7 77 15 312 19 4 6 15 309 1 322 12 19 2 12 15 309 15 13 15 323 19 3 15 1 309 73 29) #1# #2# 15197) #Y(si::bytecodes nil nil (1 324 16 42 29) #1# #2# 17552) #Y(si::bytecodes nil nil (15 325 15 3 15 326 15 327 19 4 6 15 325 14 7 77 15 328 19 4 6 15 325 1 329 12 19 2 12 1 325 73 29) #1# #2# 17954) #Y(si::bytecodes nil nil (15 330 15 3 15 331 15 332 19 4 6 15 330 14 7 77 77 19 4 6 15 330 1 335 12 19 2 12 15 330 15 13 15 336 19 3 15 1 330 73 29) #1# #2# 17992) #Y(si::bytecodes nil nil (15 337 15 3 15 338 15 339 19 4 6 15 337 14 7 77 15 340 19 4 6 15 337 1 345 12 19 2 12 15 337 15 13 15 346 19 3 15 1 337 73 29) #1# #2# 18106) #Y(si::bytecodes nil nil (15 347 15 3 15 348 15 349 19 4 6 15 347 14 7 77 15 350 19 4 6 15 347 1 355 12 19 2 12 15 347 15 13 15 356 19 3 15 1 347 73 29) #1# #2# 18249) #Y(si::bytecodes nil nil (15 357 15 3 15 358 15 359 19 4 6 15 357 14 7 77 15 360 19 4 6 15 357 1 361 12 19 2 12 1 357 73 29) #1# #2# 18376) #Y(si::bytecodes nil nil (15 362 15 3 15 363 15 364 19 4 6 15 362 14 7 77 15 365 19 4 6 15 362 1 366 12 19 2 12 1 362 73 29) #1# #2# 18422) #Y(si::bytecodes nil nil (15 367 15 3 15 368 15 369 19 4 6 15 367 14 7 77 15 370 19 4 6 15 367 1 376 12 19 2 12 15 367 15 13 15 377 19 3 15 1 367 73 29) #1# #2# 18476) #Y(si::bytecodes nil nil (15 378 15 379 77 77 15 380 15 381 15 382 77 77 77 15 383 9 2 77 77 15 384 19 15 385 15 378 15 3 15 386 15 387 19 4 6 15 388 15 3 15 389 15 390 19 4 6 15 388 14 7 77 15 391 19 4 6 15 378 19 1 398 78 395 15 388 1 397 12 19 2 12 1 399 16 400 45 401 10 0 39 10 10 0 16 402 39 4 11 403 76 39 16 15 404 15 405 15 406 15 407 14 408 13 0 19 6 409 43 1 15 399 15 410 1 418 12 19 3 419 1 420 16 400 45 401 10 0 39 10 10 0 16 402 39 4 11 403 76 39 16 15 404 15 405 15 406 15 421 14 408 13 0 19 6 409 43 1 15 420 15 410 1 423 12 19 3 419 1 378 73 29) #1# #2# 18652) #Y(si::bytecodes nil nil (15 424 1 425 17 426 15 424 15 3 15 427 15 428 19 4 6 1 424 73 29) #1# #2# 19460) #Y(si::bytecodes nil nil (15 429 15 3 15 430 15 431 19 4 6 15 429 14 7 77 15 432 19 4 6 15 429 1 438 12 19 2 12 15 429 15 13 15 439 19 3 15 1 429 73 29) #1# #2# 19499) #Y(si::bytecodes nil nil (15 440 15 3 15 441 15 442 19 4 6 15 440 14 7 77 15 443 19 4 6 15 440 1 447 12 19 2 12 15 440 15 13 15 448 19 3 15 1 440 73 29) #1# #2# 19631) #Y(si::bytecodes nil nil (15 449 15 3 15 450 15 451 19 4 6 15 449 14 7 77 15 452 19 4 6 15 449 1 453 12 19 2 12 15 449 15 13 15 454 19 3 15 1 449 73 29) #1# #2# 19964) #Y(si::bytecodes nil nil (15 434 15 3 15 455 15 456 19 4 6 15 434 14 7 77 15 457 19 4 6 15 434 1 461 12 19 2 12 15 434 15 13 15 462 19 3 15 1 434 73 29) #1# #2# 20063) #Y(si::bytecodes nil nil (15 459 15 3 15 463 15 464 19 4 6 15 459 14 7 77 15 465 19 4 6 15 459 1 473 12 19 2 12 15 459 15 13 15 474 19 3 15 1 459 73 29) #1# #2# 20448) #Y(si::bytecodes nil nil (15 475 15 3 15 476 15 477 19 4 6 15 475 14 7 77 15 478 19 4 6 15 475 1 487 12 14 92 9 2 19 4 12 1 475 73 29) #1# #2# 20883) #Y(si::bytecodes nil nil (15 488 15 3 15 489 15 490 19 4 6 15 488 14 7 77 15 491 19 4 6 15 488 1 574 12 14 92 9 3 19 4 12 1 488 73 29) #1# #2# 22392))
