(#Y(si::bytecodes nil nil (1 0 16 1 29) #1=#A(t (179) ("02-SIMPLE-PROGRAM" si::select-package 02-simple-program::sentence ext::location (defun 02-simple-program::sentence) (#2=#P"/data/data/org.eql5.android.repl/files/quicklisp/local-projects/paip/ch-02.lisp" . 181) ext::annotate :lambda-list 02-simple-program::noun-phrase 02-simple-program::verb-phrase append #Y(02-simple-program::sentence nil nil (26 19 0 8 12 19 0 9 12 19 2 10 29) #1# #2# 181) si::fset 02-simple-program::noun-phrase% (defun 02-simple-program::noun-phrase%) (#2# . 241) 02-simple-program::article 02-simple-program::noun #Y(02-simple-program::noun-phrase% nil nil (26 19 0 16 12 19 0 17 12 19 2 10 29) #1# #2# 241) (defun 02-simple-program::verb-phrase) (#2# . 298) 02-simple-program::verb #Y(02-simple-program::verb-phrase nil nil (26 19 0 21 12 19 0 8 12 19 2 10 29) #1# #2# 298) (defun 02-simple-program::article) (#2# . 354) (the 02-simple-program::a) 02-simple-program::one-of #Y(02-simple-program::article nil nil (26 15 25 19 1 26 29) #1# #2# 354) (defun 02-simple-program::noun) (#2# . 394) (02-simple-program::man 02-simple-program::ball 02-simple-program::woman 02-simple-program::table) #Y(02-simple-program::noun nil nil (26 15 30 19 1 26 29) #1# #2# 394) (defun 02-simple-program::verb) (#2# . 446) (02-simple-program::hit 02-simple-program::took 02-simple-program::saw 02-simple-program::liked) #Y(02-simple-program::verb nil nil (26 15 34 19 1 26 29) #1# #2# 446) (defun 02-simple-program::one-of) (#2# . 496) (set) set 02-simple-program::random-elt #Y(02-simple-program::one-of nil nil (24 45 39 26 13 0 19 1 40 6 1 73 29) #1# #2# 496) function "Pick one element of set, and make a 
  list of it." si::set-documentation (defun 02-simple-program::random-elt) (#2# . 599) (02-simple-program::choices) 02-simple-program::choices length random elt #Y(02-simple-program::random-elt nil nil (24 45 48 26 13 0 10 0 16 49 12 19 1 50 17 51 29) #1# #2# 599) "Choose an element from a list at random." 02-simple-program::adj (defun 02-simple-program::adj) (#2# . 718) (02-simple-program::big 02-simple-program::little 02-simple-program::blue 02-simple-program::green 02-simple-program::adiabiatic) #Y(02-simple-program::adj nil nil (26 15 57 19 1 26 29) #1# #2# 718) 02-simple-program::prep (defun 02-simple-program::prep) (#2# . 783) (02-simple-program::to 02-simple-program::in 02-simple-program::by 02-simple-program::on 02-simple-program::with) #Y(02-simple-program::prep nil nil (26 15 62 19 1 26 29) #1# #2# 783) 02-simple-program::pp (defun 02-simple-program::pp) (#2# . 831) #Y(02-simple-program::pp nil nil (26 19 0 59 12 19 0 8 12 19 2 10 29) #1# #2# 831) 02-simple-program::pp* (defun 02-simple-program::pp*) (#2# . 878) (t nil) #Y(02-simple-program::pp* nil nil (26 15 71 19 1 40 39 14 19 0 64 12 19 0 68 12 19 2 10 38 3 75 73 29) #1# #2# 878) "Kleene star notation. Optional construct
  in a sentence." 02-simple-program::adj* (defun 02-simple-program::adj*) (#2# . 1021) zerop #Y(02-simple-program::adj* nil nil (26 9 2 19 1 50 16 77 39 5 75 73 38 12 19 0 54 12 19 0 74 12 19 2 10 29) #1# #2# 1021) (defun 02-simple-program::noun-phrase) (#2# . 1102) #Y(02-simple-program::noun-phrase nil nil (26 19 0 16 12 19 0 74 12 19 0 17 12 19 0 68 12 19 4 10 29) #1# #2# 1102) "Updated to include adj* and pp*" 02-simple-program::*simple-grammar* si::*make-special ((02-simple-program::sentence 02-simple-program::-> (02-simple-program::noun-phrase 02-simple-program::verb-phrase)) (02-simple-program::noun-phrase 02-simple-program::-> (02-simple-program::article 02-simple-program::noun)) (02-simple-program::verb-phrase 02-simple-program::-> (02-simple-program::verb 02-simple-program::noun-phrase)) (02-simple-program::article 02-simple-program::-> the 02-simple-program::a) (02-simple-program::noun 02-simple-program::-> 02-simple-program::man 02-simple-program::ball 02-simple-program::woman 02-simple-program::table) (02-simple-program::verb 02-simple-program::-> 02-simple-program::hit 02-simple-program::took 02-simple-program::saw 02-simple-program::liked)) variable "Trivial grammar for a subset of English." (defparameter 02-simple-program::*simple-grammar*) (#2# . 1208) 02-simple-program::*grammar* "The grammar currently in use." (defparameter 02-simple-program::*grammar*) (#2# . 1967) 02-simple-program::rule-lhs (defun 02-simple-program::rule-lhs) (#2# . 2044) (02-simple-program::rule) 02-simple-program::rule #Y(02-simple-program::rule-lhs nil nil (24 45 98 26 10 0 4 73 29) #1# #2# 2044) "Retrieves the left-hand side of a rule,
  i.e., the grammatical category or key." 02-simple-program::rule-rhs (defun 02-simple-program::rule-rhs) (#2# . 2169) (02-simple-program::rule) #Y(02-simple-program::rule-rhs nil nil (24 45 98 26 10 0 5 5 73 29) #1# #2# 2169) "Retrieves the right-hand side of a rule,
  i.e. the rule itself, or value." 02-simple-program::rewrites (defun 02-simple-program::rewrites) (#2# . 2294) (02-simple-program::category) 02-simple-program::category assoc #Y(02-simple-program::rewrites nil nil (24 45 111 26 13 0 14 90 19 2 112 12 19 1 101 29) #1# #2# 2294) "Returns a list of the possible rewrites
  for this category." 02-simple-program::generate% (defun 02-simple-program::generate%) (#2# . 2478) (02-simple-program::phrase) 02-simple-program::phrase listp 02-simple-program::generate alexandria::mappend #Y(02-simple-program::generate% nil nil (24 45 119 26 10 0 16 120 39 11 33 121 12 13 0 19 2 122 38 28 13 0 19 1 107 39 16 13 0 19 1 107 12 19 1 40 12 19 1 121 38 6 10 0 6 1 73 29) #1# #2# 2478) "Generate a random sentence or phrase." (defun 02-simple-program::generate) (#2# . 2706) (02-simple-program::phrase) #Y(02-simple-program::generate nil nil (24 45 119 26 10 0 16 120 39 11 33 121 12 13 0 19 2 122 38 30 13 0 19 1 107 45 48 10 0 39 12 13 0 19 1 40 12 19 1 121 38 6 10 1 6 1 73 43 1 29) #1# #2# 2706) "Generate a random sentence or phrase.
  Tiny improvement: calls rewrites only
  once." 02-simple-program::*bigger-grammar* ((02-simple-program::sentence 02-simple-program::-> (02-simple-program::noun-phrase 02-simple-program::verb-phrase)) (02-simple-program::noun-phrase 02-simple-program::-> (02-simple-program::article 02-simple-program::adj* 02-simple-program::noun 02-simple-program::pp*) (02-simple-program::name) (02-simple-program::pronoun)) (02-simple-program::verb-phrase 02-simple-program::-> (02-simple-program::verb 02-simple-program::noun-phrase 02-simple-program::pp*)) (02-simple-program::article 02-simple-program::-> the 02-simple-program::a) (02-simple-program::adj* 02-simple-program::-> nil (02-simple-program::adj 02-simple-program::adj*)) (02-simple-program::noun 02-simple-program::-> 02-simple-program::man 02-simple-program::ball 02-simple-program::woman 02-simple-program::table) (02-simple-program::pp* 02-simple-program::-> nil (02-simple-program::pp 02-simple-program::pp*)) (02-simple-program::name 02-simple-program::-> 02-simple-program::pat 02-simple-program::kim 02-simple-program::lee 02-simple-program::terry 02-simple-program::robin) (02-simple-program::pronoun 02-simple-program::-> 02-simple-program::he 02-simple-program::she 02-simple-program::it 02-simple-program::those 02-simple-program::these 02-simple-program::that) (02-simple-program::verb 02-simple-program::-> 02-simple-program::hit 02-simple-program::took 02-simple-program::saw 02-simple-program::liked) (02-simple-program::adj 02-simple-program::-> 02-simple-program::big 02-simple-program::little 02-simple-program::blue 02-simple-program::green 02-simple-program::adiabiatic) (02-simple-program::pp 02-simple-program::-> (02-simple-program::prep 02-simple-program::noun-phrase)) (02-simple-program::prep 02-simple-program::-> 02-simple-program::to 02-simple-program::in 02-simple-program::by 02-simple-program::with 02-simple-program::on)) (defparameter 02-simple-program::*bigger-grammar*) (#2# . 3016) 02-simple-program::combine-all% (defun 02-simple-program::combine-all%) (#2# . 4334) (02-simple-program::x-list 02-simple-program::y-list) 02-simple-program::x-list 02-simple-program::y-list 02-simple-program::y 02-simple-program::x #Y(nil nil nil (24 45 141 26 13 0 13 1 19 2 10 29) #1# #2# 4334) mapcar #Y(nil nil nil (24 45 140 26 34 142 12 13 2 19 2 143 29) #1# #2# 4334) #Y(02-simple-program::combine-all% nil nil (24 45 138 24 45 139 26 34 144 12 13 0 19 2 122 29) #1# #2# 4334) "Return a list of lists formed by 
  appending a y to an x.
  E.g. (combine-all '((a) (b)) '((1) (2)))
  -> ((A 1) (B 1) (A 2) (B 2))" 02-simple-program::generate-tree (defun 02-simple-program::generate-tree) (#2# . 4628) (02-simple-program::phrase) #Y(02-simple-program::generate-tree nil nil (24 45 119 26 10 0 16 120 39 11 33 147 12 13 0 19 2 143 38 32 13 0 19 1 107 39 20 13 0 13 0 19 1 107 12 19 1 40 12 19 1 147 3 73 38 6 10 0 6 1 73 29) #1# #2# 4628) "Generate a random sentence or phrase,
  with a complete parse tree." 02-simple-program::generate-all (defun 02-simple-program::generate-all) (#2# . 4942) (02-simple-program::phrase) 02-simple-program::combine-all #Y(02-simple-program::generate-all nil nil (24 45 119 26 10 0 76 39 7 75 6 1 73 38 56 10 0 16 120 39 22 10 0 4 12 19 1 153 12 10 0 5 12 19 1 153 12 19 2 157 38 29 13 0 19 1 107 39 15 33 153 12 13 0 19 1 107 12 19 2 122 38 8 10 0 6 1 6 1 73 29) #1# #2# 4942) "Generate a list of all possible 
  expansions of this phrase." 02-simple-program::*gramática-sencilla-española* ((02-simple-program::oración 02-simple-program::-> (02-simple-program::frase-sustantiva 02-simple-program::frase-verbal)) (02-simple-program::frase-sustantiva 02-simple-program::-> (02-simple-program::artículo 02-simple-program::sustantivo)) (02-simple-program::frase-verbal 02-simple-program::-> (02-simple-program::verbo 02-simple-program::frase-sustantiva)) (02-simple-program::artículo 02-simple-program::-> 02-simple-program::la 02-simple-program::una) (02-simple-program::sustantivo 02-simple-program::-> 02-simple-program::mujer 02-simple-program::mesa 02-simple-program::pelota 02-simple-program::secadora) (02-simple-program::verbo 02-simple-program::-> 02-simple-program::golpó 02-simple-program::utilizó 02-simple-program::hizo 02-simple-program::vió)) (defparameter 02-simple-program::*gramática-sencilla-española*) (#2# . 5312) 02-simple-program::cross-product (defun 02-simple-program::cross-product) (#2# . 5792) (02-simple-program::fn 02-simple-program::xlist 02-simple-program::ylist) 02-simple-program::fn 02-simple-program::xlist 02-simple-program::ylist #Y(nil nil nil (24 45 141 26 13 4 13 0 13 1 20 2 23 29) #1# #2# 5792) #Y(nil nil nil (24 45 140 26 34 171 12 13 2 19 2 143 29) #1# #2# 5792) #Y(02-simple-program::cross-product nil nil (24 45 168 24 45 169 24 45 170 26 34 172 12 13 0 19 2 122 29) #1# #2# 5792) (defun 02-simple-program::combine-all) (#2# . 6317) (02-simple-program::xlist 02-simple-program::ylist) #Y(02-simple-program::combine-all nil nil (24 45 169 24 45 170 26 33 10 12 13 1 13 0 19 3 164 29) #1# #2# 6317) "Rewritten in terms of cross-product.")) #2# 0) #Y(si::bytecodes nil nil (15 2 15 3 15 4 15 5 19 4 6 15 2 14 7 77 77 19 4 6 15 2 1 11 12 19 2 12 1 2 73 29) #1# #2# 181) #Y(si::bytecodes nil nil (15 13 15 3 15 14 15 15 19 4 6 15 13 14 7 77 77 19 4 6 15 13 1 18 12 19 2 12 1 13 73 29) #1# #2# 241) #Y(si::bytecodes nil nil (15 9 15 3 15 19 15 20 19 4 6 15 9 14 7 77 77 19 4 6 15 9 1 22 12 19 2 12 1 9 73 29) #1# #2# 298) #Y(si::bytecodes nil nil (15 16 15 3 15 23 15 24 19 4 6 15 16 14 7 77 77 19 4 6 15 16 1 27 12 19 2 12 1 16 73 29) #1# #2# 354) #Y(si::bytecodes nil nil (15 17 15 3 15 28 15 29 19 4 6 15 17 14 7 77 77 19 4 6 15 17 1 31 12 19 2 12 1 17 73 29) #1# #2# 394) #Y(si::bytecodes nil nil (15 21 15 3 15 32 15 33 19 4 6 15 21 14 7 77 77 19 4 6 15 21 1 35 12 19 2 12 1 21 73 29) #1# #2# 446) #Y(si::bytecodes nil nil (15 26 15 3 15 36 15 37 19 4 6 15 26 14 7 77 15 38 19 4 6 15 26 1 41 12 19 2 12 15 26 15 42 15 43 19 3 44 1 26 73 29) #1# #2# 496) #Y(si::bytecodes nil nil (15 40 15 3 15 45 15 46 19 4 6 15 40 14 7 77 15 47 19 4 6 15 40 1 52 12 19 2 12 15 40 15 42 15 53 19 3 44 1 40 73 29) #1# #2# 599) #Y(si::bytecodes nil nil (15 54 15 3 15 55 15 56 19 4 6 15 54 14 7 77 77 19 4 6 15 54 1 58 12 19 2 12 1 54 73 29) #1# #2# 718) #Y(si::bytecodes nil nil (15 59 15 3 15 60 15 61 19 4 6 15 59 14 7 77 77 19 4 6 15 59 1 63 12 19 2 12 1 59 73 29) #1# #2# 783) #Y(si::bytecodes nil nil (15 64 15 3 15 65 15 66 19 4 6 15 64 14 7 77 77 19 4 6 15 64 1 67 12 19 2 12 1 64 73 29) #1# #2# 831) #Y(si::bytecodes nil nil (15 68 15 3 15 69 15 70 19 4 6 15 68 14 7 77 77 19 4 6 15 68 1 72 12 19 2 12 15 68 15 42 15 73 19 3 44 1 68 73 29) #1# #2# 878) #Y(si::bytecodes nil nil (15 74 15 3 15 75 15 76 19 4 6 15 74 14 7 77 77 19 4 6 15 74 1 78 12 19 2 12 1 74 73 29) #1# #2# 1021) #Y(si::bytecodes nil nil (15 8 15 3 15 79 15 80 19 4 6 15 8 14 7 77 77 19 4 6 15 8 1 81 12 19 2 12 15 8 15 42 15 82 19 3 44 1 8 73 29) #1# #2# 1102) #Y(si::bytecodes nil nil (1 83 16 84 1 85 52 83 15 83 15 86 15 87 19 3 44 15 83 15 3 15 88 15 89 19 4 6 1 83 73 29) #1# #2# 1208) #Y(si::bytecodes nil nil (1 90 16 84 11 83 52 90 15 90 15 86 15 91 19 3 44 15 90 15 3 15 92 15 93 19 4 6 1 90 73 29) #1# #2# 1967) #Y(si::bytecodes nil nil (15 94 15 3 15 95 15 96 19 4 6 15 94 14 7 77 15 97 19 4 6 15 94 1 99 12 19 2 12 15 94 15 42 15 100 19 3 44 1 94 73 29) #1# #2# 2044) #Y(si::bytecodes nil nil (15 101 15 3 15 102 15 103 19 4 6 15 101 14 7 77 15 104 19 4 6 15 101 1 105 12 19 2 12 15 101 15 42 15 106 19 3 44 1 101 73 29) #1# #2# 2169) #Y(si::bytecodes nil nil (15 107 15 3 15 108 15 109 19 4 6 15 107 14 7 77 15 110 19 4 6 15 107 1 113 12 19 2 12 15 107 15 42 15 114 19 3 44 1 107 73 29) #1# #2# 2294) #Y(si::bytecodes nil nil (15 115 15 3 15 116 15 117 19 4 6 15 115 14 7 77 15 118 19 4 6 15 115 1 123 12 19 2 12 15 115 15 42 15 124 19 3 44 1 115 73 29) #1# #2# 2478) #Y(si::bytecodes nil nil (15 121 15 3 15 125 15 126 19 4 6 15 121 14 7 77 15 127 19 4 6 15 121 1 128 12 19 2 12 15 121 15 42 15 129 19 3 44 1 121 73 29) #1# #2# 2706) #Y(si::bytecodes nil nil (1 130 16 84 1 131 52 130 15 130 15 3 15 132 15 133 19 4 6 1 130 73 29) #1# #2# 3016) #Y(si::bytecodes nil nil (15 134 15 3 15 135 15 136 19 4 6 15 134 14 7 77 15 137 19 4 6 15 134 34 145 12 19 2 12 15 134 15 42 15 146 19 3 44 1 134 73 29) #1# #2# 4334) #Y(si::bytecodes nil nil (15 147 15 3 15 148 15 149 19 4 6 15 147 14 7 77 15 150 19 4 6 15 147 1 151 12 19 2 12 15 147 15 42 15 152 19 3 44 1 147 73 29) #1# #2# 4628) #Y(si::bytecodes nil nil (15 153 15 3 15 154 15 155 19 4 6 15 153 14 7 77 15 156 19 4 6 15 153 1 158 12 19 2 12 15 153 15 42 15 159 19 3 44 1 153 73 29) #1# #2# 4942) #Y(si::bytecodes nil nil (1 160 16 84 1 161 52 160 15 160 15 3 15 162 15 163 19 4 6 1 160 73 29) #1# #2# 5312) #Y(si::bytecodes nil nil (15 164 15 3 15 165 15 166 19 4 6 15 164 14 7 77 15 167 19 4 6 15 164 34 173 12 19 2 12 1 164 73 29) #1# #2# 5792) #Y(si::bytecodes nil nil (15 157 15 3 15 174 15 175 19 4 6 15 157 14 7 77 15 176 19 4 6 15 157 1 177 12 19 2 12 15 157 15 42 15 178 19 3 44 1 157 73 29) #1# #2# 6317))
