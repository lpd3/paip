(#Y(si::bytecodes nil nil (1 0 16 1 29) #1=#A(t (65) ("EXPERT" si::select-package expert::+true+ 1.0 si::*make-constant ext::location (defconstant expert::+true+) (#2=#P"/data/data/org.eql5.android.repl/files/quicklisp/local-projects/paip/ch-16.lisp" . 106) ext::annotate expert::+false+ -1.0 (defconstant expert::+false+) (#2# . 862) expert::+unknown+ 0.0 (defconstant expert::+unknown+) (#2# . 890) expert::cf-or (defun expert::cf-or) (#2# . 919) :lambda-list (expert::a expert::b) expert::a expert::b plusp * + minusp abs min - / #Y(expert::cf-or nil nil (24 45 22 24 45 23 26 10 1 16 24 39 5 10 0 16 24 39 20 13 1 13 0 9 -1 13 1 13 0 19 3 25 12 19 3 26 38 61 10 1 16 27 39 5 10 0 16 27 39 18 13 1 13 0 13 1 13 0 19 2 25 12 19 3 26 38 32 13 1 13 0 19 2 26 12 9 1 10 1 16 28 12 10 0 16 28 12 19 2 29 12 19 2 30 12 19 2 31 29) #1# #2# 919) si::fset function "Combine the certainty factors for the 
  formula (A or B). This is used when two
  rules support the same conclusion." si::set-documentation expert::cf-and (defun expert::cf-and) (#2# . 1715) (expert::a expert::b) #Y(expert::cf-and nil nil (24 45 22 24 45 23 26 13 1 13 0 19 2 29 29) #1# #2# 1715) "Combine the certainty factors for 
  the formula (A and B)." expert::+cf-cut-off+ 0.2 variable "Below this certainty, we cut off search." (defconstant expert::+cf-cut-off+) (#2# . 1813) expert::truep (defun expert::truep) (#2# . 2030) (expert::cf) expert::cf expert::cfp > #Y(expert::truep nil nil (24 45 53 26 13 0 19 1 54 73 39 8 13 0 14 43 19 2 55 29) #1# #2# 2030) "Is this certainty factor considered 
  true?" expert::falsep (defun expert::falsep) (#2# . 2143) (expert::cf) < #Y(expert::falsep nil nil (24 45 53 26 13 0 19 1 54 73 39 14 13 0 14 43 15 3 19 2 30 12 19 2 62 29) #1# #2# 2143) "Is this certainty factor considered 
  false?")) #2# 0) #Y(si::bytecodes nil nil (15 2 1 3 17 4 15 2 15 5 15 6 15 7 19 4 8 1 2 73 29) #1# #2# 106) #Y(si::bytecodes nil nil (15 9 1 10 17 4 15 9 15 5 15 11 15 12 19 4 8 1 9 73 29) #1# #2# 862) #Y(si::bytecodes nil nil (15 13 1 14 17 4 15 13 15 5 15 15 15 16 19 4 8 1 13 73 29) #1# #2# 890) #Y(si::bytecodes nil nil (15 17 15 5 15 18 15 19 19 4 8 15 17 14 20 77 15 21 19 4 8 15 17 1 32 12 19 2 33 15 17 15 34 15 35 19 3 36 1 17 73 29) #1# #2# 919) #Y(si::bytecodes nil nil (15 37 15 5 15 38 15 39 19 4 8 15 37 14 20 77 15 40 19 4 8 15 37 1 41 12 19 2 33 15 37 15 34 15 42 19 3 36 1 37 73 29) #1# #2# 1715) #Y(si::bytecodes nil nil (15 43 1 44 17 4 15 43 15 45 15 46 19 3 36 15 43 15 5 15 47 15 48 19 4 8 1 43 73 29) #1# #2# 1813) #Y(si::bytecodes nil nil (15 49 15 5 15 50 15 51 19 4 8 15 49 14 20 77 15 52 19 4 8 15 49 1 56 12 19 2 33 15 49 15 34 15 57 19 3 36 1 49 73 29) #1# #2# 2030) #Y(si::bytecodes nil nil (15 58 15 5 15 59 15 60 19 4 8 15 58 14 20 77 15 61 19 4 8 15 58 1 63 12 19 2 33 15 58 15 34 15 64 19 3 36 1 58 73 29) #1# #2# 2143))
